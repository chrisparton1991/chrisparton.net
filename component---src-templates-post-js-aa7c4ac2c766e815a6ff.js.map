{"version":3,"sources":["webpack:///./src/templates/post.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/utils/siteConfig.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/common/Layout.js","webpack:///./src/components/common/PostCard.js","webpack:///./src/components/common/Pagination.js","webpack:///./src/components/common/Navigation.js","webpack:///./src/components/common/index.js","webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMeta.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/AuthorMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/index.js"],"names":["__webpack_require__","r","__webpack_exports__","d","postQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_helmet__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","_components_common__WEBPACK_IMPORTED_MODULE_2__","_components_common_meta__WEBPACK_IMPORTED_MODULE_3__","Post","_ref","data","location","post","ghostPost","a","createElement","Fragment","type","codeinjection_styles","bodyClass","className","feature_image","src","alt","title","dangerouslySetInnerHTML","__html","html","StaticQuery","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","query","render","finalData","props","children","Consumer","module","exports","siteUrl","postsPerPage","siteTitleMeta","siteDescriptionMeta","shareImageWidth","shareImageHeight","shortTitle","siteIcon","backgroundColor","themeColor","m","require","default","ProdPageRenderer","pageResources","InternalPageRenderer","Object","assign","json","DefaultLayout","isHome","site","allGhostSettings","edges","node","profileImageUrl","allGhostPost","primary_author","profile_image","twitterUrl","twitter","replace","facebookUrl","facebook","react_default","Helmet_default","lang","style","cover_image","backgroundImage","description","common_Navigation","navigation","navClass","href","target","rel","config","gatsby_browser_entry","to","DefaultLayoutSettingsQuery","Layout_DefaultLayout","_1281977687","PostCard","url","slug","readingTime","readingTimeHelper","tags","lib","visibility","autolink","featured","excerpt","name","Pagination","pageContext","previousPagePath","nextPagePath","humanPageNumber","numberOfPages","role","Navigation","map","navItem","i","match","key","label","defaultProps","Layout","common_PostCard","common_Pagination","getAuthorProperties","primaryAuthor","authorProfiles","push","website","_","compact","sameAsArray","length","join","image","fetchAuthorData","PropTypes","shape","string","isRequired","ImageMeta","content","property","ArticleMetaGhost","settings","canonical","author","publicTags","tagsHelper","fn","tag","primaryTag","shareImage","get","publisherLogo","logo","resolve","meta_title","meta_description","og_title","og_description","published_at","updated_at","keyword","twitter_title","twitter_description","meta_ImageMeta","ArticleMetaQuery","ArticleMeta_ArticleMetaGhost","_1004981455","WebsiteMeta","WebsiteMetaQuery","WebsiteMeta_WebsiteMeta","_3093436507","AuthorMeta","bio","AuthorMetaQuery","AuthorMeta_AuthorMeta","_4112685740","MetaData","pathname","ghostTag","ghostAuthor","ghostPage","ArticleMeta","meta_WebsiteMeta","meta_AuthorMeta","MetaDataQuery","MetaData_MetaData","_2233248733","meta_MetaData"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAAAS,EAAAT,EAAAO,EAAAC,GAAAE,EAAAV,EAAA,KAAAW,EAAAX,EAAA,KA6DeY,UA/CF,SAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,SACZC,EAAOF,EAAKG,UAElB,OACQX,EAAAY,EAAAC,cAAAb,EAAAY,EAAAE,SAAA,KACId,EAAAY,EAAAC,cAACR,EAAA,EAAD,CACIG,KAAMA,EACNC,SAAUA,EACVM,KAAK,YAETf,EAAAY,EAAAC,cAACV,EAAAS,EAAD,KACIZ,EAAAY,EAAAC,cAAA,SAAOE,KAAK,YAAZ,GAA2BL,EAAKM,uBAEpChB,EAAAY,EAAAC,cAACT,EAAA,EAAD,CAAQa,UAAU,gBACdjB,EAAAY,EAAAC,cAAA,OAAKK,UAAU,aACXlB,EAAAY,EAAAC,cAAA,WAASK,UAAU,WACbR,EAAKS,cACHnB,EAAAY,EAAAC,cAAA,UAAQK,UAAU,sBACdlB,EAAAY,EAAAC,cAAA,OAAKO,IAAMV,EAAKS,cAAgBE,IAAMX,EAAKY,SACnC,KAChBtB,EAAAY,EAAAC,cAAA,WAASK,UAAU,qBACflB,EAAAY,EAAAC,cAAA,MAAIK,UAAU,iBAAiBR,EAAKY,OAGpCtB,EAAAY,EAAAC,cAAA,WACIK,UAAU,qCACVK,wBAAyB,CAAEC,OAAQd,EAAKe,cAuBrE,IAAM3B,EAAS,+CC/DtBJ,EAAAG,EAAAD,EAAA,sBAAA8B,IAAA,IAAA3B,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAA4B,EAAAjC,EAAA,IAAAkC,EAAAlC,EAAAO,EAAA0B,GAAAjC,EAAAG,EAAAD,EAAA,sBAAAgC,EAAAhB,IAAAlB,EAAA,KAAAA,EAAA,GAcyBmC,QAAOC,QAdhC,IAgBMC,EAAqBC,IAAMC,cAAc,IAE/C,SAASC,EAAT3B,GAA2E,IAAxC4B,EAAwC5B,EAAxC4B,gBAAiB3B,EAAuBD,EAAvBC,KAAM4B,EAAiB7B,EAAjB6B,MAAOC,EAAU9B,EAAV8B,OACzDC,EAAY9B,EACdA,EAAKA,KACL2B,EAAgBC,IAAUD,EAAgBC,GAAO5B,KAErD,OACER,EAAAY,EAAAC,cAACb,EAAAY,EAAME,SAAP,KACGwB,GAAaD,EAAOC,IACnBA,GAAatC,EAAAY,EAAAC,cAAA,qCAKrB,IAAMa,EAAc,SAAAa,GAAS,IACnB/B,EAAkC+B,EAAlC/B,KAAM4B,EAA4BG,EAA5BH,MAAOC,EAAqBE,EAArBF,OAAQG,EAAaD,EAAbC,SAE7B,OACExC,EAAAY,EAAAC,cAACkB,EAAmBU,SAApB,KACG,SAAAN,GAAe,OACdnC,EAAAY,EAAAC,cAACqB,EAAD,CACE1B,KAAMA,EACN4B,MAAOA,EACPC,OAAQA,GAAUG,EAClBL,gBAAiBA,0BCzC3BO,EAAOC,QAAU,CACbC,QAAO,0BAEPC,aAAc,GAEdC,cAAa,kBACbC,oBAAmB,mEAEnBC,gBAAiB,IACjBC,iBAAkB,IAElBC,WAAU,cACVC,SAAQ,cACRC,gBAAe,UACfC,WAAU,gCCdd,IAAsBC,EAKpBZ,EAAOC,SALaW,EAKWC,EAAQ,OALRD,EAAEE,SAAYF,sqBCsBhCG,UAjBU,SAAAlD,GAAiC,IAA9BE,EAA8BF,EAA9BE,SAAUiD,EAAoBnD,EAApBmD,cACpC,OAAKA,EAGE1B,IAAMnB,cAAc8C,IAApBC,OAAAC,OAAA,CACLpD,WACAiD,iBACGA,EAAcI,OALV,uICcLC,iBAAgB,SAAAxD,GAA2C,IAAxCC,EAAwCD,EAAxCC,KAAMgC,EAAkCjC,EAAlCiC,SAAUvB,EAAwBV,EAAxBU,UAAW+C,EAAazD,EAAbyD,OAC1CC,EAAOzD,EAAK0D,iBAAiBC,MAAM,GAAGC,KACtCC,EAAkB7D,EAAK8D,aAAaH,MAAM,GAAGC,KAAKG,eAAeC,cACjEC,EAAaR,EAAKS,QAAL,uBAAsCT,EAAKS,QAAQC,QAAQ,KAArB,IAAmC,KACtFC,EAAcX,EAAKY,SAAL,4BAA4CZ,EAAKY,SAASF,QAAQ,MAAtB,IAAqC,KAErG,OACAG,EAAAlE,EAAAC,cAAAiE,EAAAlE,EAAAE,SAAA,KACIgE,EAAAlE,EAAAC,cAACkE,EAAAnE,EAAD,KACIkE,EAAAlE,EAAAC,cAAA,QAAMmE,KAAMf,EAAKe,OACjBF,EAAAlE,EAAAC,cAAA,SAAOE,KAAK,YAAZ,GAA2BkD,EAAKjD,sBAChC8D,EAAAlE,EAAAC,cAAA,QAAMK,UAAWD,KAGrB6D,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,YAEX4D,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,gBAEX4D,EAAAlE,EAAAC,cAAA,UAAQK,UAAU,YAAY+D,MAAKrB,OAAAC,OAAA,GAAOI,EAAKiB,aAAe,CAAEC,gBAAe,OAASlB,EAAKiB,YAAd,OAC3EJ,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,aACX4D,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,cAEb8C,EACEc,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,eACX4D,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,uBAAuBE,IAAKiD,IAC3CS,EAAAlE,EAAAC,cAAA,MAAIK,UAAU,qBAAqB+C,EAAK3C,OACxCwD,EAAAlE,EAAAC,cAAA,KAAGK,UAAU,oBAAoB+C,EAAKmB,cAE1C,KACJN,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,YACX4D,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,iBAEX4D,EAAAlE,EAAAC,cAACwE,EAAD,CAAY7E,KAAMyD,EAAKqB,WAAYC,SAAS,mBAEhDT,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,kBACT+C,EAAKS,SAAWI,EAAAlE,EAAAC,cAAA,KAAG2E,KAAOf,EAAavD,UAAU,gBAAgBuE,OAAO,SAASC,IAAI,uBAAsBZ,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,gBAAgBE,IAAI,4BAA4BC,IAAI,aAC9K4C,EAAKY,UAAYC,EAAAlE,EAAAC,cAAA,KAAG2E,KAAOZ,EAAc1D,UAAU,gBAAgBuE,OAAO,SAASC,IAAI,uBAAsBZ,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,gBAAgBE,IAAI,6BAA6BC,IAAI,cACnLyD,EAAAlE,EAAAC,cAAA,KAAGK,UAAU,gBAAgBsE,KAAI,0CAA6CG,IAAO/C,QAApD,QAAqE6C,OAAO,SAASC,IAAI,uBAAsBZ,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,gBAAgBE,IAAI,wBAAwBC,IAAI,kBAM/NyD,EAAAlE,EAAAC,cAAA,QAAMK,UAAU,aAEXsB,IAKTsC,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,mBAEX4D,EAAAlE,EAAAC,cAAA,UAAQK,UAAU,aACd4D,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,2BACX4D,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,sBACX4D,EAAAlE,EAAAC,cAAC+E,EAAA,EAAD,CAAMC,GAAG,KAAK5B,EAAK3C,OADvB,WAGAwD,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,uBACX4D,EAAAlE,EAAAC,cAACwE,EAAD,CAAY7E,KAAMyD,EAAKqB,WAAYC,SAAS,+BA+CzDO,EA1BoB,SAAAvD,GAAK,OACpCuC,EAAAlE,EAAAC,cAAC+E,EAAA,EAAD,CACIxD,MAAK,aAoBLC,OAAQ,SAAA7B,GAAI,OAAIsE,EAAAlE,EAAAC,cAACkF,EAADnC,OAAAC,OAAA,CAAerD,KAAMA,GAAU+B,KArBnD/B,KAAAwF,+BC3CWC,EApDE,SAAA1F,GAAc,IAAXG,EAAWH,EAAXG,KACVwF,EAAG,IAAOxF,EAAKyF,KAAZ,IACHC,EAAcC,sBAAkB3F,GAEtC,OACIoE,EAAAlE,EAAAC,cAAC+E,EAAA,EAAD,CAAMC,GAAIK,EAAKhF,UAAU,aACrB4D,EAAAlE,EAAAC,cAAA,UAAQK,UAAU,oBACbR,EAAKS,eACF2D,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,kBAAkB+D,MAAO,CACpCE,gBAAe,OAASzE,EAAKS,cAAd,OAEtBT,EAAK4F,MAAQxB,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,kBAAf,IAAiC4D,EAAAlE,EAAAC,cAAC0F,EAAA,KAAD,CAAM7F,KAAMA,EAAM8F,WAAW,SAASC,UAAU,KAC9F/F,EAAKgG,UAAY5B,EAAAlE,EAAAC,cAAA,wBAClBiE,EAAAlE,EAAAC,cAAA,MAAIK,UAAU,mBAAmBR,EAAKY,QAE1CwD,EAAAlE,EAAAC,cAAA,WAASK,UAAU,qBAAqBR,EAAKiG,SAC7C7B,EAAAlE,EAAAC,cAAA,UAAQK,UAAU,oBACd4D,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,yBACX4D,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,oBACVR,EAAK6D,eAAeC,cACjBM,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,uBAAuBE,IAAKV,EAAK6D,eAAeC,cAAenD,IAAKX,EAAK6D,eAAeqC,OACvG9B,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,iBAAiBE,IAAI,2BAA2BC,IAAKX,EAAK6D,eAAeqC,QAGhG9B,EAAAlE,EAAAC,cAAA,YAAQH,EAAK6D,eAAeqC,OAEhC9B,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,0BACX4D,EAAAlE,EAAAC,cAAA,WAAMuF,OCEXS,EA/BI,SAAAtG,GAAqB,IAAlBuG,EAAkBvG,EAAlBuG,YACVC,EAAmED,EAAnEC,iBAAkBC,EAAiDF,EAAjDE,aAAcC,EAAmCH,EAAnCG,gBAAiBC,EAAkBJ,EAAlBI,cAEzD,OACIpC,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,aAAaiG,KAAK,cAC7BrC,EAAAlE,EAAAC,cAAA,WACKkG,GAEGjC,EAAAlE,EAAAC,cAAC+E,EAAA,EAAD,CAAMC,GAAIkB,EAAkBrB,IAAI,QAAhC,aAMPwB,EAAgB,GAAKpC,EAAAlE,EAAAC,cAAA,OAAKK,UAAU,uBAAf,QAA2C+F,EAA3C,OAAgEC,GACtFpC,EAAAlE,EAAAC,cAAA,WACKmG,GAEGlC,EAAAlE,EAAAC,cAAC+E,EAAA,EAAD,CAAMC,GAAImB,EAActB,IAAI,QAA5B,WCRd0B,UAAa,SAAA7G,GAAA,IAAGC,EAAHD,EAAGC,KAAM+E,EAAThF,EAASgF,SAAT,OACfT,EAAAlE,EAAAC,cAAAiE,EAAAlE,EAAAE,SAAA,KACKN,EAAK6G,IAAI,SAACC,EAASC,GAChB,OAAID,EAAQpB,IAAIsB,MAAM,kBACX1C,EAAAlE,EAAAC,cAAA,KAAGK,UAAWqE,EAAUC,KAAM8B,EAAQpB,IAAKuB,IAAKF,EAAG9B,OAAO,SAASC,IAAI,uBAAuB4B,EAAQI,OAEtG5C,EAAAlE,EAAAC,cAAC+E,EAAA,EAAD,CAAM1E,UAAWqE,EAAUM,GAAIyB,EAAQpB,IAAKuB,IAAKF,GAAID,EAAQI,YAMpFN,EAAWO,aAAe,CACtBpC,SAAQ,iBAaG6B,QCxCf1H,EAAAG,EAAAD,EAAA,sBAAAgI,IAAAlI,EAAAG,EAAAD,EAAA,sBAAAiI,IAAAnI,EAAAG,EAAAD,EAAA,sBAAAkI,IAAApI,EAAAG,EAAAD,EAAA,sBAAAyF,4tDCGa0C,EAAsB,SAACC,GAChC,IAAIC,EAAiB,GAUrB,OARAA,EAAeC,KACXF,EAAcG,QAAUH,EAAcG,QAAU,KAChDH,EAActD,QAAd,uBAA+CsD,EAActD,QAAQC,QAAQ,KAA9B,IAA/C,IAA4F,KAC5FqD,EAAcnD,SAAd,4BAAqDmD,EAAcnD,SAASF,QAAQ,MAA/B,IAArD,IAAoG,MAGxGsD,EAAiBG,IAAEC,QAAQJ,GAEpB,CACHrB,KAAMoB,EAAcpB,MAAQ,KAC5B0B,YAAaL,EAAeM,OAAf,KAA6BH,IAAEI,KAAKP,EAAP,QAA7B,KAAkE,KAC/EQ,MAAOT,EAAcxD,eAAiB,KACtCI,YAAaoD,EAAcnD,SAAd,4BAAqDmD,EAAcnD,SAASF,QAAQ,MAA/B,IAArD,IAAoG,OAIzHoD,EAAoBJ,aAAe,CAC/Be,iBAAiB,GAGrBX,EAAoBY,UAAY,CAC5BX,cAAeW,IAAUC,MAAM,CAC3BhC,KAAM+B,IAAUE,OAAOC,WACvBtE,cAAemE,IAAUE,OACzBV,QAASQ,IAAUE,OACnBnE,QAASiE,IAAUE,OACnBhE,SAAU8D,IAAUE,SACrBC,YAGQf,QCXAgB,EApBG,SAAAxI,GAAe,IAAZkI,EAAYlI,EAAZkI,MACjB,OAAKA,EAKD3D,EAAAlE,EAAAC,cAACkE,EAAAnE,EAAD,KACIkE,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,eAAeoC,QAAQ,wBAClClE,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,gBAAgBoC,QAASP,IACpC3D,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,WAAWD,QAASP,IACnC3D,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,iBAAiBD,QAASrD,IAAO3C,kBAChD8B,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,kBAAkBD,QAASrD,IAAO1C,oBAT9C,eCMTiG,EAAmB,SAAA3I,GAAmC,IAAhCC,EAAgCD,EAAhCC,KAAM2I,EAA0B5I,EAA1B4I,SAAUC,EAAgB7I,EAAhB6I,UAClCzI,EAAYH,EAClB2I,EAAWA,EAASjF,iBAAiBC,MAAM,GAAGC,KAE9C,IAAMiF,EAAStB,EAAoBpH,EAAU4D,gBACvC+E,EAAalB,IAAEf,IAAIkC,eAAW5I,EAAW,CAAE6F,WAAU,SAAYgD,GAAI,SAAAC,GAAG,OAAIA,KAA/D,QACbC,EAAaJ,EAAW,IAAX,GACbK,EAAahJ,EAAUQ,cAAgBR,EAAUQ,cAAgBiH,IAAEwB,IAAIT,EAAN,cAA+B,MAChGU,EAAiBV,EAASW,MAAQnE,IAAOxC,SAAY+C,IAAI6D,QAAQpE,IAAO/C,QAAUuG,EAASW,MAAQnE,IAAOxC,UAAa,KAE7H,OACI2B,EAAAlE,EAAAC,cAAAiE,EAAAlE,EAAAE,SAAA,KACIgE,EAAAlE,EAAAC,cAACkE,EAAAnE,EAAD,KACIkE,EAAAlE,EAAAC,cAAA,aAAQF,EAAUqJ,YAAcrJ,EAAUW,OAC1CwD,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,cAAcoC,QAASrI,EAAUsJ,kBAAoBtJ,EAAUgG,UAC1E7B,EAAAlE,EAAAC,cAAA,QAAM6E,IAAI,YAAYF,KAAM4D,IAE5BtE,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,eAAeD,QAASG,EAAS7H,QAChDwD,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,UAAUD,QAAQ,YACjClE,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,WACXD,QACIrI,EAAUuJ,UACVvJ,EAAUqJ,YACVrJ,EAAUW,QAGlBwD,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,iBACXD,QACIrI,EAAUwJ,gBACVxJ,EAAUgG,SACVhG,EAAUsJ,mBAGlBnF,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,SAASD,QAASI,IACjCtE,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,yBAAyBD,QAASrI,EAAUyJ,eAC3DtF,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,wBAAwBD,QAASrI,EAAU0J,aACzDf,EAAWjC,IAAI,SAACiD,EAAS/C,GAAV,OAAiBzC,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,cAAcD,QAASsB,EAAS7C,IAAKF,MACpF8B,EAAOzE,aAAeE,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,iBAAiBD,QAASK,EAAOzE,cAEvEE,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,gBACPoC,QACIrI,EAAU4J,eACV5J,EAAUqJ,YACVrJ,EAAUW,QAGlBwD,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,sBACPoC,QACIrI,EAAU6J,qBACV7J,EAAUgG,SACVhG,EAAUsJ,mBAGlBnF,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,cAAcoC,QAASI,IAClCtE,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,iBAAiBoC,QAAQ,eACpClE,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,gBAAgBoC,QAASK,EAAOzC,OAC1C8C,GAAc5E,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,iBAAiBoC,QAAQ,gBAClDU,GAAc5E,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,gBAAgBoC,QAASU,IAElDP,EAASzE,SAAWI,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,eAAeoC,QAAO,uBAAyBG,EAASzE,QAAQC,QAAQ,KAAzB,IAAzB,MACrDwE,EAASzE,SAAWI,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,kBAAkBoC,QAASG,EAASzE,UACpEI,EAAAlE,EAAAC,cAAA,UAAQE,KAAK,uBAAb,+PAMuBsI,EAAOzC,KAN9B,oCAOcyC,EAAOZ,MAAQY,EAAOf,YAAP,aAAkCe,EAAOZ,MAAzC,kBAAkEY,EAAOZ,MAAzE,IAAf,IAPd,kCAQcY,EAAOf,YAAP,aAAkCe,EAAOf,YAAzC,IARd,0DAUUgB,EAAWf,OAAX,gBAAoCH,IAAEI,KAAKc,EAAP,MAApC,SAVV,2CAWuB3I,EAAUqJ,YAAcrJ,EAAUW,OAXzD,uCAYkB8H,EAZlB,iDAa4BzI,EAAUyJ,aAbtC,gDAc2BzJ,EAAU0J,WAdrC,gCAeUV,EAAU,gHAEMA,EAFN,iDAGQhE,IAAO3C,gBAHf,kDAIS2C,IAAO1C,iBAJhB,wCAfpB,wIAuBuBkG,EAAS7H,MAvBhC,+IA0B0BuI,EA1B1B,uMA+B0BlJ,EAAUsJ,kBAAoBtJ,EAAUgG,SA/BlE,2IAkCsBhB,IAAO/C,QAlC7B,0EAuCJkC,EAAAlE,EAAAC,cAAC4J,EAAD,CAAWhC,MAAOkB,MAqDfe,EAjBU,SAAAnI,GAAK,OAC1BuC,EAAAlE,EAAAC,cAAC+E,EAAA,EAAD,CACIxD,MAAK,aAWLC,OAAQ,SAAA7B,GAAI,OAAIsE,EAAAlE,EAAAC,cAAC8J,EAAD/G,OAAAC,OAAA,CAAkBsF,SAAU3I,GAAU+B,KAZ1D/B,KAAAoK,cC5IEC,EAAc,SAAAtK,GAAoE,IAAjEC,EAAiED,EAAjEC,KAAM2I,EAA2D5I,EAA3D4I,SAAUC,EAAiD7I,EAAjD6I,UAAW9H,EAAsCf,EAAtCe,MAAO8D,EAA+B7E,EAA/B6E,YAAaqD,EAAkBlI,EAAlBkI,MAAO1H,EAAWR,EAAXQ,KACzEoI,EAAWA,EAASjF,iBAAiBC,MAAM,GAAGC,KAE9C,IAAMyF,EAAgB3D,IAAI6D,QAAQpE,IAAO/C,QAAUuG,EAASW,MAAQnE,IAAOxC,UACvEwG,EAAalB,GAASjI,EAAKW,eAAiBiH,IAAEwB,IAAIT,EAAN,cAA+B,MAO/E,OALAQ,EAAaA,EAAazD,IAAI6D,QAAQpE,IAAO/C,QAAS+G,GAAc,KAEpEvE,EAAcA,GAAe5E,EAAKyJ,kBAAoBzJ,EAAK4E,aAAeO,IAAO5C,qBAAuBoG,EAAS/D,YACjH9D,EAAQA,GAASd,EAAKwJ,YAAcxJ,EAAKoG,MAAQpG,EAAKc,MAGlDwD,EAAAlE,EAAAC,cAAAiE,EAAAlE,EAAAE,SAAA,KACIgE,EAAAlE,EAAAC,cAACkE,EAAAnE,EAAD,KACIkE,EAAAlE,EAAAC,cAAA,aAAQS,GACRwD,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,cAAcoC,QAAS5D,IAClCN,EAAAlE,EAAAC,cAAA,QAAM6E,IAAI,YAAYF,KAAM4D,IAC5BtE,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,eAAeD,QAASG,EAAS7H,QAChDwD,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,UAAUD,QAAQ,YACjClE,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,WAAWD,QAAS1H,IACnCwD,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,iBAAiBD,QAAS5D,IACzCN,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,SAASD,QAASI,IACjCtE,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,gBAAgBoC,QAAS1H,IACpCwD,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,sBAAsBoC,QAAS5D,IAC1CN,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,cAAcoC,QAASI,IACjCD,EAASzE,SAAWI,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,eAAeoC,QAAO,uBAAyBG,EAASzE,QAAQC,QAAQ,KAAzB,IAAzB,MACrDwE,EAASzE,SAAWI,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,kBAAkBoC,QAASG,EAASzE,UACpEI,EAAAlE,EAAAC,cAAA,UAAQE,KAAK,uBAAb,0HAGoBA,EAHpB,uCAIkBqI,EAJlB,gCAKUO,EAAU,gHAEMA,EAFN,iDAGQhE,IAAO3C,gBAHf,kDAIS2C,IAAO1C,iBAJhB,wCALpB,wIAauBkG,EAAS7H,MAbhC,+IAgB0BuI,EAhB1B,kSAuBsBlE,IAAO/C,QAvB7B,0EAyB0BwC,EAzB1B,+CA6BJN,EAAAlE,EAAAC,cAAC4J,EAAD,CAAWhC,MAAOkB,MAwCfmB,EAjBU,SAAAvI,GAAK,OAC1BuC,EAAAlE,EAAAC,cAAC+E,EAAA,EAAD,CACIxD,MAAK,aAWLC,OAAQ,SAAA7B,GAAI,OAAIsE,EAAAlE,EAAAC,cAACkK,EAADnH,OAAAC,OAAA,CAAasF,SAAU3I,GAAU+B,KAZrD/B,KAAAwK,cChFEC,EAAa,SAAA1K,GAAmC,IAAhCC,EAAgCD,EAAhCC,KAAM2I,EAA0B5I,EAA1B4I,SAAUC,EAAgB7I,EAAhB6I,UAClCD,EAAWA,EAASjF,iBAAiBC,MAAM,GAAGC,KAE9C,IAAMiF,EAAStB,EAAoBvH,GAC7BmJ,EAAaN,EAAOZ,OAASL,IAAEwB,IAAIT,EAAN,cAA+B,MAC5D7H,EAAWd,EAAKoG,KAAX,MAAqBuC,EAAS7H,MACnC8D,EAAc5E,EAAK0K,KAAOvF,IAAO5C,qBAAuBoG,EAAS/D,YAEvE,OACIN,EAAAlE,EAAAC,cAAAiE,EAAAlE,EAAAE,SAAA,KACIgE,EAAAlE,EAAAC,cAACkE,EAAAnE,EAAD,KACIkE,EAAAlE,EAAAC,cAAA,aAAQS,GACRwD,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,cAAcoC,QAAS5D,IAClCN,EAAAlE,EAAAC,cAAA,QAAM6E,IAAI,YAAYF,KAAM4D,IAC5BtE,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,eAAeD,QAASG,EAAS7H,QAChDwD,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,UAAUD,QAAQ,YACjClE,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,WAAWD,QAAS1H,IACnCwD,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,iBAAiBD,QAAS5D,IACzCN,EAAAlE,EAAAC,cAAA,QAAMoI,SAAS,SAASD,QAASI,IACjCtE,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,gBAAgBoC,QAAS1H,IACpCwD,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,sBAAsBoC,QAAS5D,IAC1CN,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,cAAcoC,QAASI,IACjCD,EAASzE,SAAWI,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,eAAeoC,QAAO,uBAAyBG,EAASzE,QAAQC,QAAQ,KAAzB,IAAzB,MACrDwE,EAASzE,SAAWI,EAAAlE,EAAAC,cAAA,QAAM+F,KAAK,kBAAkBoC,QAASG,EAASzE,UACpEI,EAAAlE,EAAAC,cAAA,UAAQE,KAAK,uBAAb,qKAImBP,EAAKoG,KAJxB,gCAKUyC,EAAOf,YAAP,aAAkCe,EAAOf,YAAzC,QALV,qCAMkBc,EANlB,gCAOUO,EAAU,gHAEMA,EAFN,iDAGQhE,IAAO3C,gBAHf,kDAIS2C,IAAO1C,iBAJhB,wCAPpB,yIAesB0C,IAAO/C,QAf7B,0EAiB0BwC,EAjB1B,+CAqBJN,EAAAlE,EAAAC,cAAC4J,EAAD,CAAWhC,MAAOkB,MAqCfwB,EAjBS,SAAA5I,GAAK,OACzBuC,EAAAlE,EAAAC,cAAC+E,EAAA,EAAD,CACIxD,MAAK,aAWLC,OAAQ,SAAA7B,GAAI,OAAIsE,EAAAlE,EAAAC,cAACuK,EAADxH,OAAAC,OAAA,CAAYsF,SAAU3I,GAAU+B,KAZpD/B,KAAA6K,KC7DEC,EAAW,SAAA/K,GAOX,IANFC,EAMED,EANFC,KACA2I,EAKE5I,EALF4I,SACA7H,EAIEf,EAJFe,MACA8D,EAGE7E,EAHF6E,YACAqD,EAEElI,EAFFkI,MACAhI,EACEF,EADFE,SAEM2I,EAAYlD,IAAI6D,QAAQpE,IAAO/C,QAASnC,EAAS8K,UAC/C5K,EAAgDH,EAAhDG,UAAW6K,EAAqChL,EAArCgL,SAAUC,EAA2BjL,EAA3BiL,YAAaC,EAAclL,EAAdkL,UAG1C,OAFAvC,EAAWA,EAASjF,iBAAiBC,MAAM,GAAGC,KAE1CzD,EAEImE,EAAAlE,EAAAC,cAAC8K,EAAD,CACInL,KAAMG,EACNyI,UAAWA,IAGZoC,EAEH1G,EAAAlE,EAAAC,cAAC+K,EAAD,CACIpL,KAAMgL,EACNpC,UAAWA,EACXrI,KAAK,WAGN0K,EAEH3G,EAAAlE,EAAAC,cAACgL,EAAD,CACIrL,KAAMiL,EACNrC,UAAWA,IAGZsC,EAEH5G,EAAAlE,EAAAC,cAAC+K,EAAD,CACIpL,KAAMkL,EACNtC,UAAWA,EACXrI,KAAK,aAIbO,EAAQA,GAASqE,IAAO7C,eAAiBqG,EAAS7H,MAClD8D,EAAcA,GAAeO,IAAO5C,qBAAuBoG,EAAS/D,YAGpEqD,GAFAA,EAAQA,GAASU,EAASjE,aAAe,MAEzBgB,IAAI6D,QAAQpE,IAAO/C,QAAS6F,GAAS,KAGjD3D,EAAAlE,EAAAC,cAAC+K,EAAD,CACIpL,KAAM,GACN4I,UAAWA,EACX9H,MAAOA,EACP8D,YAAaA,EACbqD,MAAOA,EACP1H,KAAK,cAMrBuK,EAAS3D,aAAe,CACpBnH,KAAM,IAqBV,IAkBesL,EAlBO,SAAAvJ,GAAK,OACvBuC,EAAAlE,EAAAC,cAAC+E,EAAA,EAAD,CACIxD,MAAK,aAYLC,OAAQ,SAAA7B,GAAI,OAAIsE,EAAAlE,EAAAC,cAACkL,EAADnI,OAAAC,OAAA,CAAUsF,SAAU3I,GAAU+B,KAblD/B,KAAAwL,KCpGJtM,EAAAG,EAAAD,EAAA,sBAAAqM","file":"component---src-templates-post-js-aa7c4ac2c766e815a6ff.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\n\nimport { Layout } from '../components/common'\nimport { MetaData } from '../components/common/meta'\n\n/**\n* Single post view (/:slug)\n*\n* This file renders a single post and loads all the content.\n*\n*/\nconst Post = ({ data, location }) => {\n    const post = data.ghostPost\n\n    return (\n            <>\n                <MetaData\n                    data={data}\n                    location={location}\n                    type=\"article\"\n                />\n                <Helmet>\n                    <style type=\"text/css\">{`${post.codeinjection_styles}`}</style>\n                </Helmet>\n                <Layout bodyClass=\"cp-page-post\">\n                    <div className=\"container\">\n                        <article className=\"content\">\n                            { post.feature_image ?\n                                <figure className=\"post-feature-image\">\n                                    <img src={ post.feature_image } alt={ post.title } />\n                                </figure> : null }\n                            <section className=\"post-full-content\">\n                                <h1 className=\"content-title\">{post.title}</h1>\n\n                                {/* The main post content */ }\n                                <section\n                                    className=\"content-body load-external-scripts\"\n                                    dangerouslySetInnerHTML={{ __html: post.html }}\n                                />\n                            </section>\n                        </article>\n                    </div>\n                </Layout>\n            </>\n    )\n}\n\nPost.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.shape({\n            title: PropTypes.string.isRequired,\n            html: PropTypes.string.isRequired,\n            feature_image: PropTypes.string,\n        }).isRequired,\n    }).isRequired,\n    location: PropTypes.object.isRequired,\n}\n\nexport default Post\n\nexport const postQuery = graphql`\n    query($slug: String!) {\n        ghostPost(slug: { eq: $slug }) {\n            ...GhostPostFields\n        }\n    }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","module.exports = {\n    siteUrl: `https://chrisparton.net`, // Site domain. Do not include a trailing slash!\n\n    postsPerPage: 12, // Number of posts shown on paginated pages (changes this requires sometimes to delete the cache)\n\n    siteTitleMeta: `ChrisParton.net`, // This allows an alternative site title for meta data for pages.\n    siteDescriptionMeta: `The elation and frustration of building software and electronics`, // This allows an alternative site description for meta data for pages.\n\n    shareImageWidth: 1000, // Change to the width of your default share image\n    shareImageHeight: 523, // Change to the height of your default share image\n\n    shortTitle: `ChrisParton`, // Used for App manifest e.g. Mobile Home Screen\n    siteIcon: `favicon.png`, // Logo in /static dir used for SEO, RSS, and App manifest\n    backgroundColor: `#e9e9e9`, // Used for Offline Manifest\n    themeColor: `#15171a`, // Used for Offline Manifest\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { Link, StaticQuery, graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n\nimport { Navigation } from '.'\nimport config from '../../utils/siteConfig'\n\n// Styles\nimport '../../styles/app.css'\nimport '../../styles/blog.css'\n\n/**\n* Main layout component\n*\n* The Layout component wraps around each page and template.\n* It also provides the header, footer as well as the main\n* styles, and meta data for each page.\n*\n*/\nconst DefaultLayout = ({ data, children, bodyClass, isHome }) => {\n    const site = data.allGhostSettings.edges[0].node\n    const profileImageUrl = data.allGhostPost.edges[0].node.primary_author.profile_image\n    const twitterUrl = site.twitter ? `https://twitter.com/${site.twitter.replace(/^@/, ``)}` : null\n    const facebookUrl = site.facebook ? `https://www.facebook.com/${site.facebook.replace(/^\\//, ``)}` : null\n\n    return (\n    <>\n        <Helmet>\n            <html lang={site.lang} />\n            <style type=\"text/css\">{`${site.codeinjection_styles}`}</style>\n            <body className={bodyClass} />\n        </Helmet>\n\n        <div className=\"viewport\">\n\n            <div className=\"viewport-top\">\n                {/* The main header section on top of the screen */}\n                <header className=\"site-head\" style={{ ...site.cover_image && { backgroundImage: `url(${site.cover_image})` } }}>\n                    <div className=\"container\">\n                        <div className=\"site-mast\">\n                        </div>\n                        { isHome ?\n                            <div className=\"site-banner\">\n                                <img className=\"banner-profile-image\" src={profileImageUrl}/>\n                                <h1 className=\"site-banner-title\">{site.title}</h1>\n                                <p className=\"site-banner-desc\">{site.description}</p>\n                            </div> :\n                            null}\n                        <nav className=\"site-nav\">\n                            <div className=\"site-nav-left\">\n                                {/* The navigation items as setup in Ghost */}\n                                <Navigation data={site.navigation} navClass=\"site-nav-item\" />\n                            </div>\n                            <div className=\"site-nav-right\">\n                                { site.twitter && <a href={ twitterUrl } className=\"site-nav-item\" target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"site-nav-icon\" src=\"/images/icons/twitter.svg\" alt=\"Twitter\" /></a>}\n                                { site.facebook && <a href={ facebookUrl } className=\"site-nav-item\" target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"site-nav-icon\" src=\"/images/icons/facebook.svg\" alt=\"Facebook\" /></a>}\n                                <a className=\"site-nav-item\" href={ `https://feedly.com/i/subscription/feed/${config.siteUrl}/rss/` } target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"site-nav-icon\" src=\"/images/icons/rss.svg\" alt=\"RSS Feed\" /></a>\n                            </div>\n                        </nav>\n                    </div>\n                </header>\n\n                <main className=\"site-main\">\n                    {/* All the main content gets inserted here, index.js, post.js */}\n                    {children}\n                </main>\n\n            </div>\n\n            <div className=\"viewport-bottom\">\n                {/* The footer at the very bottom of the screen */}\n                <footer className=\"site-foot\">\n                    <div className=\"site-foot-nav container\">\n                        <div className=\"site-foot-nav-left\">\n                            <Link to=\"/\">{site.title}</Link> © 2019\n                        </div>\n                        <div className=\"site-foot-nav-right\">\n                            <Navigation data={site.navigation} navClass=\"site-foot-nav-item\" />\n                        </div>\n                    </div>\n                </footer>\n\n            </div>\n        </div>\n\n    </>\n    )\n}\n\nDefaultLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n    bodyClass: PropTypes.string,\n    isHome: PropTypes.bool,\n    data: PropTypes.shape({\n        allGhostSettings: PropTypes.object.isRequired,\n    }).isRequired,\n}\n\nconst DefaultLayoutSettingsQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostSettings {\n                allGhostSettings {\n                    edges {\n                        node {\n                            ...GhostSettingsFields\n                        }\n                    }\n                }\n                allGhostPost(limit: 1) {\n                    edges {\n                        node {\n                            primary_author {\n                                profile_image\n                            }\n                        }\n                    }\n                }\n            }\n        `}\n        render={data => <DefaultLayout data={data} {...props} />}\n    />\n)\n\nexport default DefaultLayoutSettingsQuery\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\nimport { Tags } from '@tryghost/helpers-gatsby'\r\nimport { readingTime as readingTimeHelper } from '@tryghost/helpers'\r\n\r\nconst PostCard = ({ post }) => {\r\n    const url = `/${post.slug}/`\r\n    const readingTime = readingTimeHelper(post)\r\n\r\n    return (\r\n        <Link to={url} className=\"post-card\">\r\n            <header className=\"post-card-header\">\r\n                {post.feature_image &&\r\n                    <div className=\"post-card-image\" style={{\r\n                        backgroundImage: `url(${post.feature_image})` ,\r\n                    }}></div>}\r\n                {post.tags && <div className=\"post-card-tags\"> <Tags post={post} visibility=\"public\" autolink={false} /></div>}\r\n                {post.featured && <span>Featured</span>}\r\n                <h2 className=\"post-card-title\">{post.title}</h2>\r\n            </header>\r\n            <section className=\"post-card-excerpt\">{post.excerpt}</section>\r\n            <footer className=\"post-card-footer\">\r\n                <div className=\"post-card-footer-left\">\r\n                    <div className=\"post-card-avatar\">\r\n                        {post.primary_author.profile_image ?\r\n                            <img className=\"author-profile-image\" src={post.primary_author.profile_image} alt={post.primary_author.name}/> :\r\n                            <img className=\"default-avatar\" src=\"/images/icons/avatar.svg\" alt={post.primary_author.name}/>\r\n                        }\r\n                    </div>\r\n                    <span>{ post.primary_author.name }</span>\r\n                </div>\r\n                <div className=\"post-card-footer-right\">\r\n                    <div>{readingTime}</div>\r\n                </div>\r\n            </footer>\r\n        </Link>\r\n    )\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        title: PropTypes.string.isRequired,\r\n        feature_image: PropTypes.string,\r\n        featured: PropTypes.bool,\r\n        tags: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                name: PropTypes.string,\r\n            })\r\n        ),\r\n        excerpt: PropTypes.string.isRequired,\r\n        primary_author: PropTypes.shape({\r\n            name: PropTypes.string.isRequired,\r\n            profile_image: PropTypes.string,\r\n        }).isRequired,\r\n    }).isRequired,\r\n}\r\n\r\nexport default PostCard\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\n\r\nconst Pagination = ({ pageContext }) => {\r\n    const { previousPagePath, nextPagePath, humanPageNumber, numberOfPages } = pageContext\r\n\r\n    return (\r\n        <nav className=\"pagination\" role=\"navigation\">\r\n            <div>\r\n                {previousPagePath && (\r\n\r\n                    <Link to={previousPagePath} rel=\"prev\">\r\n                            Previous\r\n                    </Link>\r\n\r\n                )}\r\n            </div>\r\n            {numberOfPages > 1 && <div className=\"pagination-location\">Page {humanPageNumber} of {numberOfPages}</div>}\r\n            <div>\r\n                {nextPagePath && (\r\n\r\n                    <Link to={nextPagePath} rel=\"next\">\r\n                            Next\r\n                    </Link>\r\n                )}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nPagination.propTypes = {\r\n    pageContext: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default Pagination\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\n\r\n/**\r\n* Navigation component\r\n*\r\n* The Navigation component takes an array of your Ghost\r\n* navigation property that is fetched from the settings.\r\n* It differentiates between absolute (external) and relative link (internal).\r\n* You can pass it a custom class for your own styles, but it will always fallback\r\n* to a `site-nav-item` class.\r\n*\r\n*/\r\nconst Navigation = ({ data, navClass }) => (\r\n    <>\r\n        {data.map((navItem, i) => {\r\n            if (navItem.url.match(/^\\s?http(s?)/gi)) {\r\n                return <a className={navClass} href={navItem.url} key={i} target=\"_blank\" rel=\"noopener noreferrer\">{navItem.label}</a>\r\n            } else {\r\n                return <Link className={navClass} to={navItem.url} key={i}>{navItem.label}</Link>\r\n            }\r\n        })}\r\n    </>\r\n)\r\n\r\nNavigation.defaultProps = {\r\n    navClass: `site-nav-item`,\r\n}\r\n\r\nNavigation.propTypes = {\r\n    data: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            label: PropTypes.string.isRequired,\r\n            url: PropTypes.string.isRequired,\r\n        }).isRequired,\r\n    ).isRequired,\r\n    navClass: PropTypes.string,\r\n}\r\n\r\nexport default Navigation\r\n","export { default as Layout } from './Layout'\r\nexport { default as PostCard } from './PostCard'\r\nexport { default as Pagination } from './Pagination'\r\nexport { default as Navigation } from './Navigation'\r\n","import _ from 'lodash'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const getAuthorProperties = (primaryAuthor) => {\r\n    let authorProfiles = []\r\n\r\n    authorProfiles.push(\r\n        primaryAuthor.website ? primaryAuthor.website : null,\r\n        primaryAuthor.twitter ? `https://twitter.com/${primaryAuthor.twitter.replace(/^@/, ``)}/` : null,\r\n        primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook.replace(/^\\//, ``)}/` : null\r\n    )\r\n\r\n    authorProfiles = _.compact(authorProfiles)\r\n\r\n    return {\r\n        name: primaryAuthor.name || null,\r\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\r\n        image: primaryAuthor.profile_image || null,\r\n        facebookUrl: primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook.replace(/^\\//, ``)}/` : null,\r\n    }\r\n}\r\n\r\ngetAuthorProperties.defaultProps = {\r\n    fetchAuthorData: false,\r\n}\r\n\r\ngetAuthorProperties.PropTypes = {\r\n    primaryAuthor: PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        profile_image: PropTypes.string,\r\n        website: PropTypes.string,\r\n        twitter: PropTypes.string,\r\n        facebook: PropTypes.string,\r\n    }).isRequired,\r\n}\r\n\r\nexport default getAuthorProperties\r\n","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport PropTypes from 'prop-types'\r\nimport config from '../../../utils/siteConfig'\r\n\r\nconst ImageMeta = ({ image }) => {\r\n    if (!image) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <Helmet>\r\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n            <meta name=\"twitter:image\" content={image} />\r\n            <meta property=\"og:image\" content={image} />\r\n            <meta property=\"og:image:width\" content={config.shareImageWidth} />\r\n            <meta property=\"og:image:height\" content={config.shareImageHeight} />\r\n        </Helmet >\r\n    )\r\n}\r\n\r\nImageMeta.propTypes = {\r\n    image: PropTypes.string,\r\n}\r\n\r\nexport default ImageMeta\r\n","import React from 'react'\r\nimport Helmet from \"react-helmet\"\r\nimport { StaticQuery, graphql } from 'gatsby'\r\nimport PropTypes from 'prop-types'\r\nimport _ from 'lodash'\r\nimport url from 'url'\r\n\r\nimport getAuthorProperties from './getAuthorProperties'\r\nimport ImageMeta from './ImageMeta'\r\nimport config from '../../../utils/siteConfig'\r\n\r\nimport { tags as tagsHelper } from '@tryghost/helpers'\r\n\r\nconst ArticleMetaGhost = ({ data, settings, canonical }) => {\r\n    const ghostPost = data\r\n    settings = settings.allGhostSettings.edges[0].node\r\n\r\n    const author = getAuthorProperties(ghostPost.primary_author)\r\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\r\n    const primaryTag = publicTags[0] || ``\r\n    const shareImage = ghostPost.feature_image ? ghostPost.feature_image : _.get(settings, `cover_image`, null)\r\n    const publisherLogo = (settings.logo || config.siteIcon) ? url.resolve(config.siteUrl, (settings.logo || config.siteIcon)) : null\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>{ghostPost.meta_title || ghostPost.title}</title>\r\n                <meta name=\"description\" content={ghostPost.meta_description || ghostPost.excerpt} />\r\n                <link rel=\"canonical\" href={canonical} />\r\n\r\n                <meta property=\"og:site_name\" content={settings.title} />\r\n                <meta property=\"og:type\" content=\"article\" />\r\n                <meta property=\"og:title\"\r\n                    content={\r\n                        ghostPost.og_title ||\r\n                        ghostPost.meta_title ||\r\n                        ghostPost.title\r\n                    }\r\n                />\r\n                <meta property=\"og:description\"\r\n                    content={\r\n                        ghostPost.og_description ||\r\n                        ghostPost.excerpt ||\r\n                        ghostPost.meta_description\r\n                    }\r\n                />\r\n                <meta property=\"og:url\" content={canonical} />\r\n                <meta property=\"article:published_time\" content={ghostPost.published_at} />\r\n                <meta property=\"article:modified_time\" content={ghostPost.updated_at} />\r\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\r\n                {author.facebookUrl && <meta property=\"article:author\" content={author.facebookUrl} />}\r\n\r\n                <meta name=\"twitter:title\"\r\n                    content={\r\n                        ghostPost.twitter_title ||\r\n                        ghostPost.meta_title ||\r\n                        ghostPost.title\r\n                    }\r\n                />\r\n                <meta name=\"twitter:description\"\r\n                    content={\r\n                        ghostPost.twitter_description ||\r\n                        ghostPost.excerpt ||\r\n                        ghostPost.meta_description\r\n                    }\r\n                />\r\n                <meta name=\"twitter:url\" content={canonical} />\r\n                <meta name=\"twitter:label1\" content=\"Written by\" />\r\n                <meta name=\"twitter:data1\" content={author.name} />\r\n                {primaryTag && <meta name=\"twitter:label2\" content=\"Filed under\" />}\r\n                {primaryTag && <meta name=\"twitter:data2\" content={primaryTag} />}\r\n\r\n                {settings.twitter && <meta name=\"twitter:site\" content={`https://twitter.com/${settings.twitter.replace(/^@/, ``)}/`} />}\r\n                {settings.twitter && <meta name=\"twitter:creator\" content={settings.twitter} />}\r\n                <script type=\"application/ld+json\">{`\r\n                    {\r\n                        \"@context\": \"https://schema.org/\",\r\n                        \"@type\": \"Article\",\r\n                        \"author\": {\r\n                            \"@type\": \"Person\",\r\n                            \"name\": \"${author.name}\",\r\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\r\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\r\n                        },\r\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\r\n                        \"headline\": \"${ghostPost.meta_title || ghostPost.title}\",\r\n                        \"url\": \"${canonical}\",\r\n                        \"datePublished\": \"${ghostPost.published_at}\",\r\n                        \"dateModified\": \"${ghostPost.updated_at}\",\r\n                        ${shareImage ? `\"image\": {\r\n                                \"@type\": \"ImageObject\",\r\n                                \"url\": \"${shareImage}\",\r\n                                \"width\": \"${config.shareImageWidth}\",\r\n                                \"height\": \"${config.shareImageHeight}\"\r\n                            },` : ``}\r\n                        \"publisher\": {\r\n                            \"@type\": \"Organization\",\r\n                            \"name\": \"${settings.title}\",\r\n                            \"logo\": {\r\n                                \"@type\": \"ImageObject\",\r\n                                \"url\": \"${publisherLogo}\",\r\n                                \"width\": 60,\r\n                                \"height\": 60\r\n                            }\r\n                        },\r\n                        \"description\": \"${ghostPost.meta_description || ghostPost.excerpt}\",\r\n                        \"mainEntityOfPage\": {\r\n                            \"@type\": \"WebPage\",\r\n                            \"@id\": \"${config.siteUrl}\"\r\n                        }\r\n                    }\r\n                `}</script>\r\n            </Helmet>\r\n            <ImageMeta image={shareImage} />\r\n        </>\r\n    )\r\n}\r\n\r\nArticleMetaGhost.propTypes = {\r\n    data: PropTypes.shape({\r\n        title: PropTypes.string.isRequired,\r\n        published_at: PropTypes.string.isRequired,\r\n        updated_at: PropTypes.string.isRequired,\r\n        meta_title: PropTypes.string,\r\n        meta_description: PropTypes.string,\r\n        primary_author: PropTypes.object.isRequired,\r\n        feature_image: PropTypes.string,\r\n        tags: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                name: PropTypes.string,\r\n                slug: PropTypes.string,\r\n                visibility: PropTypes.string,\r\n            })\r\n        ),\r\n        primaryTag: PropTypes.shape({\r\n            name: PropTypes.string,\r\n        }),\r\n        og_title: PropTypes.string,\r\n        og_description: PropTypes.string,\r\n        twitter_title: PropTypes.string,\r\n        twitter_description: PropTypes.string,\r\n        excerpt: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n    settings: PropTypes.shape({\r\n        allGhostSettings: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    canonical: PropTypes.string.isRequired,\r\n}\r\n\r\nconst ArticleMetaQuery = props => (\r\n    <StaticQuery\r\n        query={graphql`\r\n            query GhostSettingsArticleMeta {\r\n                allGhostSettings {\r\n                    edges {\r\n                        node {\r\n                            ...GhostSettingsFields\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `}\r\n        render={data => <ArticleMetaGhost settings={data} {...props} />}\r\n    />\r\n)\r\n\r\nexport default ArticleMetaQuery\r\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { StaticQuery, graphql } from 'gatsby'\nimport url from 'url'\n\nimport ImageMeta from './ImageMeta'\nimport config from '../../../utils/siteConfig'\n\nconst WebsiteMeta = ({ data, settings, canonical, title, description, image, type }) => {\n    settings = settings.allGhostSettings.edges[0].node\n\n    const publisherLogo = url.resolve(config.siteUrl, (settings.logo || config.siteIcon))\n    let shareImage = image || data.feature_image || _.get(settings, `cover_image`, null)\n\n    shareImage = shareImage ? url.resolve(config.siteUrl, shareImage) : null\n\n    description = description || data.meta_description || data.description || config.siteDescriptionMeta || settings.description\n    title = title || data.meta_title || data.name || data.title\n\n    return (\n        <>\n            <Helmet>\n                <title>{title}</title>\n                <meta name=\"description\" content={description} />\n                <link rel=\"canonical\" href={canonical} />\n                <meta property=\"og:site_name\" content={settings.title} />\n                <meta property=\"og:type\" content=\"website\" />\n                <meta property=\"og:title\" content={title} />\n                <meta property=\"og:description\" content={description} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta name=\"twitter:title\" content={title} />\n                <meta name=\"twitter:description\" content={description} />\n                <meta name=\"twitter:url\" content={canonical} />\n                {settings.twitter && <meta name=\"twitter:site\" content={`https://twitter.com/${settings.twitter.replace(/^@/, ``)}/`} />}\n                {settings.twitter && <meta name=\"twitter:creator\" content={settings.twitter} />}\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"${type}\",\n                        \"url\": \"${canonical}\",\n                        ${shareImage ? `\"image\": {\n                                \"@type\": \"ImageObject\",\n                                \"url\": \"${shareImage}\",\n                                \"width\": \"${config.shareImageWidth}\",\n                                \"height\": \"${config.shareImageHeight}\"\n                            },` : ``}\n                        \"publisher\": {\n                            \"@type\": \"Organization\",\n                            \"name\": \"${settings.title}\",\n                            \"logo\": {\n                                \"@type\": \"ImageObject\",\n                                \"url\": \"${publisherLogo}\",\n                                \"width\": 60,\n                                \"height\": 60\n                            }\n                        },\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${config.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={shareImage} />\n        </>\n    )\n}\n\nWebsiteMeta.propTypes = {\n    data: PropTypes.shape({\n        title: PropTypes.string,\n        feature_image: PropTypes.string,\n        description: PropTypes.string,\n        bio: PropTypes.string,\n        profile_image: PropTypes.string,\n    }).isRequired,\n    settings: PropTypes.shape({\n        allGhostSettings: PropTypes.object.isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n    type: PropTypes.oneOf([`WebSite`, `Series`]).isRequired,\n}\n\nconst WebsiteMetaQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostSettingsWebsiteMeta {\n                allGhostSettings {\n                    edges {\n                        node {\n                            ...GhostSettingsFields\n                        }\n                    }\n                }\n            }\n        `}\n        render={data => <WebsiteMeta settings={data} {...props} />}\n    />\n)\n\nexport default WebsiteMetaQuery\n","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport PropTypes from 'prop-types'\r\nimport _ from 'lodash'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport ImageMeta from './ImageMeta'\r\nimport getAuthorProperties from './getAuthorProperties'\r\nimport config from '../../../utils/siteConfig'\r\n\r\nconst AuthorMeta = ({ data, settings, canonical }) => {\r\n    settings = settings.allGhostSettings.edges[0].node\r\n\r\n    const author = getAuthorProperties(data)\r\n    const shareImage = author.image || _.get(settings, `cover_image`, null)\r\n    const title = `${data.name} - ${settings.title}`\r\n    const description = data.bio || config.siteDescriptionMeta || settings.description\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>{title}</title>\r\n                <meta name=\"description\" content={description} />\r\n                <link rel=\"canonical\" href={canonical} />\r\n                <meta property=\"og:site_name\" content={settings.title} />\r\n                <meta property=\"og:type\" content=\"profile\" />\r\n                <meta property=\"og:title\" content={title} />\r\n                <meta property=\"og:description\" content={description} />\r\n                <meta property=\"og:url\" content={canonical} />\r\n                <meta name=\"twitter:title\" content={title} />\r\n                <meta name=\"twitter:description\" content={description} />\r\n                <meta name=\"twitter:url\" content={canonical} />\r\n                {settings.twitter && <meta name=\"twitter:site\" content={`https://twitter.com/${settings.twitter.replace(/^@/, ``)}/`} />}\r\n                {settings.twitter && <meta name=\"twitter:creator\" content={settings.twitter} />}\r\n                <script type=\"application/ld+json\">{`\r\n                    {\r\n                        \"@context\": \"https://schema.org/\",\r\n                        \"@type\": \"Person\",\r\n                        \"name\": \"${data.name}\",\r\n                        ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray},` : ``}\r\n                        \"url\": \"${canonical}\",\r\n                        ${shareImage ? `\"image\": {\r\n                                \"@type\": \"ImageObject\",\r\n                                \"url\": \"${shareImage}\",\r\n                                \"width\": \"${config.shareImageWidth}\",\r\n                                \"height\": \"${config.shareImageHeight}\"\r\n                            },` : ``}\r\n                        \"mainEntityOfPage\": {\r\n                            \"@type\": \"WebPage\",\r\n                            \"@id\": \"${config.siteUrl}\"\r\n                        },\r\n                        \"description\": \"${description}\"\r\n                    }\r\n                `}</script>\r\n            </Helmet>\r\n            <ImageMeta image={shareImage} />\r\n        </>\r\n    )\r\n}\r\n\r\nAuthorMeta.propTypes = {\r\n    data: PropTypes.shape({\r\n        name: PropTypes.string,\r\n        bio: PropTypes.string,\r\n        profile_image: PropTypes.string,\r\n        website: PropTypes.string,\r\n        twitter: PropTypes.string,\r\n        facebook: PropTypes.string,\r\n    }).isRequired,\r\n    settings: PropTypes.shape({\r\n        allGhostSettings: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    canonical: PropTypes.string.isRequired,\r\n}\r\n\r\nconst AuthorMetaQuery = props => (\r\n    <StaticQuery\r\n        query={graphql`\r\n            query GhostSettingsAuthorMeta {\r\n                allGhostSettings {\r\n                    edges {\r\n                        node {\r\n                            ...GhostSettingsFields\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `}\r\n        render={data => <AuthorMeta settings={data} {...props} />}\r\n    />\r\n)\r\n\r\nexport default AuthorMetaQuery\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport url from 'url'\n\nimport config from '../../../utils/siteConfig'\nimport ArticleMeta from './ArticleMeta'\nimport WebsiteMeta from './WebsiteMeta'\nimport AuthorMeta from './AuthorMeta'\n\n/**\n* MetaData will generate all relevant meta data information incl.\n* JSON-LD (schema.org), Open Graph (Facebook) and Twitter properties.\n*\n*/\nconst MetaData = ({\n    data,\n    settings,\n    title,\n    description,\n    image,\n    location,\n}) => {\n    const canonical = url.resolve(config.siteUrl, location.pathname)\n    const { ghostPost, ghostTag, ghostAuthor, ghostPage } = data\n    settings = settings.allGhostSettings.edges[0].node\n\n    if (ghostPost) {\n        return (\n            <ArticleMeta\n                data={ghostPost}\n                canonical={canonical}\n            />\n        )\n    } else if (ghostTag) {\n        return (\n            <WebsiteMeta\n                data={ghostTag}\n                canonical={canonical}\n                type=\"Series\"\n            />\n        )\n    } else if (ghostAuthor) {\n        return (\n            <AuthorMeta\n                data={ghostAuthor}\n                canonical={canonical}\n            />\n        )\n    } else if (ghostPage) {\n        return (\n            <WebsiteMeta\n                data={ghostPage}\n                canonical={canonical}\n                type=\"WebSite\"\n            />\n        )\n    } else {\n        title = title || config.siteTitleMeta || settings.title\n        description = description || config.siteDescriptionMeta || settings.description\n        image = image || settings.cover_image || null\n\n        image = image ? url.resolve(config.siteUrl, image) : null\n\n        return (\n            <WebsiteMeta\n                data={{}}\n                canonical={canonical}\n                title={title}\n                description={description}\n                image={image}\n                type=\"WebSite\"\n            />\n        )\n    }\n}\n\nMetaData.defaultProps = {\n    data: {},\n}\n\nMetaData.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.object,\n        ghostTag: PropTypes.object,\n        ghostAuthor: PropTypes.object,\n        ghostPage: PropTypes.object,\n    }).isRequired,\n    settings: PropTypes.shape({\n        allGhostSettings: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n}\n\nconst MetaDataQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostSettingsMetaData {\n                allGhostSettings {\n                    edges {\n                        node {\n                            title\n                            description\n                        }\n                    }\n                }\n            }\n        `}\n        render={data => <MetaData settings={data} {...props} />}\n    />\n)\n\nexport default MetaDataQuery\n","export { default as MetaData } from './MetaData'\r\n"],"sourceRoot":""}