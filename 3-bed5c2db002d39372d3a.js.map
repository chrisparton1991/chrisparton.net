{"version":3,"sources":["webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/utils/siteConfig.js","webpack:///./src/components/common/Layout.js","webpack:///./src/components/common/PostCard.js","webpack:///./src/components/common/Pagination.js","webpack:///./src/components/common/Navigation.js","webpack:///./src/components/common/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMeta.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/AuthorMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/index.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","a","loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","_ref","staticQueryData","data","query","render","finalData","createElement","Fragment","props","children","Consumer","module","exports","siteUrl","postsPerPage","siteTitleMeta","siteDescriptionMeta","shareImageWidth","shareImageHeight","shortTitle","siteIcon","backgroundColor","themeColor","DefaultLayout","bodyClass","isHome","site","allGhostSettings","edges","node","profileImageUrl","allGhostPost","primary_author","profile_image","twitterUrl","twitter","replace","facebookUrl","facebook","react_default","Helmet_default","lang","type","codeinjection_styles","className","style","Object","assign","cover_image","backgroundImage","src","title","description","common_Navigation","navigation","navClass","href","target","rel","alt","config","gatsby_browser_entry","to","DefaultLayoutSettingsQuery","Layout_DefaultLayout","_1281977687","PostCard","post","url","slug","readingTime","readingTimeHelper","feature_image","tags","lib","visibility","autolink","featured","excerpt","name","Pagination","pageContext","previousPagePath","nextPagePath","humanPageNumber","numberOfPages","role","Navigation","map","navItem","i","match","key","label","defaultProps","Layout","common_PostCard","common_Pagination","m","require","default","getAuthorProperties","primaryAuthor","authorProfiles","push","website","_","compact","sameAsArray","length","join","image","fetchAuthorData","PropTypes","shape","string","isRequired","ImageMeta","content","property","ArticleMetaGhost","settings","canonical","ghostPost","author","publicTags","tagsHelper","fn","tag","primaryTag","shareImage","get","publisherLogo","logo","resolve","meta_title","meta_description","og_title","og_description","published_at","updated_at","keyword","twitter_title","twitter_description","meta_ImageMeta","ArticleMetaQuery","ArticleMeta_ArticleMetaGhost","_1004981455","WebsiteMeta","WebsiteMetaQuery","WebsiteMeta_WebsiteMeta","_3093436507","AuthorMeta","bio","AuthorMetaQuery","AuthorMeta_AuthorMeta","_4112685740","MetaData","location","pathname","ghostTag","ghostAuthor","ghostPage","ArticleMeta","meta_WebsiteMeta","meta_AuthorMeta","MetaDataQuery","MetaData_MetaData","_2233248733","meta_MetaData","ProdPageRenderer","pageResources","InternalPageRenderer","json"],"mappings":"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","file":"3-bed5c2db002d39372d3a.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","module.exports = {\n    siteUrl: `https://chrisparton.net`, // Site domain. Do not include a trailing slash!\n\n    postsPerPage: 12, // Number of posts shown on paginated pages (changes this requires sometimes to delete the cache)\n\n    siteTitleMeta: `ChrisParton.net`, // This allows an alternative site title for meta data for pages.\n    siteDescriptionMeta: `The elation and frustration of building software and electronics`, // This allows an alternative site description for meta data for pages.\n\n    shareImageWidth: 1000, // Change to the width of your default share image\n    shareImageHeight: 523, // Change to the height of your default share image\n\n    shortTitle: `ChrisParton`, // Used for App manifest e.g. Mobile Home Screen\n    siteIcon: `favicon.png`, // Logo in /static dir used for SEO, RSS, and App manifest\n    backgroundColor: `#e9e9e9`, // Used for Offline Manifest\n    themeColor: `#15171a`, // Used for Offline Manifest\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { Link, StaticQuery, graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n\nimport { Navigation } from '.'\nimport config from '../../utils/siteConfig'\n\n// Styles\nimport '../../styles/app.css'\nimport '../../styles/blog.css'\n\n/**\n* Main layout component\n*\n* The Layout component wraps around each page and template.\n* It also provides the header, footer as well as the main\n* styles, and meta data for each page.\n*\n*/\nconst DefaultLayout = ({ data, children, bodyClass, isHome }) => {\n    const site = data.allGhostSettings.edges[0].node\n    const profileImageUrl = data.allGhostPost.edges[0].node.primary_author.profile_image\n    const twitterUrl = site.twitter ? `https://twitter.com/${site.twitter.replace(/^@/, ``)}` : null\n    const facebookUrl = site.facebook ? `https://www.facebook.com/${site.facebook.replace(/^\\//, ``)}` : null\n\n    return (\n    <>\n        <Helmet>\n            <html lang={site.lang} />\n            <style type=\"text/css\">{`${site.codeinjection_styles}`}</style>\n            <body className={bodyClass} />\n        </Helmet>\n\n        <div className=\"viewport\">\n\n            <div className=\"viewport-top\">\n                {/* The main header section on top of the screen */}\n                <header className=\"site-head\" style={{ ...site.cover_image && { backgroundImage: `url(${site.cover_image})` } }}>\n                    <div className=\"container\">\n                        <div className=\"site-mast\">\n                        </div>\n                        { isHome ?\n                            <div className=\"site-banner\">\n                                <img className=\"banner-profile-image\" src={profileImageUrl}/>\n                                <h1 className=\"site-banner-title\">{site.title}</h1>\n                                <p className=\"site-banner-desc\">{site.description}</p>\n                            </div> :\n                            null}\n                        <nav className=\"site-nav\">\n                            <div className=\"site-nav-left\">\n                                {/* The navigation items as setup in Ghost */}\n                                <Navigation data={site.navigation} navClass=\"site-nav-item\" />\n                            </div>\n                            <div className=\"site-nav-right\">\n                                { site.twitter && <a href={ twitterUrl } className=\"site-nav-item\" target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"site-nav-icon\" src=\"/images/icons/twitter.svg\" alt=\"Twitter\" /></a>}\n                                { site.facebook && <a href={ facebookUrl } className=\"site-nav-item\" target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"site-nav-icon\" src=\"/images/icons/facebook.svg\" alt=\"Facebook\" /></a>}\n                                <a className=\"site-nav-item\" href={ `https://feedly.com/i/subscription/feed/${config.siteUrl}/rss/` } target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"site-nav-icon\" src=\"/images/icons/rss.svg\" alt=\"RSS Feed\" /></a>\n                            </div>\n                        </nav>\n                    </div>\n                </header>\n\n                <main className=\"site-main\">\n                    {/* All the main content gets inserted here, index.js, post.js */}\n                    {children}\n                </main>\n\n            </div>\n\n            <div className=\"viewport-bottom\">\n                {/* The footer at the very bottom of the screen */}\n                <footer className=\"site-foot\">\n                    <div className=\"site-foot-nav container\">\n                        <div className=\"site-foot-nav-left\">\n                            <Link to=\"/\">{site.title}</Link> © 2019 &mdash; Published with <a className=\"site-foot-nav-item\" href=\"https://ghost.org\" target=\"_blank\" rel=\"noopener noreferrer\">Ghost</a>\n                        </div>\n                        <div className=\"site-foot-nav-right\">\n                            <Navigation data={site.navigation} navClass=\"site-foot-nav-item\" />\n                        </div>\n                    </div>\n                </footer>\n\n            </div>\n        </div>\n\n    </>\n    )\n}\n\nDefaultLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n    bodyClass: PropTypes.string,\n    isHome: PropTypes.bool,\n    data: PropTypes.shape({\n        allGhostSettings: PropTypes.object.isRequired,\n    }).isRequired,\n}\n\nconst DefaultLayoutSettingsQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostSettings {\n                allGhostSettings {\n                    edges {\n                        node {\n                            ...GhostSettingsFields\n                        }\n                    }\n                }\n                allGhostPost(limit: 1) {\n                    edges {\n                        node {\n                            primary_author {\n                                profile_image\n                            }\n                        }\n                    }\n                }\n            }\n        `}\n        render={data => <DefaultLayout data={data} {...props} />}\n    />\n)\n\nexport default DefaultLayoutSettingsQuery\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\nimport { Tags } from '@tryghost/helpers-gatsby'\r\nimport { readingTime as readingTimeHelper } from '@tryghost/helpers'\r\n\r\nconst PostCard = ({ post }) => {\r\n    const url = `/${post.slug}/`\r\n    const readingTime = readingTimeHelper(post)\r\n\r\n    return (\r\n        <Link to={url} className=\"post-card\">\r\n            <header className=\"post-card-header\">\r\n                {post.feature_image &&\r\n                    <div className=\"post-card-image\" style={{\r\n                        backgroundImage: `url(${post.feature_image})` ,\r\n                    }}></div>}\r\n                {post.tags && <div className=\"post-card-tags\"> <Tags post={post} visibility=\"public\" autolink={false} /></div>}\r\n                {post.featured && <span>Featured</span>}\r\n                <h2 className=\"post-card-title\">{post.title}</h2>\r\n            </header>\r\n            <section className=\"post-card-excerpt\">{post.excerpt}</section>\r\n            <footer className=\"post-card-footer\">\r\n                <div className=\"post-card-footer-left\">\r\n                    <div className=\"post-card-avatar\">\r\n                        {post.primary_author.profile_image ?\r\n                            <img className=\"author-profile-image\" src={post.primary_author.profile_image} alt={post.primary_author.name}/> :\r\n                            <img className=\"default-avatar\" src=\"/images/icons/avatar.svg\" alt={post.primary_author.name}/>\r\n                        }\r\n                    </div>\r\n                    <span>{ post.primary_author.name }</span>\r\n                </div>\r\n                <div className=\"post-card-footer-right\">\r\n                    <div>{readingTime}</div>\r\n                </div>\r\n            </footer>\r\n        </Link>\r\n    )\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        title: PropTypes.string.isRequired,\r\n        feature_image: PropTypes.string,\r\n        featured: PropTypes.bool,\r\n        tags: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                name: PropTypes.string,\r\n            })\r\n        ),\r\n        excerpt: PropTypes.string.isRequired,\r\n        primary_author: PropTypes.shape({\r\n            name: PropTypes.string.isRequired,\r\n            profile_image: PropTypes.string,\r\n        }).isRequired,\r\n    }).isRequired,\r\n}\r\n\r\nexport default PostCard\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\n\r\nconst Pagination = ({ pageContext }) => {\r\n    const { previousPagePath, nextPagePath, humanPageNumber, numberOfPages } = pageContext\r\n\r\n    return (\r\n        <nav className=\"pagination\" role=\"navigation\">\r\n            <div>\r\n                {previousPagePath && (\r\n\r\n                    <Link to={previousPagePath} rel=\"prev\">\r\n                            Previous\r\n                    </Link>\r\n\r\n                )}\r\n            </div>\r\n            {numberOfPages > 1 && <div className=\"pagination-location\">Page {humanPageNumber} of {numberOfPages}</div>}\r\n            <div>\r\n                {nextPagePath && (\r\n\r\n                    <Link to={nextPagePath} rel=\"next\">\r\n                            Next\r\n                    </Link>\r\n                )}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nPagination.propTypes = {\r\n    pageContext: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default Pagination\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\n\r\n/**\r\n* Navigation component\r\n*\r\n* The Navigation component takes an array of your Ghost\r\n* navigation property that is fetched from the settings.\r\n* It differentiates between absolute (external) and relative link (internal).\r\n* You can pass it a custom class for your own styles, but it will always fallback\r\n* to a `site-nav-item` class.\r\n*\r\n*/\r\nconst Navigation = ({ data, navClass }) => (\r\n    <>\r\n        {data.map((navItem, i) => {\r\n            if (navItem.url.match(/^\\s?http(s?)/gi)) {\r\n                return <a className={navClass} href={navItem.url} key={i} target=\"_blank\" rel=\"noopener noreferrer\">{navItem.label}</a>\r\n            } else {\r\n                return <Link className={navClass} to={navItem.url} key={i}>{navItem.label}</Link>\r\n            }\r\n        })}\r\n    </>\r\n)\r\n\r\nNavigation.defaultProps = {\r\n    navClass: `site-nav-item`,\r\n}\r\n\r\nNavigation.propTypes = {\r\n    data: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            label: PropTypes.string.isRequired,\r\n            url: PropTypes.string.isRequired,\r\n        }).isRequired,\r\n    ).isRequired,\r\n    navClass: PropTypes.string,\r\n}\r\n\r\nexport default Navigation\r\n","export { default as Layout } from './Layout'\r\nexport { default as PostCard } from './PostCard'\r\nexport { default as Pagination } from './Pagination'\r\nexport { default as Navigation } from './Navigation'\r\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import _ from 'lodash'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const getAuthorProperties = (primaryAuthor) => {\r\n    let authorProfiles = []\r\n\r\n    authorProfiles.push(\r\n        primaryAuthor.website ? primaryAuthor.website : null,\r\n        primaryAuthor.twitter ? `https://twitter.com/${primaryAuthor.twitter.replace(/^@/, ``)}/` : null,\r\n        primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook.replace(/^\\//, ``)}/` : null\r\n    )\r\n\r\n    authorProfiles = _.compact(authorProfiles)\r\n\r\n    return {\r\n        name: primaryAuthor.name || null,\r\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\r\n        image: primaryAuthor.profile_image || null,\r\n        facebookUrl: primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook.replace(/^\\//, ``)}/` : null,\r\n    }\r\n}\r\n\r\ngetAuthorProperties.defaultProps = {\r\n    fetchAuthorData: false,\r\n}\r\n\r\ngetAuthorProperties.PropTypes = {\r\n    primaryAuthor: PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        profile_image: PropTypes.string,\r\n        website: PropTypes.string,\r\n        twitter: PropTypes.string,\r\n        facebook: PropTypes.string,\r\n    }).isRequired,\r\n}\r\n\r\nexport default getAuthorProperties\r\n","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport PropTypes from 'prop-types'\r\nimport config from '../../../utils/siteConfig'\r\n\r\nconst ImageMeta = ({ image }) => {\r\n    if (!image) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <Helmet>\r\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n            <meta name=\"twitter:image\" content={image} />\r\n            <meta property=\"og:image\" content={image} />\r\n            <meta property=\"og:image:width\" content={config.shareImageWidth} />\r\n            <meta property=\"og:image:height\" content={config.shareImageHeight} />\r\n        </Helmet >\r\n    )\r\n}\r\n\r\nImageMeta.propTypes = {\r\n    image: PropTypes.string,\r\n}\r\n\r\nexport default ImageMeta\r\n","import React from 'react'\r\nimport Helmet from \"react-helmet\"\r\nimport { StaticQuery, graphql } from 'gatsby'\r\nimport PropTypes from 'prop-types'\r\nimport _ from 'lodash'\r\nimport url from 'url'\r\n\r\nimport getAuthorProperties from './getAuthorProperties'\r\nimport ImageMeta from './ImageMeta'\r\nimport config from '../../../utils/siteConfig'\r\n\r\nimport { tags as tagsHelper } from '@tryghost/helpers'\r\n\r\nconst ArticleMetaGhost = ({ data, settings, canonical }) => {\r\n    const ghostPost = data\r\n    settings = settings.allGhostSettings.edges[0].node\r\n\r\n    const author = getAuthorProperties(ghostPost.primary_author)\r\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\r\n    const primaryTag = publicTags[0] || ``\r\n    const shareImage = ghostPost.feature_image ? ghostPost.feature_image : _.get(settings, `cover_image`, null)\r\n    const publisherLogo = (settings.logo || config.siteIcon) ? url.resolve(config.siteUrl, (settings.logo || config.siteIcon)) : null\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>{ghostPost.meta_title || ghostPost.title}</title>\r\n                <meta name=\"description\" content={ghostPost.meta_description || ghostPost.excerpt} />\r\n                <link rel=\"canonical\" href={canonical} />\r\n\r\n                <meta property=\"og:site_name\" content={settings.title} />\r\n                <meta property=\"og:type\" content=\"article\" />\r\n                <meta property=\"og:title\"\r\n                    content={\r\n                        ghostPost.og_title ||\r\n                        ghostPost.meta_title ||\r\n                        ghostPost.title\r\n                    }\r\n                />\r\n                <meta property=\"og:description\"\r\n                    content={\r\n                        ghostPost.og_description ||\r\n                        ghostPost.excerpt ||\r\n                        ghostPost.meta_description\r\n                    }\r\n                />\r\n                <meta property=\"og:url\" content={canonical} />\r\n                <meta property=\"article:published_time\" content={ghostPost.published_at} />\r\n                <meta property=\"article:modified_time\" content={ghostPost.updated_at} />\r\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\r\n                {author.facebookUrl && <meta property=\"article:author\" content={author.facebookUrl} />}\r\n\r\n                <meta name=\"twitter:title\"\r\n                    content={\r\n                        ghostPost.twitter_title ||\r\n                        ghostPost.meta_title ||\r\n                        ghostPost.title\r\n                    }\r\n                />\r\n                <meta name=\"twitter:description\"\r\n                    content={\r\n                        ghostPost.twitter_description ||\r\n                        ghostPost.excerpt ||\r\n                        ghostPost.meta_description\r\n                    }\r\n                />\r\n                <meta name=\"twitter:url\" content={canonical} />\r\n                <meta name=\"twitter:label1\" content=\"Written by\" />\r\n                <meta name=\"twitter:data1\" content={author.name} />\r\n                {primaryTag && <meta name=\"twitter:label2\" content=\"Filed under\" />}\r\n                {primaryTag && <meta name=\"twitter:data2\" content={primaryTag} />}\r\n\r\n                {settings.twitter && <meta name=\"twitter:site\" content={`https://twitter.com/${settings.twitter.replace(/^@/, ``)}/`} />}\r\n                {settings.twitter && <meta name=\"twitter:creator\" content={settings.twitter} />}\r\n                <script type=\"application/ld+json\">{`\r\n                    {\r\n                        \"@context\": \"https://schema.org/\",\r\n                        \"@type\": \"Article\",\r\n                        \"author\": {\r\n                            \"@type\": \"Person\",\r\n                            \"name\": \"${author.name}\",\r\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\r\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\r\n                        },\r\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\r\n                        \"headline\": \"${ghostPost.meta_title || ghostPost.title}\",\r\n                        \"url\": \"${canonical}\",\r\n                        \"datePublished\": \"${ghostPost.published_at}\",\r\n                        \"dateModified\": \"${ghostPost.updated_at}\",\r\n                        ${shareImage ? `\"image\": {\r\n                                \"@type\": \"ImageObject\",\r\n                                \"url\": \"${shareImage}\",\r\n                                \"width\": \"${config.shareImageWidth}\",\r\n                                \"height\": \"${config.shareImageHeight}\"\r\n                            },` : ``}\r\n                        \"publisher\": {\r\n                            \"@type\": \"Organization\",\r\n                            \"name\": \"${settings.title}\",\r\n                            \"logo\": {\r\n                                \"@type\": \"ImageObject\",\r\n                                \"url\": \"${publisherLogo}\",\r\n                                \"width\": 60,\r\n                                \"height\": 60\r\n                            }\r\n                        },\r\n                        \"description\": \"${ghostPost.meta_description || ghostPost.excerpt}\",\r\n                        \"mainEntityOfPage\": {\r\n                            \"@type\": \"WebPage\",\r\n                            \"@id\": \"${config.siteUrl}\"\r\n                        }\r\n                    }\r\n                `}</script>\r\n            </Helmet>\r\n            <ImageMeta image={shareImage} />\r\n        </>\r\n    )\r\n}\r\n\r\nArticleMetaGhost.propTypes = {\r\n    data: PropTypes.shape({\r\n        title: PropTypes.string.isRequired,\r\n        published_at: PropTypes.string.isRequired,\r\n        updated_at: PropTypes.string.isRequired,\r\n        meta_title: PropTypes.string,\r\n        meta_description: PropTypes.string,\r\n        primary_author: PropTypes.object.isRequired,\r\n        feature_image: PropTypes.string,\r\n        tags: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                name: PropTypes.string,\r\n                slug: PropTypes.string,\r\n                visibility: PropTypes.string,\r\n            })\r\n        ),\r\n        primaryTag: PropTypes.shape({\r\n            name: PropTypes.string,\r\n        }),\r\n        og_title: PropTypes.string,\r\n        og_description: PropTypes.string,\r\n        twitter_title: PropTypes.string,\r\n        twitter_description: PropTypes.string,\r\n        excerpt: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n    settings: PropTypes.shape({\r\n        allGhostSettings: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    canonical: PropTypes.string.isRequired,\r\n}\r\n\r\nconst ArticleMetaQuery = props => (\r\n    <StaticQuery\r\n        query={graphql`\r\n            query GhostSettingsArticleMeta {\r\n                allGhostSettings {\r\n                    edges {\r\n                        node {\r\n                            ...GhostSettingsFields\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `}\r\n        render={data => <ArticleMetaGhost settings={data} {...props} />}\r\n    />\r\n)\r\n\r\nexport default ArticleMetaQuery\r\n","import React from 'react'\r\nimport Helmet from \"react-helmet\"\r\nimport PropTypes from 'prop-types'\r\nimport _ from 'lodash'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\nimport url from 'url'\r\n\r\nimport ImageMeta from './ImageMeta'\r\nimport config from '../../../utils/siteConfig'\r\n\r\nconst WebsiteMeta = ({ data, settings, canonical, title, description, image, type }) => {\r\n    settings = settings.allGhostSettings.edges[0].node\r\n\r\n    const publisherLogo = url.resolve(config.siteUrl, (settings.logo || config.siteIcon))\r\n    let shareImage = image || data.feature_image || _.get(settings, `cover_image`, null)\r\n\r\n    shareImage = shareImage ? url.resolve(config.siteUrl, shareImage) : null\r\n\r\n    description = description || data.meta_description || data.description || config.siteDescriptionMeta || settings.description\r\n    title = `${title || data.meta_title || data.name || data.title} - ${settings.title}`\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>{title}</title>\r\n                <meta name=\"description\" content={description} />\r\n                <link rel=\"canonical\" href={canonical} />\r\n                <meta property=\"og:site_name\" content={settings.title} />\r\n                <meta property=\"og:type\" content=\"website\" />\r\n                <meta property=\"og:title\" content={title} />\r\n                <meta property=\"og:description\" content={description} />\r\n                <meta property=\"og:url\" content={canonical} />\r\n                <meta name=\"twitter:title\" content={title} />\r\n                <meta name=\"twitter:description\" content={description} />\r\n                <meta name=\"twitter:url\" content={canonical} />\r\n                {settings.twitter && <meta name=\"twitter:site\" content={`https://twitter.com/${settings.twitter.replace(/^@/, ``)}/`} />}\r\n                {settings.twitter && <meta name=\"twitter:creator\" content={settings.twitter} />}\r\n                <script type=\"application/ld+json\">{`\r\n                    {\r\n                        \"@context\": \"https://schema.org/\",\r\n                        \"@type\": \"${type}\",\r\n                        \"url\": \"${canonical}\",\r\n                        ${shareImage ? `\"image\": {\r\n                                \"@type\": \"ImageObject\",\r\n                                \"url\": \"${shareImage}\",\r\n                                \"width\": \"${config.shareImageWidth}\",\r\n                                \"height\": \"${config.shareImageHeight}\"\r\n                            },` : ``}\r\n                        \"publisher\": {\r\n                            \"@type\": \"Organization\",\r\n                            \"name\": \"${settings.title}\",\r\n                            \"logo\": {\r\n                                \"@type\": \"ImageObject\",\r\n                                \"url\": \"${publisherLogo}\",\r\n                                \"width\": 60,\r\n                                \"height\": 60\r\n                            }\r\n                        },\r\n                        \"mainEntityOfPage\": {\r\n                            \"@type\": \"WebPage\",\r\n                            \"@id\": \"${config.siteUrl}\"\r\n                        },\r\n                        \"description\": \"${description}\"\r\n                    }\r\n                `}</script>\r\n            </Helmet>\r\n            <ImageMeta image={shareImage} />\r\n        </>\r\n    )\r\n}\r\n\r\nWebsiteMeta.propTypes = {\r\n    data: PropTypes.shape({\r\n        title: PropTypes.string,\r\n        feature_image: PropTypes.string,\r\n        description: PropTypes.string,\r\n        bio: PropTypes.string,\r\n        profile_image: PropTypes.string,\r\n    }).isRequired,\r\n    settings: PropTypes.shape({\r\n        allGhostSettings: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    canonical: PropTypes.string.isRequired,\r\n    title: PropTypes.string,\r\n    description: PropTypes.string,\r\n    image: PropTypes.string,\r\n    type: PropTypes.oneOf([`WebSite`, `Series`]).isRequired,\r\n}\r\n\r\nconst WebsiteMetaQuery = props => (\r\n    <StaticQuery\r\n        query={graphql`\r\n            query GhostSettingsWebsiteMeta {\r\n                allGhostSettings {\r\n                    edges {\r\n                        node {\r\n                            ...GhostSettingsFields\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `}\r\n        render={data => <WebsiteMeta settings={data} {...props} />}\r\n    />\r\n)\r\n\r\nexport default WebsiteMetaQuery\r\n","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport PropTypes from 'prop-types'\r\nimport _ from 'lodash'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport ImageMeta from './ImageMeta'\r\nimport getAuthorProperties from './getAuthorProperties'\r\nimport config from '../../../utils/siteConfig'\r\n\r\nconst AuthorMeta = ({ data, settings, canonical }) => {\r\n    settings = settings.allGhostSettings.edges[0].node\r\n\r\n    const author = getAuthorProperties(data)\r\n    const shareImage = author.image || _.get(settings, `cover_image`, null)\r\n    const title = `${data.name} - ${settings.title}`\r\n    const description = data.bio || config.siteDescriptionMeta || settings.description\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>{title}</title>\r\n                <meta name=\"description\" content={description} />\r\n                <link rel=\"canonical\" href={canonical} />\r\n                <meta property=\"og:site_name\" content={settings.title} />\r\n                <meta property=\"og:type\" content=\"profile\" />\r\n                <meta property=\"og:title\" content={title} />\r\n                <meta property=\"og:description\" content={description} />\r\n                <meta property=\"og:url\" content={canonical} />\r\n                <meta name=\"twitter:title\" content={title} />\r\n                <meta name=\"twitter:description\" content={description} />\r\n                <meta name=\"twitter:url\" content={canonical} />\r\n                {settings.twitter && <meta name=\"twitter:site\" content={`https://twitter.com/${settings.twitter.replace(/^@/, ``)}/`} />}\r\n                {settings.twitter && <meta name=\"twitter:creator\" content={settings.twitter} />}\r\n                <script type=\"application/ld+json\">{`\r\n                    {\r\n                        \"@context\": \"https://schema.org/\",\r\n                        \"@type\": \"Person\",\r\n                        \"name\": \"${data.name}\",\r\n                        ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray},` : ``}\r\n                        \"url\": \"${canonical}\",\r\n                        ${shareImage ? `\"image\": {\r\n                                \"@type\": \"ImageObject\",\r\n                                \"url\": \"${shareImage}\",\r\n                                \"width\": \"${config.shareImageWidth}\",\r\n                                \"height\": \"${config.shareImageHeight}\"\r\n                            },` : ``}\r\n                        \"mainEntityOfPage\": {\r\n                            \"@type\": \"WebPage\",\r\n                            \"@id\": \"${config.siteUrl}\"\r\n                        },\r\n                        \"description\": \"${description}\"\r\n                    }\r\n                `}</script>\r\n            </Helmet>\r\n            <ImageMeta image={shareImage} />\r\n        </>\r\n    )\r\n}\r\n\r\nAuthorMeta.propTypes = {\r\n    data: PropTypes.shape({\r\n        name: PropTypes.string,\r\n        bio: PropTypes.string,\r\n        profile_image: PropTypes.string,\r\n        website: PropTypes.string,\r\n        twitter: PropTypes.string,\r\n        facebook: PropTypes.string,\r\n    }).isRequired,\r\n    settings: PropTypes.shape({\r\n        allGhostSettings: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    canonical: PropTypes.string.isRequired,\r\n}\r\n\r\nconst AuthorMetaQuery = props => (\r\n    <StaticQuery\r\n        query={graphql`\r\n            query GhostSettingsAuthorMeta {\r\n                allGhostSettings {\r\n                    edges {\r\n                        node {\r\n                            ...GhostSettingsFields\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `}\r\n        render={data => <AuthorMeta settings={data} {...props} />}\r\n    />\r\n)\r\n\r\nexport default AuthorMetaQuery\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\nimport url from 'url'\r\n\r\nimport config from '../../../utils/siteConfig'\r\nimport ArticleMeta from './ArticleMeta'\r\nimport WebsiteMeta from './WebsiteMeta'\r\nimport AuthorMeta from './AuthorMeta'\r\n\r\n/**\r\n* MetaData will generate all relevant meta data information incl.\r\n* JSON-LD (schema.org), Open Graph (Facebook) and Twitter properties.\r\n*\r\n*/\r\nconst MetaData = ({\r\n    data,\r\n    settings,\r\n    title,\r\n    description,\r\n    image,\r\n    location,\r\n}) => {\r\n    const canonical = url.resolve(config.siteUrl, location.pathname)\r\n    const { ghostPost, ghostTag, ghostAuthor, ghostPage } = data\r\n    settings = settings.allGhostSettings.edges[0].node\r\n\r\n    if (ghostPost) {\r\n        return (\r\n            <ArticleMeta\r\n                data={ghostPost}\r\n                canonical={canonical}\r\n            />\r\n        )\r\n    } else if (ghostTag) {\r\n        return (\r\n            <WebsiteMeta\r\n                data={ghostTag}\r\n                canonical={canonical}\r\n                type=\"Series\"\r\n            />\r\n        )\r\n    } else if (ghostAuthor) {\r\n        return (\r\n            <AuthorMeta\r\n                data={ghostAuthor}\r\n                canonical={canonical}\r\n            />\r\n        )\r\n    } else if (ghostPage) {\r\n        return (\r\n            <WebsiteMeta\r\n                data={ghostPage}\r\n                canonical={canonical}\r\n                type=\"WebSite\"\r\n            />\r\n        )\r\n    } else {\r\n        title = title || config.siteTitleMeta || settings.title\r\n        description = description || config.siteDescriptionMeta || settings.description\r\n        image = image || settings.cover_image || null\r\n\r\n        image = image ? url.resolve(config.siteUrl, image) : null\r\n\r\n        return (\r\n            <WebsiteMeta\r\n                data={{}}\r\n                canonical={canonical}\r\n                title={title}\r\n                description={description}\r\n                image={image}\r\n                type=\"WebSite\"\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nMetaData.defaultProps = {\r\n    data: {},\r\n}\r\n\r\nMetaData.propTypes = {\r\n    data: PropTypes.shape({\r\n        ghostPost: PropTypes.object,\r\n        ghostTag: PropTypes.object,\r\n        ghostAuthor: PropTypes.object,\r\n        ghostPage: PropTypes.object,\r\n    }).isRequired,\r\n    settings: PropTypes.shape({\r\n        allGhostSettings: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    location: PropTypes.shape({\r\n        pathname: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n    title: PropTypes.string,\r\n    description: PropTypes.string,\r\n    image: PropTypes.string,\r\n}\r\n\r\nconst MetaDataQuery = props => (\r\n    <StaticQuery\r\n        query={graphql`\r\n            query GhostSettingsMetaData {\r\n                allGhostSettings {\r\n                    edges {\r\n                        node {\r\n                            title\r\n                            description\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `}\r\n        render={data => <MetaData settings={data} {...props} />}\r\n    />\r\n)\r\n\r\nexport default MetaDataQuery\r\n","export { default as MetaData } from './MetaData'\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}