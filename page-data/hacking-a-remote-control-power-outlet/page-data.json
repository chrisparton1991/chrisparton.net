{"componentChunkName":"component---src-templates-post-js","path":"/hacking-a-remote-control-power-outlet/","webpackCompilationHash":"dd511bba6275a630ede6","result":{"data":{"ghostPost":{"id":"Ghost__Post__5d5d2f0d5655c53c345c7f7b","title":"Hacking A Remote Control Power Outlet","slug":"hacking-a-remote-control-power-outlet","featured":false,"feature_image":"/images/2019/08/finished-1.jpg","excerpt":"Messing around with 240V wiring isn't something I've ever been particularly eager to do, but I wanted a way to programmatically toggle one or more devices running on mains power.","custom_excerpt":"Messing around with 240V wiring isn't something I've ever been particularly eager to do, but I wanted a way to programmatically toggle one or more devices running on mains power.","created_at_pretty":"21 August, 2019","published_at_pretty":"01 February, 2016","updated_at_pretty":"21 August, 2019","created_at":"2019-08-21T21:46:21.000+10:00","published_at":"2016-02-01T12:16:00.000+11:00","updated_at":"2019-08-21T21:52:08.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"electronics","slug":"electronics","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Messing around with 240V wiring isn't something I've ever been particularly\neager to do, but I wanted a way to programmatically toggle one or more devices\nrunning on mains power.\n\nIf you've seen my 2015 Christmas Light\n[http://chrisparton.net/2016/01/17/christmas-lights-2015/] post, you may have\nnoticed that I have a bunch of traditional Christmas lights that aren't\nprogrammed in any way. I want to keep these for this year's display, but I have\nplans to make a display that synchronises to music. I want to turn the regular\nlights off when this display is active to maximise the impact.\n\nOptions...\nThere are a few ways to achieve this.\n\nPowerSwitch Tail\nPowerSwitch Tail\n[http://www.powerswitchtail.com/Pages/PowerSwitchTail240vackit.aspx] is a range\nof kits that can be put together with two ends of a mains cable of your\nchoosing. The kit has (low voltage) inputs that can be accessed by a\nmicrocontroller to effectively turn the power on and off.\n\nThe problem is, these kits are reasonably pricey and would presumably have to be\nordered in from overseas. Also, there's still a degree of danger in wiring these\nthings up.\n\nRelay\nThe cheaper option would be to simply chop a mains cable in half and stick an\nappropriately rated relay in there. This is even more dangerous, and I prefer my\nhouse when it's not on fire.\n\nRemote Control Switches\nAt the FinoComp office, we've just ordered in some components to create a neat\ncontinuous integration light based on a pedestrian crossing light. We're using\ntwo Z-Wave Switch Plugin\n[http://zwave.com.au/index.php?_a=viewProd&productId=30] units and a RaZberry\n[http://zwave.com.au/index.php?_a=viewProd&productId=97] daughterboard to\ncontrol them.\n\nThis is probably the most reliable and safe method to achieve what I want, but\nat $65 a pop for the switches and $95 for the RaZberry, it's much more costly\nthan what I want.\n\nWhat, Then?\nThere's one final option. Take a cheap, remote control power outlet and hack it\nto support input from a microcontroller. As you may have guessed, this is the\napproach I ended up taking.\n\nI bought an Arlec Remote Control Power Outlet\n[http://www.bunnings.com.au/arlec-remote-control-power-outlet-_p4331239] from\nBunnings for $13. The reason I chose this unit (apart from being cheap), is that\nit has separate \"On\" and \"Off\" buttons, which I assumed meant separate signals\nfor turning the outlet on and off. This is very important, because the\ncommunication is typically unidirectional in these things.\n\nThe outlet, complete with one unmolested controllerIf the same signal is sent to\ntoggle power and there's no way to know the state of the outlet, the state of\nthe outlet may quickly become out of sync with what my software expects. Having\nseparate signals means I can send the same signal a bunch of times to increase\nthe likelihood of it being received.\n\nI cracked open the controller to see what I was dealing with. The quality of the\ncircuit board isn't stellar, but it's good enough for my purposes. The circuit\nitself isn't too complex. Basically a bunch of buttons attached to a Holtek\nHT48R01T3 MCU [http://www.holtek.com/pdf/consumer/4xR01T3v130.pdf], which\ncontains an RF transmitter.\n\nInside the controller there are lots of buttons on a very plain PCBThe underside\nof the PCB is a little more interesting, with a microcontroller and other\ncomponentsNow, there are various blog posts around the place that detail ways to\ncapture IR signals, send them through a PC microphone jack and analyse their\nwaveforms in order to reproduce the signals.\n\nThing is, I'm too lazy to do all that if it can be avoided. I decided to simply\nrewire the \"All On\" and \"All Off\" buttons to allow me to control them from an\nArduino Due.\n\nRewiring The Controller\nI ended up adding four wires in total. Two of these wires were simply to allow\nthe remote to be powered by my Arduino Due instead of using batteries. The\nremote ran from two 1.5V LR44 batteries in series. The Arduino Due works with\n3.3V, which is close enough for me. Of course, I measured the current draw\nthrough the remote before trying this. It was only 8mA, which is a small enough\namount to run through the Arduino without blowing it up.\n\nThe other two wires were added to the positive side of the \"All On\" and \"All\nOff\" buttons, respectively. I worked out which side of the buttons were the\npositive side using the DC voltage mode on my multimeter.\n\nThese pins are connected to the Arduino, and are kept high. When one of the pins\nis brought low, the button is effectively circumvented, completing the circuit\nand allowing the signal to be sent. The nice thing about my approach is that the\nbuttons can still be used, even when the controller is connected to the Arduino.\n\nI finished the job by applying hot glue to prevent the wires from moving about\nand breaking. It's ugly, but I don't need it to be pretty for what I'm doing.\n\nA crude wired connection with some hot glue to keep the wires in placeThe Code\nI've only written a basic test program to ensure the controller can turn the\noutlet on and off. Here it is for completeness:\n\n#define ON_PIN 22\n#define OFF_PIN 23\n#define TIME_BETWEEN_POWER_TOGGLE_MS 5000\n#define MESSAGE_DURATION_MS 500\n\nvoid setup() {\n    pinMode(ON_PIN, OUTPUT);\n    digitalWrite(ON_PIN, HIGH);\n    \n    pinMode(OFF_PIN, OUTPUT);\n    digitalWrite(OFF_PIN, HIGH);\n}\n\nvoid loop() {\n  turnOn();\n  delay(TIME_BETWEEN_POWER_TOGGLE_MS);\n  turnOff();\n  delay(TIME_BETWEEN_POWER_TOGGLE_MS);\n}\n\nvoid turnOn() {\n    sendMessage(ON_PIN);\n}\n\nvoid turnOff() {\n    sendMessage(OFF_PIN);\n}\n\nvoid sendMessage(int pin) {\n  digitalWrite(pin, LOW);\n  delay(MESSAGE_DURATION_MS);\n  digitalWrite(pin, HIGH);\n}\n\n\nThe Finished Product\nHere's a video of the controller in action.","html":"<p>Messing around with 240V wiring isn't something I've ever been particularly eager to do, but I wanted a way to programmatically toggle one or more devices running on mains power.</p><p>If you've seen my <a href=\"http://chrisparton.net/2016/01/17/christmas-lights-2015/\">2015 Christmas Light</a> post, you may have noticed that I have a bunch of traditional Christmas lights that aren't programmed in any way. I want to keep these for this year's display, but I have plans to make a display that synchronises to music. I want to turn the regular lights off when this display is active to maximise the impact.</p><h2 id=\"options-\">Options...</h2><p>There are a few ways to achieve this.</p><h4 id=\"powerswitch-tail\">PowerSwitch Tail</h4><p><a href=\"http://www.powerswitchtail.com/Pages/PowerSwitchTail240vackit.aspx\">PowerSwitch Tail</a> is a range of kits that can be put together with two ends of a mains cable of your choosing. The kit has (low voltage) inputs that can be accessed by a microcontroller to effectively turn the power on and off.</p><p>The problem is, these kits are reasonably pricey and would presumably have to be ordered in from overseas. Also, there's still a degree of danger in wiring these things up.</p><h4 id=\"relay\">Relay</h4><p>The cheaper option would be to simply chop a mains cable in half and stick an appropriately rated relay in there. This is even more dangerous, and I prefer my house when it's not on fire.</p><h4 id=\"remote-control-switches\">Remote Control Switches</h4><p>At the FinoComp office, we've just ordered in some components to create a neat continuous integration light based on a pedestrian crossing light. We're using two <a href=\"http://zwave.com.au/index.php?_a=viewProd&amp;productId=30\">Z-Wave Switch Plugin</a> units and a <a href=\"http://zwave.com.au/index.php?_a=viewProd&amp;productId=97\">RaZberry</a> daughterboard to control them.</p><p>This is probably the most reliable and safe method to achieve what I want, but at $65 a pop for the switches and $95 for the RaZberry, it's much more costly than what I want.</p><h2 id=\"what-then\">What, Then?</h2><p>There's one final option. Take a cheap, remote control power outlet and hack it to support input from a microcontroller. As you may have guessed, this is the approach I ended up taking.</p><p>I bought an <a href=\"http://www.bunnings.com.au/arlec-remote-control-power-outlet-_p4331239\">Arlec Remote Control Power Outlet</a> from Bunnings for $13. The reason I chose this unit (apart from being cheap), is that it has separate \"On\" and \"Off\" buttons, which I assumed meant separate signals for turning the outlet on and off. This is very important, because the communication is typically unidirectional in these things.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"/images/2019/08/image-20.png\" class=\"kg-image\"><figcaption>The outlet, complete with one unmolested controller</figcaption></figure><!--kg-card-end: image--><p>If the same signal is sent to toggle power and there's no way to know the state of the outlet, the state of the outlet may quickly become out of sync with what my software expects. Having separate signals means I can send the same signal a bunch of times to increase the likelihood of it being received.</p><p>I cracked open the controller to see what I was dealing with. The quality of the circuit board isn't stellar, but it's good enough for my purposes. The circuit itself isn't too complex. Basically a bunch of buttons attached to a <a href=\"http://www.holtek.com/pdf/consumer/4xR01T3v130.pdf\">Holtek HT48R01T3 MCU</a>, which contains an RF transmitter.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"/images/2019/08/image-21.png\" class=\"kg-image\"><figcaption>Inside the controller there are lots of buttons on a very plain PCB</figcaption></figure><!--kg-card-end: image--><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"/images/2019/08/image-22.png\" class=\"kg-image\"><figcaption>The underside of the PCB is a little more interesting, with a microcontroller and other components</figcaption></figure><!--kg-card-end: image--><p>Now, there are various blog posts around the place that detail ways to capture IR signals, send them through a PC microphone jack and analyse their waveforms in order to reproduce the signals.</p><p>Thing is, I'm too lazy to do all that if it can be avoided. I decided to simply rewire the \"All On\" and \"All Off\" buttons to allow me to control them from an Arduino Due.</p><h2 id=\"rewiring-the-controller\">Rewiring The Controller</h2><p>I ended up adding four wires in total. Two of these wires were simply to allow the remote to be powered by my Arduino Due instead of using batteries. The remote ran from two 1.5V LR44 batteries in series. The Arduino Due works with 3.3V, which is close enough for me. Of course, I measured the current draw through the remote before trying this. It was only 8mA, which is a small enough amount to run through the Arduino without blowing it up.</p><p>The other two wires were added to the positive side of the \"All On\" and \"All Off\" buttons, respectively. I worked out which side of the buttons were the positive side using the DC voltage mode on my multimeter.</p><p>These pins are connected to the Arduino, and are kept high. When one of the pins is brought low, the button is effectively circumvented, completing the circuit and allowing the signal to be sent. The nice thing about my approach is that the buttons can still be used, even when the controller is connected to the Arduino.</p><p>I finished the job by applying hot glue to prevent the wires from moving about and breaking. It's ugly, but I don't need it to be pretty for what I'm doing.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"/images/2019/08/image-23.png\" class=\"kg-image\"><figcaption>A crude wired connection with some hot glue to keep the wires in place</figcaption></figure><!--kg-card-end: image--><h2 id=\"the-code\">The Code</h2><p>I've only written a basic test program to ensure the controller can turn the outlet on and off. Here it is for completeness:</p><!--kg-card-begin: code--><pre><code class=\"language-language-cpp\">#define ON_PIN 22\n#define OFF_PIN 23\n#define TIME_BETWEEN_POWER_TOGGLE_MS 5000\n#define MESSAGE_DURATION_MS 500\n\nvoid setup() {\n    pinMode(ON_PIN, OUTPUT);\n    digitalWrite(ON_PIN, HIGH);\n    \n    pinMode(OFF_PIN, OUTPUT);\n    digitalWrite(OFF_PIN, HIGH);\n}\n\nvoid loop() {\n  turnOn();\n  delay(TIME_BETWEEN_POWER_TOGGLE_MS);\n  turnOff();\n  delay(TIME_BETWEEN_POWER_TOGGLE_MS);\n}\n\nvoid turnOn() {\n    sendMessage(ON_PIN);\n}\n\nvoid turnOff() {\n    sendMessage(OFF_PIN);\n}\n\nvoid sendMessage(int pin) {\n  digitalWrite(pin, LOW);\n  delay(MESSAGE_DURATION_MS);\n  digitalWrite(pin, HIGH);\n}\n</code></pre><!--kg-card-end: code--><h2 id=\"the-finished-product\">The Finished Product</h2><p>Here's a video of the controller in action.</p><!--kg-card-begin: html--><iframe src=\"https://www.youtube.com/embed/YIEjqCMYpUQ\" frameborder=\"0\" allowfullscreen></iframe><!--kg-card-end: html-->","url":"http://localhost:2368/hacking-a-remote-control-power-outlet/","uuid":"74c3902f-4282-4c58-a078-ba832730bd02","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d5d2f0d5655c53c345c7f7b"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"hacking-a-remote-control-power-outlet"}}}