{"componentChunkName":"component---src-templates-author-js","path":"/author/chris/","webpackCompilationHash":"dd511bba6275a630ede6","result":{"data":{"ghostAuthor":{"slug":"chris","name":"Chris Parton","bio":null,"cover_image":"https://chrisparton.net/content/images/2019/08/chrisparton_net_bg-2.svg","profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","location":null,"website":null,"twitter":"@chrislights_","facebook":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5d60adf85655c53c345c80ad","title":"Finding The Fun In A Boring Task","slug":"finding-the-fun-in-a-boring-task","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/Train-Icons.png","excerpt":"As part of a recent contract job, I was tasked with creating around 150 distinct icons to represent trains in various statuses on an interactive map. This was a task that nobody was keen to pick up, as it involved long hours in an image editor.","custom_excerpt":"As part of a recent contract job, I was tasked with creating around 150 distinct icons to represent trains in various statuses on an interactive map. This was a task that nobody was keen to pick up, as it involved long hours in an image editor.","created_at_pretty":"24 August, 2019","published_at_pretty":"24 September, 2018","updated_at_pretty":"24 August, 2019","created_at":"2019-08-24T13:24:40.000+10:00","published_at":"2018-09-24T12:27:00.000+10:00","updated_at":"2019-08-24T13:25:52.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"java","slug":"java","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"java","slug":"java","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"programming","slug":"programming","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"software","slug":"software","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"As part of a recent contract job, I was tasked with creating around 150 distinct\nicons to represent trains in various statuses on an interactive map. This was a\ntask that nobody was keen to pick up, as it involved long hours in an image\neditor.\n\nI volunteered for the task to free up the full-time devs who have deeper domain\nknowledge of the product and are therefore better suited to some of the more\nnitty-gritty logic problems. I quite enjoy tinkering in image editors, but I\nknew I'd quickly get bored of this particular task regardless.\n\nThe boring task\nAs I settled in and started reading the requirements, I learned that the icons\nare mapped to a 4 character status code, and each of the digits (sometimes a\ncombination) dictate various features of the icon. For instance, a certain\ncharacter in the code being 'E' means a train is late, and a corresponding\nindicator is present in the icon.\n\nArmed with this knowledge, I realised I could turn this menial task into a fun\none by generating the icons on the fly based on a provided status code. At the\nsame time, this approach would likely be faster to implement than manually\ncreating the icons, and make icon changes much easier in the future.\n\nMaking the task fun\nIt proved to be quite simple to implement the icon generation. I couldn't avoid\nan image editor entirely; I had to create the unique components that can make up\nan icon (as transparent PNGs). Fortunately, these were mostly simple shapes.\n\nUltimately, the icon generation code looks something like this:\n\n/**\n * @param iconType the type of icon to generate, which includes width and height in px\n * @param trainCode a 4 character code representing a train's status\n * @return the generated icon\n */\npublic BufferedImage generateIcon(IconType iconType, String trainCode) {\n  List<BufferedImage> iconComponents = Arrays.asList(\n    getBodyBackgroundImage(iconType, trainCode),\n    getBodyImage(iconType, trainCode),\n    // more components...\n  );\n\n  BufferedImage result = new BufferedImage(iconType.getWidth(), iconType.getHeight(), \n      BufferedImage.TYPE_INT_ARGB);\n\n  // Stack the components together to create the final image\n  for (BufferedImage iconComponent : iconComponents) {\n    result.getGraphics().drawImage(image, 0, 0, null);\n  }\n\n  return result;\n}\n\n\nThe takeaway\nThere's caching and some application-specific warts to contend with, but this\nblog post isn't really about the implementation of this feature.\n\nAt its essence, the icon generation was quick to implement and resulted in an\nelegant, fun solution to a boring problem. I put this post together to remind\nmyself (and you, if you're reading!) that the \"fun-ness\" of a task can have very\nreal implications for the quality and functionality of the end result. I've\nfound that I'm vastly more productive when working on something I enjoy, and\nthis solution saved time and delivered a better result in the end.\n\nBy transforming a boring task into a fun one, you can improve your productivity\nand have a good time along the way!","html":"<p>As part of a recent contract job, I was tasked with creating around 150 distinct icons to represent trains in various statuses on an interactive map. This was a task that nobody was keen to pick up, as it involved long hours in an image editor.</p><p>I volunteered for the task to free up the full-time devs who have deeper domain knowledge of the product and are therefore better suited to some of the more nitty-gritty logic problems. I quite enjoy tinkering in image editors, but I knew I'd quickly get bored of this particular task regardless.</p><h3 id=\"the-boring-task\">The boring task</h3><p>As I settled in and started reading the requirements, I learned that the icons are mapped to a 4 character status code, and each of the digits (sometimes a combination) dictate various features of the icon. For instance, a certain character in the code being 'E' means a train is late, and a corresponding indicator is present in the icon.</p><p>Armed with this knowledge, I realised I could turn this menial task into a fun one by generating the icons on the fly based on a provided status code. At the same time, this approach would likely be faster to implement than manually creating the icons, and make icon changes much easier in the future.</p><h3 id=\"making-the-task-fun\">Making the task fun</h3><p>It proved to be quite simple to implement the icon generation. I couldn't avoid an image editor entirely; I had to create the unique components that can make up an icon (as transparent PNGs). Fortunately, these were mostly simple shapes.</p><p>Ultimately, the icon generation code looks something like this:</p><!--kg-card-begin: code--><pre><code class=\"language-lang=java\">/**\n * @param iconType the type of icon to generate, which includes width and height in px\n * @param trainCode a 4 character code representing a train's status\n * @return the generated icon\n */\npublic BufferedImage generateIcon(IconType iconType, String trainCode) {\n  List&lt;BufferedImage&gt; iconComponents = Arrays.asList(\n    getBodyBackgroundImage(iconType, trainCode),\n    getBodyImage(iconType, trainCode),\n    // more components...\n  );\n\n  BufferedImage result = new BufferedImage(iconType.getWidth(), iconType.getHeight(), \n      BufferedImage.TYPE_INT_ARGB);\n\n  // Stack the components together to create the final image\n  for (BufferedImage iconComponent : iconComponents) {\n    result.getGraphics().drawImage(image, 0, 0, null);\n  }\n\n  return result;\n}\n</code></pre><!--kg-card-end: code--><h3 id=\"the-takeaway\">The takeaway</h3><p>There's caching and some application-specific warts to contend with, but this blog post isn't really about the implementation of this feature.</p><p>At its essence, the icon generation was quick to implement and resulted in an elegant, fun solution to a boring problem. I put this post together to remind myself (and you, if you're reading!) that the \"fun-ness\" of a task can have very real implications for the quality and functionality of the end result. I've found that I'm vastly more productive when working on something I enjoy, and this solution saved time and delivered a better result in the end.</p><p>By transforming a boring task into a fun one, you can improve your productivity and have a good time along the way!</p>","url":"https://chrisparton.net/finding-the-fun-in-a-boring-task/","uuid":"3a0abdb5-f33f-4dfa-880a-b5a1f8a03876","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d60adf85655c53c345c80ad"}},{"node":{"id":"Ghost__Post__5d60ad315655c53c345c8092","title":"Interactive Staircase","slug":"interactive-staircase","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/thumbnail.jpg","excerpt":"My third ChrisLights project is something I've been meaning to try for quite some time: building an interactive staircase. I reached the #1 spot on /r/arduino with over 600 upvotes and 11K views.","custom_excerpt":"My third ChrisLights project is something I've been meaning to try for quite some time: building an interactive staircase. I reached the #1 spot on /r/arduino with over 600 upvotes and 11K views.","created_at_pretty":"24 August, 2019","published_at_pretty":"20 June, 2018","updated_at_pretty":"24 August, 2019","created_at":"2019-08-24T13:21:21.000+10:00","published_at":"2018-06-20T18:16:00.000+10:00","updated_at":"2019-08-24T13:24:13.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"chrislights","slug":"chrislights","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"electronics","slug":"electronics","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"My third ChrisLights [https://www.youtube.com/channel/UCG_ox3UgSRHj-m_zG_mJCUg] \nproject is something I've been meaning to try for quite some time: building an\ninteractive staircase.\n\nThe main blocker I always faced was the task of accurately sensing where a\nperson is on the staircase. I'd always imagined using an ultrasonic sensor for\nthis, but the results were far too erratic when using them in the confined space\naround my staircase.\n\nAfter realising that I could use an array of lasers and photoresistors instead,\nI ordered the components and started building.\n\nIt took a lot of work - especially on the wiring and soldering side of things -\nbut I was really happy with the end result and the response I got from the video\nblew me away! I reached the #1 spot on /r/arduino\n[https://www.reddit.com/r/arduino] with over 600 upvotes and 11K views\n[https://www.reddit.com/r/arduino/comments/8s4msz/i_just_finished_making_this_interactive_led]\n, got over 900 upvotes on 9gag\n[https://9gag.com/gag/adKoEjV/just-finished-making-these-interactive-led-stairs]\n, and I was retweeted by the official Arduino twitter\n[https://twitter.com/arduino/status/1009159342048907264].\n\nThe Results\nYou can see the results (and more of an explanation) in the video below:\n\nI'm busy working on a Part 2 video, which will add more sophisticated effects to\nthe staircase.","html":"<p>My third <a href=\"https://www.youtube.com/channel/UCG_ox3UgSRHj-m_zG_mJCUg\">ChrisLights</a> project is something I've been meaning to try for quite some time: building an interactive staircase.</p><p>The main blocker I always faced was the task of accurately sensing where a person is on the staircase. I'd always imagined using an ultrasonic sensor for this, but the results were far too erratic when using them in the confined space around my staircase.</p><p>After realising that I could use an array of lasers and photoresistors instead, I ordered the components and started building.</p><p>It took a lot of work - especially on the wiring and soldering side of things - but I was really happy with the end result and the response I got from the video blew me away! I reached the #1 spot on <a href=\"https://www.reddit.com/r/arduino\">/r/arduino</a> with <a href=\"https://www.reddit.com/r/arduino/comments/8s4msz/i_just_finished_making_this_interactive_led\">over 600 upvotes and 11K views</a>, got over <a href=\"https://9gag.com/gag/adKoEjV/just-finished-making-these-interactive-led-stairs\">900 upvotes on 9gag</a>, and I was <a href=\"https://twitter.com/arduino/status/1009159342048907264\">retweeted by the official Arduino twitter</a>.</p><h3 id=\"the-results\">The Results</h3><p>You can see the results (and more of an explanation) in the video below:</p><!--kg-card-begin: html--> <iframe src=\"https://www.youtube.com/embed/h5pk4Sp4jLw\" frameborder=\"0\" allowfullscreen></iframe><!--kg-card-end: html--><p>I'm busy working on a Part 2 video, which will add more sophisticated effects to the staircase.</p>","url":"https://chrisparton.net/interactive-staircase/","uuid":"1b459a75-77e1-47b8-afe3-fd49d56ace02","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d60ad315655c53c345c8092"}},{"node":{"id":"Ghost__Post__5d60ac8c5655c53c345c807f","title":"Light Discs: An Experiment Gone Right!","slug":"light-discs-an-experiment-gone-right","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/ChrisLights_Disc_57.jpg","excerpt":"I figured that, when combined with fast rotation, a high-density LED strip attached to my ceiling fan would create a neat persistence-of-vision effect.","custom_excerpt":"I figured that, when combined with fast rotation, a high-density LED strip attached to my ceiling fan would create a neat persistence-of-vision effect.","created_at_pretty":"24 August, 2019","published_at_pretty":"23 April, 2018","updated_at_pretty":"24 August, 2019","created_at":"2019-08-24T13:18:36.000+10:00","published_at":"2018-04-24T06:02:00.000+10:00","updated_at":"2019-08-24T13:19:43.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"chrislights","slug":"chrislights","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"For ChrisLights [https://www.youtube.com/channel/UCG_ox3UgSRHj-m_zG_mJCUg] video\n#2, I decided to test out an idea I had whilst laying in bad, looking up at my\nceiling.\n\nI figured that, when combined with fast rotation, a high-density LED strip\nattached to my ceiling fan would create a neat persistence-of-vision effect.\n\nI took a fan blade down and attached the LED strip using elastic bands. I added\nan Arduino Pro Mini to drive the LED strip and a LiPo battery to power it all. I\nused the FastLED \"100-line\" demo reel\n[https://github.com/FastLED/FastLED/blob/master/examples/DemoReel100/DemoReel100.ino] \non the Arduino, which cycles through some awesome effects.\n\nThe Results\nYou can see the results (and more of an explanation) in the video below:\n\nI've placed all the photos I took on the public domain. You can download them \nhere\n[https://drive.google.com/drive/u/1/folders/1b-5UjHJj6ltql3JG7MDND21-EprUYES0].\nNo attribution is required, but I'd love to hear from you if you enjoy or use\nany of the photos!\n\nThis project has given me lots of cool ideas for future light painting projects,\nand I'm excited to pursue those in the not-too-distant future.","html":"<p>For <a href=\"https://www.youtube.com/channel/UCG_ox3UgSRHj-m_zG_mJCUg\">ChrisLights</a> video #2, I decided to test out an idea I had whilst laying in bad, looking up at my ceiling.</p><p>I figured that, when combined with fast rotation, a high-density LED strip attached to my ceiling fan would create a neat persistence-of-vision effect.</p><p>I took a fan blade down and attached the LED strip using elastic bands. I added an Arduino Pro Mini to drive the LED strip and a LiPo battery to power it all. I used the <a href=\"https://github.com/FastLED/FastLED/blob/master/examples/DemoReel100/DemoReel100.ino\">FastLED \"100-line\" demo reel</a> on the Arduino, which cycles through some awesome effects.</p><h3 id=\"the-results\">The Results</h3><p>You can see the results (and more of an explanation) in the video below:</p><p>I've placed all the photos I took on the public domain. You can download them <a href=\"https://drive.google.com/drive/u/1/folders/1b-5UjHJj6ltql3JG7MDND21-EprUYES0\">here</a>. No attribution is required, but I'd love to hear from you if you enjoy or use any of the photos!</p><p>This project has given me lots of cool ideas for future light painting projects, and I'm excited to pursue those in the not-too-distant future.</p>","url":"https://chrisparton.net/light-discs-an-experiment-gone-right/","uuid":"94a2628f-4372-48bf-9af4-8c46920f8870","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d60ac8c5655c53c345c807f"}},{"node":{"id":"Ghost__Post__5d60ac2c5655c53c345c806a","title":"Introducing ChrisLights!","slug":"introducing-chrislights","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/YouTube-Background.png","excerpt":"I've launched a new YouTube channel called ChrisLights. It's devoted to my love of lights, sound, games and code, and to projects that combine these elements into something unique and fun.","custom_excerpt":"I've launched a new YouTube channel called ChrisLights. It's devoted to my love of lights, sound, games and code, and to projects that combine these elements into something unique and fun.","created_at_pretty":"24 August, 2019","published_at_pretty":"16 April, 2018","updated_at_pretty":"24 August, 2019","created_at":"2019-08-24T13:17:00.000+10:00","published_at":"2018-04-17T07:43:00.000+10:00","updated_at":"2019-08-24T13:19:57.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"electronics","slug":"electronics","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"chrislights","slug":"chrislights","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"I've launched a new YouTube channel called ChrisLights\n[https://www.youtube.com/channel/UCG_ox3UgSRHj-m_zG_mJCUg]. It's devoted to my\nlove of lights, sound, games and code, and to projects that combine these\nelements into something unique and fun.\n\nDoom II Gets Lit Up!\nFor my first video, I wrote a Java application that analyses the ammo count\npixels of a running Doom II game. It uses this information to detect when\nbullets are fired and sends this data wirelessly to an ESP32. The ESP32 controls\nan LED strip, and sends different effects through the strip to correspond with\ngunfire from different weapons.\n\nIt was a lot of fun to create, and you can check it out below:","html":"<p>I've launched a new YouTube channel called <a href=\"https://www.youtube.com/channel/UCG_ox3UgSRHj-m_zG_mJCUg\">ChrisLights</a>. It's devoted to my love of lights, sound, games and code, and to projects that combine these elements into something unique and fun.</p><h3 id=\"doom-ii-gets-lit-up-\">Doom II Gets Lit Up!</h3><p>For my first video, I wrote a Java application that analyses the ammo count pixels of a running Doom II game. It uses this information to detect when bullets are fired and sends this data wirelessly to an ESP32. The ESP32 controls an LED strip, and sends different effects through the strip to correspond with gunfire from different weapons.</p><p>It was a lot of fun to create, and you can check it out below:</p><!--kg-card-begin: html--><iframe src=\"https://www.youtube.com/embed/Uxh_LZPdhqI\" frameborder=\"0\" allowfullscreen></iframe><!--kg-card-end: html-->","url":"https://chrisparton.net/introducing-chrislights/","uuid":"af2af0b8-1d49-4021-916b-34f7964853fd","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d60ac2c5655c53c345c806a"}},{"node":{"id":"Ghost__Post__5d60abe55655c53c345c805b","title":"The LED Pixel Master Course","slug":"the-led-pixel-master-course","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/Course-Image.jpg","excerpt":"Today, I released The LED Pixel Master Course on Udemy! I've wanted to create a Udemy course for quite a while now, and I figured a course on LED pixels was the perfect place to start.","custom_excerpt":"Today, I released The LED Pixel Master Course on Udemy! I've wanted to create a Udemy course for quite a while now, and I figured a course on LED pixels was the perfect place to start.","created_at_pretty":"24 August, 2019","published_at_pretty":"11 April, 2018","updated_at_pretty":"24 August, 2019","created_at":"2019-08-24T13:15:49.000+10:00","published_at":"2018-04-12T00:58:00.000+10:00","updated_at":"2019-08-24T13:20:11.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"electronics","slug":"electronics","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"udemy","slug":"udemy","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Today, I released The LED Pixel Master Course on Udemy! I've wanted to create a\nUdemy course for quite a while now, and I figured a course on LED pixels was the\nperfect place to start.\n\nYou can use this link\n[https://www.udemy.com/the-led-pixel-master-course/?couponCode=LPMC10] to get\nthe course for $10 using a special coupon :)\n\nI created the course because I had to build up my knowledge of LED pixels by\ncobbling together information (and misinformation) from multiple sources,\nincluding documentation, forums, online videos and lots of trial and error. I\nwant the course to be a single place where people can get all of the information\nthey need to learn all about LED pixels and how to use them.\n\nThe course focuses on safety and best practices throughout, whereas most video\ntutorials are more like step-by-step guides that don't explain why things are\ndone the way they are.\n\nI'm really proud of how the course turned out. I know that things can be\nimproved (and they will be over time), but for my first course I think it's a\nsolid effort.\n\nI thought I'd jot down some notes on the things I learned whilst creating the\ncourse.\n\nCamera\nI mainly used my Canon EOS M with an 18-55mm lens (set at around 24mm) to record\nthe course. I made use of a macro lens for some closeup shots of LED pixels, and\nused my Galaxy S7 to record some of the soldering etc.\n\nLighting\nI had never really recorded myself on camera for anything online before, and I\ndidn't want cruddy video quality. I took a look at some lighting tutorials\nonline and quickly realised I'd need to get my hands on some softboxes or\numbrella lights. I ended up snagging a great bargain on Gumtree: three softboxes\n(one of them with a boom stand) and two umbrella lights with a carry case for\n$80.\n\nAudio\nI was initially planning on investing in a Blue Yeti mic for my audio, but I\nended up going with the Rode SmartLav+ lapel mic. They cost $58 but I got one\nfor $36 through a friend at JB. The audio quality of the mic is really quite\ngood, but the main downside is that the mic uses a TRRS connector, and needs a\n$15 adapter to work with a PC.\n\nI ended up using the mic as-is with my phone to record videos where my face is\nbeing recorded, and bought the adapter to record straight into Audacity for\nscreen recorded videos (which are the majority).\n\nSoftware\nI went with Camtasia Studio for putting my videos together. I have experience\nwith Adobe After Effects, but I felt it'd be too heavyweight for putting\ntogether a course, and I was looking for productivity. Aside from a couple of\nbugs, Camtasia has been fantastic for quickly putting videos together.","html":"<p>Today, I released The LED Pixel Master Course on Udemy! I've wanted to create a Udemy course for quite a while now, and I figured a course on LED pixels was the perfect place to start.</p><p>You can use <a href=\"https://www.udemy.com/the-led-pixel-master-course/?couponCode=LPMC10\">this link</a> to get the course for $10 using a special coupon :)</p><p>I created the course because I had to build up my knowledge of LED pixels by cobbling together information (and misinformation) from multiple sources, including documentation, forums, online videos and lots of trial and error. I want the course to be a single place where people can get all of the information they need to learn all about LED pixels and how to use them.</p><p>The course focuses on safety and best practices throughout, whereas most video tutorials are more like step-by-step guides that don't explain <em>why</em> things are done the way they are.</p><p>I'm really proud of how the course turned out. I know that things can be improved (and they will be over time), but for my first course I think it's a solid effort.</p><p>I thought I'd jot down some notes on the things I learned whilst creating the course.</p><h3 id=\"camera\">Camera</h3><p>I mainly used my Canon EOS M with an 18-55mm lens (set at around 24mm) to record the course. I made use of a macro lens for some closeup shots of LED pixels, and used my Galaxy S7 to record some of the soldering etc.</p><h3 id=\"lighting\">Lighting</h3><p>I had never really recorded myself on camera for anything online before, and I didn't want cruddy video quality. I took a look at some lighting tutorials online and quickly realised I'd need to get my hands on some softboxes or umbrella lights. I ended up snagging a great bargain on Gumtree: three softboxes (one of them with a boom stand) and two umbrella lights with a carry case for $80.</p><h3 id=\"audio\">Audio</h3><p>I was initially planning on investing in a Blue Yeti mic for my audio, but I ended up going with the Rode SmartLav+ lapel mic. They cost $58 but I got one for $36 through a friend at JB. The audio quality of the mic is really quite good, but the main downside is that the mic uses a TRRS connector, and needs a $15 adapter to work with a PC.</p><p>I ended up using the mic as-is with my phone to record videos where my face is being recorded, and bought the adapter to record straight into Audacity for screen recorded videos (which are the majority).</p><h3 id=\"software\">Software</h3><p>I went with Camtasia Studio for putting my videos together. I have experience with Adobe After Effects, but I felt it'd be too heavyweight for putting together a course, and I was looking for productivity. Aside from a couple of bugs, Camtasia has been fantastic for quickly putting videos together.</p>","url":"https://chrisparton.net/the-led-pixel-master-course/","uuid":"2b0e462e-39c3-47c6-89ad-cb66036bf098","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d60abe55655c53c345c805b"}},{"node":{"id":"Ghost__Post__5d60ab455655c53c345c8049","title":"Christmas Lights 2017","slug":"christmas-lights-2017","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/lights.jpg","excerpt":"I decided to temporarily shelve my game and throw myself back into Christmas lights. I dusted off Sparkled and got to work. I'm really proud of what I accomplished in the last three months of the year.","custom_excerpt":"I decided to temporarily shelve my game and throw myself back into Christmas lights. I dusted off Sparkled and got to work. I'm really proud of what I accomplished in the last three months of the year.","created_at_pretty":"24 August, 2019","published_at_pretty":"02 January, 2018","updated_at_pretty":"24 August, 2019","created_at":"2019-08-24T13:13:09.000+10:00","published_at":"2018-01-02T18:53:00.000+11:00","updated_at":"2019-08-24T13:20:46.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"christmas lights","slug":"christmas-lights","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"electronics","slug":"electronics","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"sparkled","slug":"sparkled","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"2017 was a year of many side projects for me. The majority of the year was\nfocused on building my first game for GirtGames and I didn't think I'd have time\nto put anything together for Christmas. As is my way, however, I ran out of\nsteam on my GirtGames project in September and felt myself being pulled back\ntowards Christmas lights.\n\nNot wanting to work on a project I wasn't interested in, I decided to\ntemporarily shelve my game and throw myself back into Christmas lights. I dusted\noff Sparkled and got to work. I'm really proud of what I accomplished in the\nlast three months of the year.\n\nI started off by doing a huge refactor of the codebase. I changed the underlying\ndatabase from Postgres to file-based H2 and completed loads of missing\nfunctionality. I was working away at this all through December, so I didn't have\na lot of time to actually sequence the music.\n\nA Sneak Peek\nHere's a sequence playing against a shortened, instrumental version of\nColdplay's A Sky Full Of Stars:\n\nI put this together in around three hours total. I made some mistakes with the\nsequence and the music is a little off-sync because I hastily added a clean\naudio track over top of the recorded audio, but the video shows that Sparkled is\ncapable of pulling off an awesome Christmas display.\n\nWhat's Next\nI'm feeling ready to jump back in to GirtGames and get my first game out to the\nworld. I'll still be devoting lots of time to Sparkled throughout the year. I'll\nbe adding new features and effects, rewriting the UI in React, and building a\nsignificantly better Christmas display.\n\nI moved Sparkled to its own GitHub organisation and created some basic content\nfor sparkled.io with the hope that a community will form around the software as\nit becomes more feature complete.","html":"<p>2017 was a year of many side projects for me. The majority of the year was focused on building my first game for GirtGames and I didn't think I'd have time to put anything together for Christmas. As is my way, however, I ran out of steam on my GirtGames project in September and felt myself being pulled back towards Christmas lights.</p><p>Not wanting to work on a project I wasn't interested in, I decided to temporarily shelve my game and throw myself back into Christmas lights. I dusted off Sparkled and got to work. I'm really proud of what I accomplished in the last three months of the year.</p><p>I started off by doing a huge refactor of the codebase. I changed the underlying database from Postgres to file-based H2 and completed loads of missing functionality. I was working away at this all through December, so I didn't have a lot of time to actually sequence the music.</p><h4 id=\"a-sneak-peek\">A Sneak Peek</h4><p>Here's a sequence playing against a shortened, instrumental version of Coldplay's A Sky Full Of Stars:</p><!--kg-card-begin: html-->  <iframe src=\"https://www.youtube.com/embed/LjgJN3SzmT0\" frameborder=\"0\" allowfullscreen></iframe><!--kg-card-end: html--><p>I put this together in around three hours total. I made some mistakes with the sequence and the music is a little off-sync because I hastily added a clean audio track over top of the recorded audio, but the video shows that Sparkled is capable of pulling off an awesome Christmas display.</p><h4 id=\"what-s-next\">What's Next</h4><p>I'm feeling ready to jump back in to GirtGames and get my first game out to the world. I'll still be devoting lots of time to Sparkled throughout the year. I'll be adding new features and effects, rewriting the UI in React, and building a significantly better Christmas display.</p><p>I moved Sparkled to its own GitHub organisation and created some basic content for <a>sparkled.io</a> with the hope that a community will form around the software as it becomes more feature complete.</p>","url":"https://chrisparton.net/christmas-lights-2017/","uuid":"63f8ec24-11e9-4fbe-abdd-74943e82eab3","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d60ab455655c53c345c8049"}},{"node":{"id":"Ghost__Post__5d60aac65655c53c345c8034","title":"My First Jack-O'-Lantern","slug":"my-first-jack-o-lantern","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/jack-o-lantern.jpg","excerpt":"Halloween isn't a traditional Australian holiday, but it is becoming more prevalent with each passing year. I thought it'd be neat to try my hand at making a jack-o'-lantern.","custom_excerpt":"Halloween isn't a traditional Australian holiday, but it is becoming more prevalent with each passing year. I thought it'd be neat to try my hand at making a jack-o'-lantern.","created_at_pretty":"24 August, 2019","published_at_pretty":"03 November, 2017","updated_at_pretty":"24 August, 2019","created_at":"2019-08-24T13:11:02.000+10:00","published_at":"2017-11-03T16:35:00.000+11:00","updated_at":"2019-08-24T13:12:36.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"electronics","slug":"electronics","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"halloween","slug":"halloween","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Halloween isn't a traditional Australian holiday, but it is becoming more\nprevalent with each passing year.\n\nI haven't really embraced the phenomenon myself, but when I found carving\npumpkins at my local supermarket I thought it'd be neat to try my hand at making\na jack-o'-lantern.\n\nI downloaded a face template online and drew it on to my pumpkin, then carved it\nout using my Dremel and its multipurpose cutting bit\n[https://www.dremel.com/en_US/products/-/show-product/accessories/561-multipurpose-cutting-bit]\n. I also added a bit of old LED strip powered by a small LiPO battery and\nArduino Nano running the Fire2012WithPalette FastLED effect\n[https://github.com/FastLED/FastLED/blob/master/examples/Fire2012WithPalette/Fire2012WithPalette.ino]\n.\n\nI was really happy with the result, given that the whole exercise only took a\ncouple of hours. You can see it in action below:","html":"<p>Halloween isn't a traditional Australian holiday, but it is becoming more prevalent with each passing year.</p><p>I haven't really embraced the phenomenon myself, but when I found carving pumpkins at my local supermarket I thought it'd be neat to try my hand at making a jack-o'-lantern.</p><p>I downloaded a face template online and drew it on to my pumpkin, then carved it out using my Dremel and its <a href=\"https://www.dremel.com/en_US/products/-/show-product/accessories/561-multipurpose-cutting-bit\">multipurpose cutting bit</a>. I also added a bit of old LED strip powered by a small LiPO battery and Arduino Nano running the <a href=\"https://github.com/FastLED/FastLED/blob/master/examples/Fire2012WithPalette/Fire2012WithPalette.ino\">Fire2012WithPalette FastLED effect</a>.</p><p>I was really happy with the result, given that the whole exercise only took a couple of hours. You can see it in action below:</p><!--kg-card-begin: html--><iframe src=\"https://www.youtube.com/embed/BtMYZkRteZU\" frameborder=\"0\" allowfullscreen></iframe><!--kg-card-end: html-->","url":"https://chrisparton.net/my-first-jack-o-lantern/","uuid":"765778ea-53da-4a51-a456-4201a664151f","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d60aac65655c53c345c8034"}},{"node":{"id":"Ghost__Post__5d60aa2a5655c53c345c801e","title":"Circular Arc Spritesheet Generator","slug":"circular-arc-spritesheet-generator","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/Spritesheet-1.png","excerpt":"Now, how to create a spritesheet that displays a 360 degree arc that progressively shrinks to a 0 degree arc? I almost cracked open Photoshop, but I had the idea to generate the spritesheet using an HTML5 canvas.","custom_excerpt":"Now, how to create a spritesheet that displays a 360 degree arc that progressively shrinks to a 0 degree arc? I almost cracked open Photoshop, but I had the idea to generate the spritesheet using an HTML5 canvas.","created_at_pretty":"24 August, 2019","published_at_pretty":"01 March, 2017","updated_at_pretty":"24 August, 2019","created_at":"2019-08-24T13:08:26.000+10:00","published_at":"2017-03-01T14:16:00.000+11:00","updated_at":"2019-08-24T13:10:41.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"game dev","slug":"game-dev","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"game dev","slug":"game-dev","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"javascript","slug":"javascript","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"In my spare time after work, I've been working on a game in Unity. Early days\nyet, but I plan on releasing it on Android and possibly iOS.\n\nOne thing I've been struggling with is creating an animated, circular arc that\nwill be used to indicate the time left available to tap a sprite before it\ndetonates.\n\nThis is really simple to do with a UI image, but not so easy with a sprite.\n\nI've asked for help on the Unity forums but have received crickets so far, so I\ndecided to go for the simplest approach: an animated spritesheeet.\n\nNow, how to create a spritesheet that displays a 360 degree arc that\nprogressively shrinks to a 0 degree arc? I almost cracked open Photoshop, but I\nhad the idea to generate the spritesheet using an HTML5 canvas and rendering the\nresult out to an image that can be saved.\n\nI ended up implementing the generator on Codepen: \nhttp://codepen.io/chrisparton1991/pen/MpwRmv\n\nIt provides several config parameters, including:\n\n * The diameter of the circle\n * The line width\n * The line colour\n * The number of frames to generate\n * Clockwise / anticlockwise progression\n * Forward / reverse (start circle full or empty)\n\nThere's no fancy UI, the parameters are just sitting at the top of the\nJavascript section. Still, it's pretty easy to tweak and get some satisfying\nresults!","html":"<p>In my spare time after work, I've been working on a game in Unity. Early days yet, but I plan on releasing it on Android and possibly iOS.</p><p>One thing I've been struggling with is creating an animated, circular arc that will be used to indicate the time left available to tap a sprite before it detonates.</p><p>This is really simple to do with a UI image, but not so easy with a sprite.</p><p>I've asked for help on the Unity forums but have received crickets so far, so I decided to go for the simplest approach: an animated spritesheeet.</p><p>Now, how to create a spritesheet that displays a 360 degree arc that progressively shrinks to a 0 degree arc? I almost cracked open Photoshop, but I had the idea to generate the spritesheet using an HTML5 canvas and rendering the result out to an image that can be saved.</p><p>I ended up implementing the generator on Codepen: <a href=\"http://codepen.io/chrisparton1991/pen/MpwRmv\">http://codepen.io/chrisparton1991/pen/MpwRmv</a></p><p>It provides several config parameters, including:</p><ul><li>The diameter of the circle</li><li>The line width</li><li>The line colour</li><li>The number of frames to generate</li><li>Clockwise / anticlockwise progression</li><li>Forward / reverse (start circle full or empty)</li></ul><p>There's no fancy UI, the parameters are just sitting at the top of the Javascript section. Still, it's pretty easy to tweak and get some satisfying results!</p>","url":"https://chrisparton.net/circular-arc-spritesheet-generator/","uuid":"2ccaf2c0-f339-4ecf-b624-899e935774d3","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d60aa2a5655c53c345c801e"}},{"node":{"id":"Ghost__Post__5d60a8f85655c53c345c800a","title":"Christmas Lights 2016","slug":"christmas-lights-2016","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/xmas2016.jpg","excerpt":"I was really proud of myself for getting a display working with LED strips. I failed plenty of times along the way, but I got there in the end. I'm utilising the FastLED library, which does a lot of the heavy lifting for me.","custom_excerpt":"I was really proud of myself for getting a display working with LED strips. I failed plenty of times along the way, but I got there in the end. I'm utilising the FastLED library, which does a lot of the heavy lifting for me.","created_at_pretty":"24 August, 2019","published_at_pretty":"21 December, 2016","updated_at_pretty":"24 August, 2019","created_at":"2019-08-24T13:03:20.000+10:00","published_at":"2016-12-22T03:09:00.000+11:00","updated_at":"2019-08-24T13:08:04.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"christmas lights","slug":"christmas-lights","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"electronics","slug":"electronics","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"software","slug":"software","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"My Christmas light display for 2016 is a definite improvement from what I had in\n2015. I didn't meet my goal of having lights synchronised to music (which I'll\nexplain below), but I succeeded in putting together a reliable animation\nsequence using LED strips powered by an Arduino.\n\nYou can see the video below:\n\nI was looking through an Arduino blog post\n[https://blog.arduino.cc/2016/12/19/12-dazzling-holiday-light-displays-with-arduino/] \ntitled \"12 Dazzling Holiday Light Displays With Arduino\" one morning, and I was\npleasantly surprised to find my lights included in the list!\n\nGoals Accomplished\nI was really proud of myself for getting a display working with LED strips. I\nfailed plenty of times along the way, but I got there in the end. I'm utilising\nthe FastLED [https://fastled.io] library, which does a lot of the heavy lifting\nfor me.\n\nMy wiring is far from perfect, but it's a whole lot more robust than last year's\nefforts. I've learned a lot from this experience, and I think next year's lights\nwill be even more reliable. I've had just one cable-related issue with this\nyear's lights.\n\nGoals Missed\nI really wanted to have full sequencing working for this year's lights. I\nactually made a fair amount of progress down this road. I had my LED sequencing\nsoftware essentially working, and I could drive LED strips just fine. The main\nthing I had to figure out was how to turn those bytes of data into a kickass\nshow.\n\nAfter some experimentation, I started down the path of using one Arduino Due to\ndrive all of my LED strips. The Arduino would read the animation data from an SD\ncard and spit it out as needed. There were some downfalls with this approach,\nbut I didn't even get far enough to consider solving those.\n\nA Problem Of Distance\nMy display is using cheap-and-nasty UCS1903 LED strips. They generally do the\njob fine, but the data signal does not handle long distances very well. Even\nwith optimal placement of my Arduino Due (which would expose it to the\nelements), the distance between the Due and the farthest LED strips was so great\nthat the signal degraded to the point that the LED strips didn't even recognise\nit.\n\nGiving Up\nThis issue stumped me, and extinguished the flame that was my enthusiasm for the\nproject. I didn't touch it for quite some time. Eventually, I decided I still\nwanted something for this Christmas, and that something is what you can see in\nthe video above.\n\nAn Epiphany\nWhilst I was building my compromise project, I came across the wonders of the \nESP8266 [https://www.sparkfun.com/products/13678]. The ESP8266 (more accurately,\nthe ESP8266-based boards such as the ESP-01) are a Wi-Fi enabled microcontroller\nthat pack quite a bit of processing power inside a tiny form factor for a very\nsmall price.\n\nI ordered a few of these from eBay and played around with them. I realised that\nthese chips could make my Christmas light dreams a reality. My sequencing\nsoftware would contain a UDP server that could be polled by 8266 boards to get\nanimation data and feed it to the LED strips. This approach works nicely for a\nfew reasons:\n\n * The 8266 controllers can be situated right next to the LED strips, so long as\n   they're within range of the Wi-Fi signal.\n * The server design means that the 8266 chips don't need to worry about\n   synchronising data, and can tolerate dropped packets and even a network\n   dropout.\n\nThis is what I'm working now, and will (hopefully) be the subject of various\nblog posts throughout the next year.\n\nUntil then, I'm happy with what I've been able to pull off for 2016.","html":"<p>My Christmas light display for 2016 is a definite improvement from what I had in 2015. I didn't meet my goal of having lights synchronised to music (which I'll explain below), but I succeeded in putting together a reliable animation sequence using LED strips powered by an Arduino.</p><p>You can see the video below:</p><!--kg-card-begin: html--><iframe src=\"https://www.youtube.com/embed/jXiJ57UzuP8\" frameborder=\"0\" allowfullscreen></iframe><!--kg-card-end: html--><p>I was looking through an <a href=\"https://blog.arduino.cc/2016/12/19/12-dazzling-holiday-light-displays-with-arduino/\">Arduino blog post</a> titled \"12 Dazzling Holiday Light Displays With Arduino\" one morning, and I was pleasantly surprised to find my lights included in the list!</p><h4 id=\"goals-accomplished\">Goals Accomplished</h4><p>I was really proud of myself for getting a display working with LED strips. I failed plenty of times along the way, but I got there in the end. I'm utilising the <a href=\"https://fastled.io\">FastLED</a> library, which does a lot of the heavy lifting for me.</p><p>My wiring is far from perfect, but it's a whole lot more robust than last year's efforts. I've learned a lot from this experience, and I think next year's lights will be even more reliable. I've had just one cable-related issue with this year's lights.</p><h4 id=\"goals-missed\">Goals Missed</h4><p>I really wanted to have full sequencing working for this year's lights. I actually made a fair amount of progress down this road. I had my LED sequencing software essentially working, and I could drive LED strips just fine. The main thing I had to figure out was how to turn those bytes of data into a kickass show.</p><p>After some experimentation, I started down the path of using one Arduino Due to drive all of my LED strips. The Arduino would read the animation data from an SD card and spit it out as needed. There were some downfalls with this approach, but I didn't even get far enough to consider solving those.</p><h5 id=\"a-problem-of-distance\">A Problem Of Distance</h5><p>My display is using cheap-and-nasty UCS1903 LED strips. They generally do the job fine, but the data signal does not handle long distances very well. Even with optimal placement of my Arduino Due (which would expose it to the elements), the distance between the Due and the farthest LED strips was so great that the signal degraded to the point that the LED strips didn't even recognise it.</p><h5 id=\"giving-up\">Giving Up</h5><p>This issue stumped me, and extinguished the flame that was my enthusiasm for the project. I didn't touch it for quite some time. Eventually, I decided I still wanted <em>something</em> for this Christmas, and that something is what you can see in the video above.</p><h5 id=\"an-epiphany\">An Epiphany</h5><p>Whilst I was building my compromise project, I came across the wonders of the <a href=\"https://www.sparkfun.com/products/13678\">ESP8266</a>. The ESP8266 (more accurately, the ESP8266-based boards such as the ESP-01) are a Wi-Fi enabled microcontroller that pack quite a bit of processing power inside a tiny form factor for a very small price.</p><p>I ordered a few of these from eBay and played around with them. I realised that these chips could make my Christmas light dreams a reality. My sequencing software would contain a UDP server that could be polled by 8266 boards to get animation data and feed it to the LED strips. This approach works nicely for a few reasons:</p><ul><li>The 8266 controllers can be situated right next to the LED strips, so long as they're within range of the Wi-Fi signal.</li><li>The server design means that the 8266 chips don't need to worry about synchronising data, and can tolerate dropped packets and even a network dropout.</li></ul><p>This is what I'm working now, and will (hopefully) be the subject of various blog posts throughout the next year.</p><p>Until then, I'm happy with what I've been able to pull off for 2016.</p>","url":"https://chrisparton.net/christmas-lights-2016/","uuid":"f1a9da9d-800e-4053-a907-7cf123969cff","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d60a8f85655c53c345c800a"}},{"node":{"id":"Ghost__Post__5d5ddfb95655c53c345c7fc7","title":"Wavesurfer.js: MultiCanvas Renderer","slug":"wavesurfer-js-multicanvas-renderer","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/timeline.png","excerpt":"I implemented a MultiCanvas renderer for wavesurfer, which has since been accepted into the repository and released under version 1.1.0.","custom_excerpt":"I implemented a MultiCanvas renderer for wavesurfer, which has since been accepted into the repository and released under version 1.1.0.","created_at_pretty":"22 August, 2019","published_at_pretty":"29 April, 2016","updated_at_pretty":"22 August, 2019","created_at":"2019-08-22T10:20:09.000+10:00","published_at":"2016-04-29T10:11:00.000+10:00","updated_at":"2019-08-22T11:22:17.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"software","slug":"software","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"software","slug":"software","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"This is my first blog post in quite a while. I've been busy working  away on my\nLED animation sequencing software and I'm really pleased with  the results so\nfar (a future blog post will cover the software in  detail).\n\nOne feature of the software is an audio waveform that serves the dual  purpose\nof assisting with animation timings and facilitating navigation  of the\nanimation timeline:\n\nThe Sparkled sequence timeline, including a waveform and synchronised effects\nWavesurfer.js\nTo implement the timeline, I used the excellent wavesurfer.js\n[https://web.archive.org/web/20160726051630/https://github.com/katspaugh/wavesurfer.js]\n.  Out of the box, wavesurfer comes with navigation, audio playback,  waveform\ngeneration, and a bunch of other configurations and events to  hook into.\n\nBrowser woes\nThe one issue I encountered was that large waveforms wouldn't render. After some\nresearch, I found that this was a browser limitation\n[https://web.archive.org/web/20160726051630/http://stackoverflow.com/questions/6081483/maximum-size-of-a-canvas-element]\n.\n\nThe solution\nTo work around this, I implemented\n[https://web.archive.org/web/20160726051630/https://github.com/katspaugh/wavesurfer.js/pull/679] \na MultiCanvas renderer for wavesurfer, which has since been accepted into the\nrepository and released under version 1.1.0.  This was my first ever\ncontribution to an open-source project, so I was  pretty stoked to have it\naccepted and receive feedback from others.\n\nThe MultiCanvas renderer works by stacking multiple adjacent canvases, the width\nof which can be controlled by the maxCanvasWidth wavesurfer property. The\nrenderer itself can by used by setting the renderer wavesurfer property to \n'MultiCanvas'.\n\nChallenges\nWavesurfer supports two modes of rendering: lines (a  traditional waveform) and\nbars (looks like a histogram, using average  frequency values for each bar).\n\nThe below image shows a wavesurfer timeline that uses bars. I've  added a red\nline to indicate a the end of one canvas and the beginning  of the next. Notice\nthat a bar sits right on this line.\n\nSometimes, a bar needs to be rendered across two canvasesThis complicates\nthings, as the two parts of the bar need to be rendered in different canvases.\n\nMy solution for this was to wrap the canvas fillRect calls, and pass them\nthrough the following algorithm:\n\nFor each canvas:\n  Calculate intersection between canvas bounds and waveform bar coordinates\n  If an intersection exists, render the intersection to the canvas\n\nThe implementation for the line waveform was similar. I simply  rendered the\namplitude data for each canvas until I reached the end of  that canvas, then\nfilled out the line and repeated with the next canvas.\n\nAfter my initial implementation, I noticed some thin gaps between the  canvases.\nI solved this by adding a small overlap (1px * device ratio).","html":"<p>This is my first blog post in quite a while. I've been busy working  away on my LED animation sequencing software and I'm really pleased with  the results so far (a future blog post will cover the software in  detail).</p><p>One feature of the software is an audio waveform that serves the dual  purpose of assisting with animation timings and facilitating navigation  of the animation timeline:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/image-32.png\" class=\"kg-image\"><figcaption>The Sparkled sequence timeline, including a waveform and synchronised effects</figcaption></figure><!--kg-card-end: image--><h2 id=\"wavesurfer-js\">Wavesurfer.js</h2><p>To implement the timeline, I used the excellent <a href=\"https://web.archive.org/web/20160726051630/https://github.com/katspaugh/wavesurfer.js\">wavesurfer.js</a>.  Out of the box, wavesurfer comes with navigation, audio playback,  waveform generation, and a bunch of other configurations and events to  hook into.</p><h2 id=\"browser-woes\">Browser woes</h2><p>The one issue I encountered was that large waveforms wouldn't render. After some research, I found that this was a <a href=\"https://web.archive.org/web/20160726051630/http://stackoverflow.com/questions/6081483/maximum-size-of-a-canvas-element\">browser limitation</a>.</p><h2 id=\"the-solution\">The solution</h2><p>To work around this, I <a href=\"https://web.archive.org/web/20160726051630/https://github.com/katspaugh/wavesurfer.js/pull/679\">implemented</a> a <code>MultiCanvas</code> renderer for wavesurfer, which has since been accepted into the repository and released under version <code>1.1.0</code>.  This was my first ever contribution to an open-source project, so I was  pretty stoked to have it accepted and receive feedback from others.</p><p>The MultiCanvas renderer works by stacking multiple adjacent canvases, the width of which can be controlled by the <code>maxCanvasWidth</code> wavesurfer property. The renderer itself can by used by setting the <code>renderer</code> wavesurfer property to <code>'MultiCanvas'</code>.</p><h2 id=\"challenges\">Challenges</h2><p>Wavesurfer supports two modes of rendering: lines (a  traditional waveform) and bars (looks like a histogram, using average  frequency values for each bar).</p><p>The below image shows a wavesurfer timeline that uses bars. I've  added a red line to indicate a the end of one canvas and the beginning  of the next. Notice that a bar sits right on this line.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/timeline-split-1.png\" class=\"kg-image\"><figcaption>Sometimes, a bar needs to be rendered across two canvases</figcaption></figure><!--kg-card-end: image--><p>This complicates things, as the two parts of the bar need to be rendered in different canvases.</p><p>My solution for this was to wrap the canvas <code>fillRect</code> calls, and pass them through the following algorithm:</p><!--kg-card-begin: code--><pre><code>For each canvas:\n  Calculate intersection between canvas bounds and waveform bar coordinates\n  If an intersection exists, render the intersection to the canvas</code></pre><!--kg-card-end: code--><p>The implementation for the line waveform was similar. I simply  rendered the amplitude data for each canvas until I reached the end of  that canvas, then filled out the line and repeated with the next canvas.</p><p>After my initial implementation, I noticed some thin gaps between the  canvases. I solved this by adding a small overlap (<code>1px * device ratio</code>).</p>","url":"https://chrisparton.net/wavesurfer-js-multicanvas-renderer/","uuid":"0c3e9828-1e8c-4037-b56a-1762064c8d0f","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d5ddfb95655c53c345c7fc7"}},{"node":{"id":"Ghost__Post__5d5d37cb5655c53c345c7fa2","title":"A Home-made PCB Workstation On A Budget","slug":"a-home-made-pcb-workstation-on-a-budget","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/my-pcb-workstation.jpg","excerpt":"As I began learning how to solder, I found the third hand quite useful for holding circuit boards and wires. However, as I progressed I grew more and more frustrated with the lack of manoeuvrability the third hand provided.","custom_excerpt":"As I began learning how to solder, I found the third hand quite useful for holding circuit boards and wires. However, as I progressed I grew more and more frustrated with the lack of manoeuvrability the third hand provided.","created_at_pretty":"21 August, 2019","published_at_pretty":"02 March, 2016","updated_at_pretty":"24 August, 2019","created_at":"2019-08-21T22:23:39.000+10:00","published_at":"2016-03-02T11:20:00.000+11:00","updated_at":"2019-08-24T13:39:20.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"electronics","slug":"electronics","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"electronics","slug":"electronics","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Third Hand\nBack before I started tinkering with electronics, I bought a third hand. I\ndidn't have any particular use for it, I just thought it was a nifty thing to\nhave laying around.\n\nAs I began learning how to solder, I found the third hand quite useful for\nholding circuit boards and wires. However, as I progressed I grew more and more\nfrustrated with the lack of manoeuvrability the third hand provided.\n\nIf you haven't seen one of these before, they look like this:\n\n\nA \"third hand\" tool, useful for holding wires and components when solderingThird\nHand++\nThe horizontal bar that connects the arms to the stands limits the usefulness of\nthis tool. I looked online for alternatives, and found an Instructable for a\nhome-made PCB workstation called Third Hand++\n[http://www.instructables.com/id/Third-Hand-A-multi-use-helping-hand-for-electro/]\n:\n\n\nLike a third hand, but more flexibleI liked this setup much more than the\nconventional third hand. Unfortunately, living in Australia, some of these\nmaterials aren't as easy or cheap to come by. Therefore, I decided to make my\nown clone of the Third Hand++, using cheap and/or readily available materials.\n\nMy PCB Workstation\nHere's my workstation, in all its splendour:\n\n\nMy take on the Third Hand++Equipment Required\n * Some kind of cutting device, e.g. circular saw, jigsaw, hacksaw (along with\n   appropriate safety gear!)\n * Hot glue gun (I suspect a silicone gun would work too)\n * Blu-Tack\n * Electric drill\n * 3mm bit\n * 5mm bit\n * 10mm bit\n\nMaterials\nItem Price (AUD) Projecta Alligator Clips - 6 Pack\n[http://www.bunnings.com.au/projecta-alligator-clips-6-pack_p6330687] $2.50\n(Bunnings) CustomWood MDF 900 x 450 x 12mm Standard MDF Panel\n[http://www.bunnings.com.au/customwood-mdf-900-x-450-x-12mm-standard-mdf-panel_p0590092]\n $8.15 (Bunnings) Fiddly Bits 250g Flat Black Spray Paint\n[http://www.bunnings.com.au/fiddly-bits-250g-flat-black-spray-paint_p1580054] \n$2.95 (Bunnings) 20mm x 3mm Steel Screws - Pk.25\n[http://www.jaycar.com.au/Electromechanical-Components/Fasteners-%26-Hardware/Fasteners/20mm-x-3mm-Steel-Screws---Pk-25/p/HP0410]\n $3.50 (Jaycar) 3mm Steel Nuts - Pk.25\n[http://www.jaycar.com.au/Electromechanical-Components/Fasteners-%26-Hardware/Fasteners/3mm-Steel-Nuts---Pk-25/p/HP0425]\n $2.95 (Jaycar) Madico 19mm Clear Round Vinyl Surface Protection Bumper Pads -\n6\nPack\n[http://www.bunnings.com.au/madico-19mm-clear-round-vinyl-surface-protection-bumper-pads-6-pack_p3979349]\n $4.25 (Bunnings) 2 mini tripods (search eBay for \"Mini Octopus Flexible\nTripod\", lowest price first) Approx. $7.50 for 2 tripods (eBay) Total: $31.80\nIt's worth noting that all of the above materials, apart from the tripods and\n(optional) foot stickers, are enough to make at least two of my PCB\nworkstations. If you can find a smaller MDF board and smaller packs of screws\nand nuts, you will be able to significantly reduce the price to create one\nworkstation.\n\nConstruction\nStep 1: Measure and Cut MDF\nYou can make your workstation any size you like, but there are multiple\nvariables to consider, such as:\n\n * The weight of the base\n * Ease of portability\n * The size of the PCBs you want to work on\n * The number of anchor points you want\n * The strength and flexibility of the arms\n\nThe last one is important. If your arms are too long, they won't be able to hold\nmuch weight at all. However, if they are too short, they won't be flexible\nenough to be particularly useful.\n\nI settled on making my board 25x25 cm with 8 anchor points, which I'm happy with\nin retrospect.\n\nSo, the first task is to cut your board to size.\n\nStep 2: Mark the Holes\nI made my four corner anchor point holes 2.5cm from each side of the board. The\nmiddle four anchor points are simply the midpoints between the others.\n\nMy resized MDF board with marked anchor point holes:\n\nThe MDF with holes marked for drillingStep 3: Drill the Holes\nUsing a 3mm drill bit, drill out all of your marked anchor points, the whole way\nthrough.\n\nUsing a 10mm drill bit, drill  shallow holes into the anchor points on the\nunderside of the MDF (it doesn't matter which side, use the rougher/uglier side\nif there is one). The idea here is to provide a hole large enough for the nut to\nfit into so the MDF can sit flush on a surface.\n\n\nThe MDF with holds drilled and countersunkStep 4: Spray Paint\nThis is where you can let your inner artist blossom, or in my case, not. I opted\nfor el cheapo matte black spray paint, which looks awful in the image below.\nThis is largely because I don't have much experience spray painting, and also\nbecause the camera flash throws my inadequacies into sharp relief.\n\nStill, my advice is to make several light passes over one side (and the edges),\nthen flip and repeat once the paint is dry.\n\nStep 5: Attach Bumper Pads\nNothing too exciting here, just flip your MDF over and stick on the rubber/vinyl\nbumper pads. This will prevent your workstation from scratching whatever it's\nsitting on as you move it around.\n\nStep 6: Attach Anchor Points\nYou know those tripods I told you to buy? This is where they start becoming\nuseful. Yank off the three legs, and do what you wish with the holder section.\n\nWith a little force, these segmented legs come apart. Pull out as many\nindividual segments as you have anchor points, and drill a hole down the middle\nof them using a 3mm bit. I used my Dremel drill press\n[https://www.dremel.com/en-au/attachments/pages/productdetail.aspx?pid=220-01],\nbut I imagine it can be done using a regular drill and. Be careful to get the\nhole in the centre, or you'll drill through the side of the anchor point.\n\nIf you've succeeded, you should now be able to attach the anchor points to your\nMDF using the 20mm screws. These screws were just long enough for me to attach\nwith countersunk holes. I had to make a few of my countersinks a bit deeper to\nget them on. I put my screws in so that the nuts are on the underside of the\nboard, and the screwheads are in the top of the anchor points.\n\nOnce your anchor points are attached, you should have something that looks\nroughly like this:\n\nNearly done! Anchor points attached and sprayed matte blackStep 7: Make Tool\nArms\nNow for the (relatively) tricky part: putting the alligator clips into segments\nto form tool arms. Start by figuring out how many clips you think will be\nuseful. If you want lots of clips, you may have to purchase more tripods so you\nhave more arm segments to work with. I decided to make four tool arms.\n\nMy alligator clips have a 5mm diameter at their base, so I drilled a 5mm hole\ninto four segments (I actually used my Dremel cutting bit\n[https://www.dremel.com/en-au/Accessories/Pages/ProductDetail.aspx?pid=561] to\nhack a hole roughly 5mm, but a 5mm hole would be a bit cleaner. You can see my\nrough handiwork below:\n\nA drilled segment, ready for an alligator clipNow, get a blob of Blu-Tack about\nthe size of a grape. Sit the anchor point on it, large side touching the tack.\nPush hard so that the tack fills up most of the large chamber in the segment.\n\nNext, gently push an alligator clip through the top (small) hole, so that it's\nheld in place by the tack. The clip should protrude from the segment just enough\nto allow the clip to be opened and closed without interference.\n\nFinally, use a hot glue gun to pump glue in around the clip shaft, filling up\nthe small chamber. Leave to solidify, then gently remove the tack. The large\nchamber should be mostly devoid of glue, as it needs to be empty to accommodate\nother segments being pushed into it.\n\nIf you want to tidy up the glue, you can carefully cut and scrape away excess\nusing a sharp blade like a craft or X-Acto knife.\n\nThe end result should look something like this:\n\nA segment with an alligator clip attached using hot glueStep 8: Pat Self On Back\nCongratulations, you've created all of the components for your PCB workstation!\nAll you have to do now is grab a chain of segments, plug them into an anchor\npoint, and attach a tool arm to the end of the segment chain.\n\nFuture Enhancements\nThere are a few things that could be done to this workstation to make it even\nniftier, such as:\n\n * An LED tool arm, powered by 2xAA batteries attached to the board.\n * A small fan tool arm, to extract soldering fumes (maybe the fan could be held\n   up like a diamond, with two anchor points for added stability. This would\n   need to be powered from something beefier, like a 12V power supply.\n * Shrink wrapping the alligator clip jaws to help prevent wear and tear to\n   PCBs.\n * Attaching a PCB Holder\n   [http://www.aliexpress.com/price/baku-pcb-holder_price.html] to the base of\n   the workstation.","html":"<h2 id=\"third-hand\">Third Hand</h2><p>Back before I started tinkering with electronics, I bought a third hand. I didn't have any particular use for it, I just thought it was a nifty thing to have laying around.</p><p>As I began learning how to solder, I found the third hand quite useful for holding circuit boards and wires. However, as I progressed I grew more and more frustrated with the lack of manoeuvrability the third hand provided.</p><p>If you haven't seen one of these before, they look like this:<br></p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/image-24.png\" class=\"kg-image\"><figcaption>A \"third hand\" tool, useful for holding wires and components when soldering</figcaption></figure><!--kg-card-end: image--><h2 id=\"third-hand-\">Third Hand++</h2><p>The horizontal bar that connects the arms to the stands limits the usefulness of this tool. I looked online for alternatives, and found an Instructable for a home-made PCB workstation called <a href=\"http://www.instructables.com/id/Third-Hand-A-multi-use-helping-hand-for-electro/\">Third Hand++</a>:<br></p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/image-25.png\" class=\"kg-image\"><figcaption>Like a third hand, but more flexible</figcaption></figure><!--kg-card-end: image--><p>I liked this setup much more than the conventional third hand. Unfortunately, living in Australia, some of these materials aren't as easy or cheap to come by. Therefore, I decided to make my own clone of the Third Hand++, using cheap and/or readily available materials.</p><h2 id=\"my-pcb-workstation\">My PCB Workstation</h2><p>Here's my workstation, in all its splendour:<br></p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/image-26.png\" class=\"kg-image\"><figcaption>My take on the Third Hand++</figcaption></figure><!--kg-card-end: image--><h3 id=\"equipment-required\">Equipment Required</h3><ul><li>Some kind of cutting device, e.g. circular saw, jigsaw, hacksaw (along with appropriate safety gear!)</li><li>Hot glue gun (I suspect a silicone gun would work too)</li><li>Blu-Tack</li><li>Electric drill</li><li>3mm bit</li><li>5mm bit</li><li>10mm bit</li></ul><h3 id=\"materials\">Materials</h3><!--kg-card-begin: html--><table>\n<tr>\n  <th>Item</th>\n  <th>Price (AUD)</th>\n</tr>\n<tr>\n  <td><a href=\"http://www.bunnings.com.au/projecta-alligator-clips-6-pack_p6330687\" target=\"_blank\">Projecta Alligator Clips - 6 Pack</a></td>\n  <td>$2.50 (Bunnings)</td>\n</tr>\n\n<tr>\n  <td><a href=\"http://www.bunnings.com.au/customwood-mdf-900-x-450-x-12mm-standard-mdf-panel_p0590092\" target=\"_blank\">CustomWood MDF 900 x 450 x 12mm Standard MDF Panel</a></td>\n  <td>$8.15 (Bunnings)</td>\n</tr>\n\n<tr>\n  <td><a href=\"http://www.bunnings.com.au/fiddly-bits-250g-flat-black-spray-paint_p1580054\" target=\"_blank\">Fiddly Bits 250g Flat Black Spray Paint</a></td>\n  <td>$2.95 (Bunnings)</td>\n</tr>\n\n<tr>\n  <td><a href=\"http://www.jaycar.com.au/Electromechanical-Components/Fasteners-%26-Hardware/Fasteners/20mm-x-3mm-Steel-Screws---Pk-25/p/HP0410\" target=\"_blank\">20mm x 3mm Steel Screws - Pk.25</a></td>\n  <td>$3.50 (Jaycar)</td>\n</tr>\n\n<tr>\n  <td><a href=\"http://www.jaycar.com.au/Electromechanical-Components/Fasteners-%26-Hardware/Fasteners/3mm-Steel-Nuts---Pk-25/p/HP0425\" target=\"_blank\">3mm Steel Nuts - Pk.25</a></td>\n  <td>$2.95 (Jaycar)</td>\n</tr>\n\n<tr>\n  <td><a href=\"http://www.bunnings.com.au/madico-19mm-clear-round-vinyl-surface-protection-bumper-pads-6-pack_p3979349\" target=\"_blank\">Madico 19mm Clear Round Vinyl Surface Protection Bumper Pads - 6 Pack</a></td>\n  <td>$4.25 (Bunnings)</td>\n</tr>\n\n<tr>\n  <td>2 mini tripods (search eBay for \"Mini Octopus Flexible Tripod\", lowest price first)</td>\n  <td>Approx. $7.50 for 2 tripods (eBay)</td>\n</tr>\n<tr>\n  <th style=\"text-align: right\">Total:</th>\n  <th>$31.80</th>\n</tr>\n</table><!--kg-card-end: html--><p>It's worth noting that all of the above materials, apart from the tripods and (optional) foot stickers, are enough to make at least two of my PCB workstations. If you can find a smaller MDF board and smaller packs of screws and nuts, you will be able to significantly reduce the price to create one workstation.</p><h2 id=\"construction\">Construction</h2><h3 id=\"step-1-measure-and-cut-mdf\">Step 1: Measure and Cut MDF</h3><p>You can make your workstation any size you like, but there are multiple variables to consider, such as:</p><ul><li>The weight of the base</li><li>Ease of portability</li><li>The size of the PCBs you want to work on</li><li>The number of anchor points you want</li><li>The strength and flexibility of the arms</li></ul><p>The last one is important. If your arms are too long, they won't be able to hold much weight at all. However, if they are too short, they won't be flexible enough to be particularly useful.</p><p>I settled on making my board 25x25 cm with 8 anchor points, which I'm happy with in retrospect.</p><p>So, the first task is to cut your board to size.</p><h3 id=\"step-2-mark-the-holes\">Step 2: Mark the Holes</h3><p>I made my four corner anchor point holes 2.5cm from each side of the board. The middle four anchor points are simply the midpoints between the others.</p><p>My resized MDF board with marked anchor point holes:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/image-27.png\" class=\"kg-image\"><figcaption>The MDF with holes marked for drilling</figcaption></figure><!--kg-card-end: image--><h3 id=\"step-3-drill-the-holes\">Step 3: Drill the Holes</h3><p>Using a 3mm drill bit, drill out all of your marked anchor points, the whole way through.</p><p>Using a 10mm drill bit, drill  shallow holes into the anchor points on the underside of the MDF (it doesn't matter which side, use the rougher/uglier side if there is one). The idea here is to provide a hole large enough for the nut to fit into so the MDF can sit flush on a surface.<br></p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/image-28.png\" class=\"kg-image\"><figcaption>The MDF with holds drilled and countersunk</figcaption></figure><!--kg-card-end: image--><h3 id=\"step-4-spray-paint\">Step 4: Spray Paint</h3><p>This is where you can let your inner artist blossom, or in my case, not. I opted for el cheapo matte black spray paint, which looks awful in the image below. This is largely because I don't have much experience spray painting, and also because the camera flash throws my inadequacies into sharp relief.</p><p>Still, my advice is to make several light passes over one side (and the edges), then flip and repeat once the paint is dry.</p><h3 id=\"step-5-attach-bumper-pads\">Step 5: Attach Bumper Pads</h3><p>Nothing too exciting here, just flip your MDF over and stick on the rubber/vinyl bumper pads. This will prevent your workstation from scratching whatever it's sitting on as you move it around.</p><h3 id=\"step-6-attach-anchor-points\">Step 6: Attach Anchor Points</h3><p>You know those tripods I told you to buy? This is where they start becoming useful. Yank off the three legs, and do what you wish with the holder section.</p><p>With a little force, these segmented legs come apart. Pull out as many individual segments as you have anchor points, and drill a hole down the middle of them using a 3mm bit. I used my <a href=\"https://www.dremel.com/en-au/attachments/pages/productdetail.aspx?pid=220-01\">Dremel drill press</a>, but I imagine it can be done using a regular drill and. Be careful to get the hole in the centre, or you'll drill through the side of the anchor point.</p><p>If you've succeeded, you should now be able to attach the anchor points to your MDF using the 20mm screws. These screws were <em>just</em> long enough for me to attach with countersunk holes. I had to make a few of my countersinks a bit deeper to get them on. I put my screws in so that the nuts are on the underside of the board, and the screwheads are in the top of the anchor points.</p><p>Once your anchor points are attached, you should have something that looks roughly like this:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/image-29.png\" class=\"kg-image\"><figcaption>Nearly done! Anchor points attached and sprayed matte black</figcaption></figure><!--kg-card-end: image--><h3 id=\"step-7-make-tool-arms\">Step 7: Make Tool Arms</h3><p>Now for the (relatively) tricky part: putting the alligator clips into segments to form tool arms. Start by figuring out how many clips you think will be useful. If you want lots of clips, you may have to purchase more tripods so you have more arm segments to work with. I decided to make four tool arms.</p><p>My alligator clips have a 5mm diameter at their base, so I drilled a 5mm hole into four segments (I actually used my <a href=\"https://www.dremel.com/en-au/Accessories/Pages/ProductDetail.aspx?pid=561\">Dremel cutting bit</a> to hack a hole roughly 5mm, but a 5mm hole would be a bit cleaner. You can see my rough handiwork below:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/image-30.png\" class=\"kg-image\"><figcaption>A drilled segment, ready for an alligator clip</figcaption></figure><!--kg-card-end: image--><p>Now, get a blob of Blu-Tack about the size of a grape. Sit the anchor point on it, large side touching the tack. Push hard so that the tack fills up most of the large chamber in the segment.</p><p>Next, gently push an alligator clip through the top (small) hole, so that it's held in place by the tack. The clip should protrude from the segment just enough to allow the clip to be opened and closed without interference.</p><p>Finally, use a hot glue gun to pump glue in around the clip shaft, filling up the small chamber. Leave to solidify, then gently remove the tack. The large chamber should be mostly devoid of glue, as it needs to be empty to accommodate other segments being pushed into it.</p><p>If you want to tidy up the glue, you can carefully cut and scrape away excess using a sharp blade like a craft or X-Acto knife.</p><p>The end result should look something like this:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/image-31.png\" class=\"kg-image\"><figcaption>A segment with an alligator clip attached using hot glue</figcaption></figure><!--kg-card-end: image--><h3 id=\"step-8-pat-self-on-back\">Step 8: Pat Self On Back</h3><p>Congratulations, you've created all of the components for your PCB workstation! All you have to do now is grab a chain of segments, plug them into an anchor point, and attach a tool arm to the end of the segment chain.</p><h2 id=\"future-enhancements\">Future Enhancements</h2><p>There are a few things that could be done to this workstation to make it even niftier, such as:</p><ul><li>An LED tool arm, powered by 2xAA batteries attached to the board.</li><li>A small fan tool arm, to extract soldering fumes (maybe the fan could be held up like a diamond, with two anchor points for added stability. This would need to be powered from something beefier, like a 12V power supply.</li><li>Shrink wrapping the alligator clip jaws to help prevent wear and tear to PCBs.</li><li>Attaching a <a href=\"http://www.aliexpress.com/price/baku-pcb-holder_price.html\">PCB Holder</a> to the base of the workstation.</li></ul>","url":"https://chrisparton.net/a-home-made-pcb-workstation-on-a-budget/","uuid":"e4b04dcd-9169-4110-8274-57f84660103b","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d5d37cb5655c53c345c7fa2"}},{"node":{"id":"Ghost__Post__5d5d2f0d5655c53c345c7f7b","title":"Hacking A Remote Control Power Outlet","slug":"hacking-a-remote-control-power-outlet","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/finished-1.jpg","excerpt":"Messing around with 240V wiring isn't something I've ever been particularly eager to do, but I wanted a way to programmatically toggle one or more devices running on mains power.","custom_excerpt":"Messing around with 240V wiring isn't something I've ever been particularly eager to do, but I wanted a way to programmatically toggle one or more devices running on mains power.","created_at_pretty":"21 August, 2019","published_at_pretty":"01 February, 2016","updated_at_pretty":"21 August, 2019","created_at":"2019-08-21T21:46:21.000+10:00","published_at":"2016-02-01T12:16:00.000+11:00","updated_at":"2019-08-21T21:52:08.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"electronics","slug":"electronics","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Messing around with 240V wiring isn't something I've ever been particularly\neager to do, but I wanted a way to programmatically toggle one or more devices\nrunning on mains power.\n\nIf you've seen my 2015 Christmas Light\n[http://chrisparton.net/2016/01/17/christmas-lights-2015/] post, you may have\nnoticed that I have a bunch of traditional Christmas lights that aren't\nprogrammed in any way. I want to keep these for this year's display, but I have\nplans to make a display that synchronises to music. I want to turn the regular\nlights off when this display is active to maximise the impact.\n\nOptions...\nThere are a few ways to achieve this.\n\nPowerSwitch Tail\nPowerSwitch Tail\n[http://www.powerswitchtail.com/Pages/PowerSwitchTail240vackit.aspx] is a range\nof kits that can be put together with two ends of a mains cable of your\nchoosing. The kit has (low voltage) inputs that can be accessed by a\nmicrocontroller to effectively turn the power on and off.\n\nThe problem is, these kits are reasonably pricey and would presumably have to be\nordered in from overseas. Also, there's still a degree of danger in wiring these\nthings up.\n\nRelay\nThe cheaper option would be to simply chop a mains cable in half and stick an\nappropriately rated relay in there. This is even more dangerous, and I prefer my\nhouse when it's not on fire.\n\nRemote Control Switches\nAt the FinoComp office, we've just ordered in some components to create a neat\ncontinuous integration light based on a pedestrian crossing light. We're using\ntwo Z-Wave Switch Plugin\n[http://zwave.com.au/index.php?_a=viewProd&productId=30] units and a RaZberry\n[http://zwave.com.au/index.php?_a=viewProd&productId=97] daughterboard to\ncontrol them.\n\nThis is probably the most reliable and safe method to achieve what I want, but\nat $65 a pop for the switches and $95 for the RaZberry, it's much more costly\nthan what I want.\n\nWhat, Then?\nThere's one final option. Take a cheap, remote control power outlet and hack it\nto support input from a microcontroller. As you may have guessed, this is the\napproach I ended up taking.\n\nI bought an Arlec Remote Control Power Outlet\n[http://www.bunnings.com.au/arlec-remote-control-power-outlet-_p4331239] from\nBunnings for $13. The reason I chose this unit (apart from being cheap), is that\nit has separate \"On\" and \"Off\" buttons, which I assumed meant separate signals\nfor turning the outlet on and off. This is very important, because the\ncommunication is typically unidirectional in these things.\n\nThe outlet, complete with one unmolested controllerIf the same signal is sent to\ntoggle power and there's no way to know the state of the outlet, the state of\nthe outlet may quickly become out of sync with what my software expects. Having\nseparate signals means I can send the same signal a bunch of times to increase\nthe likelihood of it being received.\n\nI cracked open the controller to see what I was dealing with. The quality of the\ncircuit board isn't stellar, but it's good enough for my purposes. The circuit\nitself isn't too complex. Basically a bunch of buttons attached to a Holtek\nHT48R01T3 MCU [http://www.holtek.com/pdf/consumer/4xR01T3v130.pdf], which\ncontains an RF transmitter.\n\nInside the controller there are lots of buttons on a very plain PCBThe underside\nof the PCB is a little more interesting, with a microcontroller and other\ncomponentsNow, there are various blog posts around the place that detail ways to\ncapture IR signals, send them through a PC microphone jack and analyse their\nwaveforms in order to reproduce the signals.\n\nThing is, I'm too lazy to do all that if it can be avoided. I decided to simply\nrewire the \"All On\" and \"All Off\" buttons to allow me to control them from an\nArduino Due.\n\nRewiring The Controller\nI ended up adding four wires in total. Two of these wires were simply to allow\nthe remote to be powered by my Arduino Due instead of using batteries. The\nremote ran from two 1.5V LR44 batteries in series. The Arduino Due works with\n3.3V, which is close enough for me. Of course, I measured the current draw\nthrough the remote before trying this. It was only 8mA, which is a small enough\namount to run through the Arduino without blowing it up.\n\nThe other two wires were added to the positive side of the \"All On\" and \"All\nOff\" buttons, respectively. I worked out which side of the buttons were the\npositive side using the DC voltage mode on my multimeter.\n\nThese pins are connected to the Arduino, and are kept high. When one of the pins\nis brought low, the button is effectively circumvented, completing the circuit\nand allowing the signal to be sent. The nice thing about my approach is that the\nbuttons can still be used, even when the controller is connected to the Arduino.\n\nI finished the job by applying hot glue to prevent the wires from moving about\nand breaking. It's ugly, but I don't need it to be pretty for what I'm doing.\n\nA crude wired connection with some hot glue to keep the wires in placeThe Code\nI've only written a basic test program to ensure the controller can turn the\noutlet on and off. Here it is for completeness:\n\n#define ON_PIN 22\n#define OFF_PIN 23\n#define TIME_BETWEEN_POWER_TOGGLE_MS 5000\n#define MESSAGE_DURATION_MS 500\n\nvoid setup() {\n    pinMode(ON_PIN, OUTPUT);\n    digitalWrite(ON_PIN, HIGH);\n    \n    pinMode(OFF_PIN, OUTPUT);\n    digitalWrite(OFF_PIN, HIGH);\n}\n\nvoid loop() {\n  turnOn();\n  delay(TIME_BETWEEN_POWER_TOGGLE_MS);\n  turnOff();\n  delay(TIME_BETWEEN_POWER_TOGGLE_MS);\n}\n\nvoid turnOn() {\n    sendMessage(ON_PIN);\n}\n\nvoid turnOff() {\n    sendMessage(OFF_PIN);\n}\n\nvoid sendMessage(int pin) {\n  digitalWrite(pin, LOW);\n  delay(MESSAGE_DURATION_MS);\n  digitalWrite(pin, HIGH);\n}\n\n\nThe Finished Product\nHere's a video of the controller in action.","html":"<p>Messing around with 240V wiring isn't something I've ever been particularly eager to do, but I wanted a way to programmatically toggle one or more devices running on mains power.</p><p>If you've seen my <a href=\"http://chrisparton.net/2016/01/17/christmas-lights-2015/\">2015 Christmas Light</a> post, you may have noticed that I have a bunch of traditional Christmas lights that aren't programmed in any way. I want to keep these for this year's display, but I have plans to make a display that synchronises to music. I want to turn the regular lights off when this display is active to maximise the impact.</p><h2 id=\"options-\">Options...</h2><p>There are a few ways to achieve this.</p><h4 id=\"powerswitch-tail\">PowerSwitch Tail</h4><p><a href=\"http://www.powerswitchtail.com/Pages/PowerSwitchTail240vackit.aspx\">PowerSwitch Tail</a> is a range of kits that can be put together with two ends of a mains cable of your choosing. The kit has (low voltage) inputs that can be accessed by a microcontroller to effectively turn the power on and off.</p><p>The problem is, these kits are reasonably pricey and would presumably have to be ordered in from overseas. Also, there's still a degree of danger in wiring these things up.</p><h4 id=\"relay\">Relay</h4><p>The cheaper option would be to simply chop a mains cable in half and stick an appropriately rated relay in there. This is even more dangerous, and I prefer my house when it's not on fire.</p><h4 id=\"remote-control-switches\">Remote Control Switches</h4><p>At the FinoComp office, we've just ordered in some components to create a neat continuous integration light based on a pedestrian crossing light. We're using two <a href=\"http://zwave.com.au/index.php?_a=viewProd&amp;productId=30\">Z-Wave Switch Plugin</a> units and a <a href=\"http://zwave.com.au/index.php?_a=viewProd&amp;productId=97\">RaZberry</a> daughterboard to control them.</p><p>This is probably the most reliable and safe method to achieve what I want, but at $65 a pop for the switches and $95 for the RaZberry, it's much more costly than what I want.</p><h2 id=\"what-then\">What, Then?</h2><p>There's one final option. Take a cheap, remote control power outlet and hack it to support input from a microcontroller. As you may have guessed, this is the approach I ended up taking.</p><p>I bought an <a href=\"http://www.bunnings.com.au/arlec-remote-control-power-outlet-_p4331239\">Arlec Remote Control Power Outlet</a> from Bunnings for $13. The reason I chose this unit (apart from being cheap), is that it has separate \"On\" and \"Off\" buttons, which I assumed meant separate signals for turning the outlet on and off. This is very important, because the communication is typically unidirectional in these things.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/image-20.png\" class=\"kg-image\"><figcaption>The outlet, complete with one unmolested controller</figcaption></figure><!--kg-card-end: image--><p>If the same signal is sent to toggle power and there's no way to know the state of the outlet, the state of the outlet may quickly become out of sync with what my software expects. Having separate signals means I can send the same signal a bunch of times to increase the likelihood of it being received.</p><p>I cracked open the controller to see what I was dealing with. The quality of the circuit board isn't stellar, but it's good enough for my purposes. The circuit itself isn't too complex. Basically a bunch of buttons attached to a <a href=\"http://www.holtek.com/pdf/consumer/4xR01T3v130.pdf\">Holtek HT48R01T3 MCU</a>, which contains an RF transmitter.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/image-21.png\" class=\"kg-image\"><figcaption>Inside the controller there are lots of buttons on a very plain PCB</figcaption></figure><!--kg-card-end: image--><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/image-22.png\" class=\"kg-image\"><figcaption>The underside of the PCB is a little more interesting, with a microcontroller and other components</figcaption></figure><!--kg-card-end: image--><p>Now, there are various blog posts around the place that detail ways to capture IR signals, send them through a PC microphone jack and analyse their waveforms in order to reproduce the signals.</p><p>Thing is, I'm too lazy to do all that if it can be avoided. I decided to simply rewire the \"All On\" and \"All Off\" buttons to allow me to control them from an Arduino Due.</p><h2 id=\"rewiring-the-controller\">Rewiring The Controller</h2><p>I ended up adding four wires in total. Two of these wires were simply to allow the remote to be powered by my Arduino Due instead of using batteries. The remote ran from two 1.5V LR44 batteries in series. The Arduino Due works with 3.3V, which is close enough for me. Of course, I measured the current draw through the remote before trying this. It was only 8mA, which is a small enough amount to run through the Arduino without blowing it up.</p><p>The other two wires were added to the positive side of the \"All On\" and \"All Off\" buttons, respectively. I worked out which side of the buttons were the positive side using the DC voltage mode on my multimeter.</p><p>These pins are connected to the Arduino, and are kept high. When one of the pins is brought low, the button is effectively circumvented, completing the circuit and allowing the signal to be sent. The nice thing about my approach is that the buttons can still be used, even when the controller is connected to the Arduino.</p><p>I finished the job by applying hot glue to prevent the wires from moving about and breaking. It's ugly, but I don't need it to be pretty for what I'm doing.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/image-23.png\" class=\"kg-image\"><figcaption>A crude wired connection with some hot glue to keep the wires in place</figcaption></figure><!--kg-card-end: image--><h2 id=\"the-code\">The Code</h2><p>I've only written a basic test program to ensure the controller can turn the outlet on and off. Here it is for completeness:</p><!--kg-card-begin: code--><pre><code class=\"language-language-cpp\">#define ON_PIN 22\n#define OFF_PIN 23\n#define TIME_BETWEEN_POWER_TOGGLE_MS 5000\n#define MESSAGE_DURATION_MS 500\n\nvoid setup() {\n    pinMode(ON_PIN, OUTPUT);\n    digitalWrite(ON_PIN, HIGH);\n    \n    pinMode(OFF_PIN, OUTPUT);\n    digitalWrite(OFF_PIN, HIGH);\n}\n\nvoid loop() {\n  turnOn();\n  delay(TIME_BETWEEN_POWER_TOGGLE_MS);\n  turnOff();\n  delay(TIME_BETWEEN_POWER_TOGGLE_MS);\n}\n\nvoid turnOn() {\n    sendMessage(ON_PIN);\n}\n\nvoid turnOff() {\n    sendMessage(OFF_PIN);\n}\n\nvoid sendMessage(int pin) {\n  digitalWrite(pin, LOW);\n  delay(MESSAGE_DURATION_MS);\n  digitalWrite(pin, HIGH);\n}\n</code></pre><!--kg-card-end: code--><h2 id=\"the-finished-product\">The Finished Product</h2><p>Here's a video of the controller in action.</p><!--kg-card-begin: html--><iframe src=\"https://www.youtube.com/embed/YIEjqCMYpUQ\" frameborder=\"0\" allowfullscreen></iframe><!--kg-card-end: html-->","url":"https://chrisparton.net/hacking-a-remote-control-power-outlet/","uuid":"74c3902f-4282-4c58-a078-ba832730bd02","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d5d2f0d5655c53c345c7f7b"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"chris","limit":12,"skip":0,"numberOfPages":2,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":2,"previousPagePath":null,"nextPagePath":"/author/chris/page/2/"}}}