{"componentChunkName":"component---src-templates-post-js","path":"/rescuing-empty-json-arrays-in-micronaut/","webpackCompilationHash":"8079d6c4c2e6a69d947d","result":{"data":{"ghostPost":{"id":"Ghost__Post__5dad7c030d051e04f8aebbee","title":"Rescuing empty JSON arrays in Micronaut","slug":"rescuing-empty-json-arrays-in-micronaut","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/10/No-empty-arrays.jpg","excerpt":"The Micronaut rewrite went great and everything's been running smoothly, but I came across a weird issue last night. When I hit an API endpoint that has an empty array, the array is omitted from the JSON response.","custom_excerpt":"The Micronaut rewrite went great and everything's been running smoothly, but I came across a weird issue last night. When I hit an API endpoint that has an empty array, the array is omitted from the JSON response.","created_at_pretty":"21 October, 2019","published_at_pretty":"21 October, 2019","updated_at_pretty":"21 October, 2019","created_at":"2019-10-21T20:36:03.000+11:00","published_at":"2019-10-21T21:05:00.000+11:00","updated_at":"2019-10-21T21:13:24.000+11:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"java","slug":"java","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"java","slug":"java","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"programming","slug":"programming","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"A while back I rewrote the Sparkled [https://sparkled.io] backend with\nMicronaut. The backend was a hodge-podge of libraries that worked well enough,\nbut had some nasty glue code that I wasn't too proud of.\n\nMicronaut [https://micronaut.io] is a Spring-like framework from the creators of\nGrails. Micronaut's raison d'être is to reduce the startup time and memory\nfootprints of microservices by doing some heavy lifting at compile time instead\nof reflecting at runtime.\n\nO [], []! Wherefore art thou []?\nThe Micronaut rewrite went great and everything's been running smoothly, but I\ncame across a weird issue last night. When I hit an API endpoint that has an\nempty array, the array is omitted from the JSON response.\n\nThis isn't ideal. My frontend code is built on the assumption that the array\nwill always be provided, which is reasonable since I have full control over the\nAPI.\n\nI tried breakpointing the endpoint and serialising the object out using a plain\nJackson mapper. Lo and behold, the empty array was there. Time to do some\nJackson API sleuthing...\n\nWhere are the docs at?\nJackson is a great library, but its documentation really isn't great. The \nGitHub\nreadme [https://github.com/FasterXML/jackson] has dozens and dozens of links,\nwith one documentation link tucked away towards the end. Hitting that link takes\nyou to another markdown file with some third-party tutorials and a link to the \njackson-docs [https://github.com/FasterXML/jackson-docs] repository.\n\nFinally I found the Finding Javadoc\n[https://github.com/FasterXML/jackson-docs/wiki/Finding-Javadoc] page, which\ntells me to construct my own URL to get access to the Javadoc for a given\nJackson version. That's fine, but it's quicker for me to just look at the source\nvia IntelliJ.\n\nThe solution\nAfter looking through the docs and going on a couple of wild goose chases, I\nended up setting a breakpoint on the ObjectMapperFactory Jackson class. I hit my\nendpoint and then stepped through the huge objectMapper method.\n\nI stepped through each line, and used the local mapper object to serialise an\nempty array at every step. This revealed the culprit pretty quickly:\n\nobjectMapper.setSerializationInclusion(include);\n\nBy default, Micronaut sets the serializationInclusion value to \nJsonInclude.NON_EMPTY\n[http://fasterxml.github.io/jackson-annotations/javadoc/2.9/com/fasterxml/jackson/annotation/JsonInclude.Include.html#NON_EMPTY]\n, which omits empty objects/arrays from JSON to save space.\n\nTo remedy this, I changed the value to JsonInclude.ALWAYS\n[http://fasterxml.github.io/jackson-annotations/javadoc/2.9/com/fasterxml/jackson/annotation/JsonInclude.Include.html#ALWAYS] \nin application.yml:\n\njackson:\n  serializationInclusion: ALWAYS # Include empty arrays in JSON output","html":"<p>A while back I rewrote the <strong><a href=\"https://sparkled.io\">Sparkled</a> </strong>backend with Micronaut. The backend was a hodge-podge of libraries that worked well enough, but had some nasty glue code that I wasn't too proud of.</p><p><a href=\"https://micronaut.io\">Micronaut</a> is a Spring-like framework from the creators of Grails. Micronaut's raison d'être is to reduce the startup time and memory footprints of microservices by doing some heavy lifting at compile time instead of reflecting at runtime.</p><h3 id=\"o-wherefore-art-thou-\">O <code>[]</code>, <code>[]</code>! Wherefore art thou <code>[]</code>?</h3><p>The Micronaut rewrite went great and everything's been running smoothly, but I came across a weird issue last night. When I hit an API endpoint that has an empty array, the array is omitted from the JSON response.</p><p>This isn't ideal. My frontend code is built on the assumption that the array will always be provided, which is reasonable since I have full control over the API.</p><p>I tried breakpointing the endpoint and serialising the object out using a plain Jackson mapper. Lo and behold, the empty array was there. Time to do some Jackson API sleuthing...</p><h3 id=\"where-are-the-docs-at\">Where are the docs at?</h3><p>Jackson is a great library, but its documentation really isn't great. The <a href=\"https://github.com/FasterXML/jackson\">GitHub readme</a> has dozens and dozens of links, with one documentation link tucked away towards the end. Hitting that link takes you to another markdown file with some third-party tutorials and a link to the <a href=\"https://github.com/FasterXML/jackson-docs\">jackson-docs</a> repository.</p><p>Finally I found the <a href=\"https://github.com/FasterXML/jackson-docs/wiki/Finding-Javadoc\">Finding Javadoc</a> page, which tells me to construct my own URL to get access to the Javadoc for a given Jackson version. That's fine, but it's quicker for me to just look at the source via IntelliJ.</p><h3 id=\"the-solution\">The solution</h3><p>After looking through the docs and going on a couple of wild goose chases, I ended up setting a breakpoint on the <code>ObjectMapperFactory</code> Jackson class. I hit my endpoint and then stepped through the huge <code>objectMapper</code> method.</p><p>I stepped through each line, and used the local mapper object to serialise an empty array at every step. This revealed the culprit pretty quickly:</p><!--kg-card-begin: code--><pre><code class=\"language-java\">objectMapper.setSerializationInclusion(include);</code></pre><!--kg-card-end: code--><p>By default, Micronaut sets the <code>serializationInclusion</code> value to <code><a href=\"http://fasterxml.github.io/jackson-annotations/javadoc/2.9/com/fasterxml/jackson/annotation/JsonInclude.Include.html#NON_EMPTY\">JsonInclude.NON_EMPTY</a></code>, which omits empty objects/arrays from JSON to save space.</p><p>To remedy this, I changed the value to <code><a href=\"http://fasterxml.github.io/jackson-annotations/javadoc/2.9/com/fasterxml/jackson/annotation/JsonInclude.Include.html#ALWAYS\">JsonInclude.ALWAYS</a></code> in <code>application.yml</code>:</p><!--kg-card-begin: code--><pre><code class=\"language-yml\">jackson:\n  serializationInclusion: ALWAYS # Include empty arrays in JSON output</code></pre><!--kg-card-end: code-->","url":"https://chrisparton.net/rescuing-empty-json-arrays-in-micronaut/","uuid":"d1e8d2b3-92e9-41ef-91b0-af0034cdc91c","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dad7c030d051e04f8aebbee"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"rescuing-empty-json-arrays-in-micronaut"}}}