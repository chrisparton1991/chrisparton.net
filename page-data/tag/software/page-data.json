{"componentChunkName":"component---src-templates-tag-js","path":"/tag/software/","webpackCompilationHash":"8079d6c4c2e6a69d947d","result":{"data":{"ghostTag":{"slug":"software","name":"software","visibility":"public","feature_image":null,"description":null,"meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5d60adf85655c53c345c80ad","title":"Finding The Fun In A Boring Task","slug":"finding-the-fun-in-a-boring-task","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/Train-Icons.png","excerpt":"As part of a recent contract job, I was tasked with creating around 150 distinct icons to represent trains in various statuses on an interactive map. This was a task that nobody was keen to pick up, as it involved long hours in an image editor.","custom_excerpt":"As part of a recent contract job, I was tasked with creating around 150 distinct icons to represent trains in various statuses on an interactive map. This was a task that nobody was keen to pick up, as it involved long hours in an image editor.","created_at_pretty":"24 August, 2019","published_at_pretty":"24 September, 2018","updated_at_pretty":"24 August, 2019","created_at":"2019-08-24T13:24:40.000+10:00","published_at":"2018-09-24T12:27:00.000+10:00","updated_at":"2019-08-24T13:25:52.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"java","slug":"java","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"java","slug":"java","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"programming","slug":"programming","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"software","slug":"software","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"As part of a recent contract job, I was tasked with creating around 150 distinct\nicons to represent trains in various statuses on an interactive map. This was a\ntask that nobody was keen to pick up, as it involved long hours in an image\neditor.\n\nI volunteered for the task to free up the full-time devs who have deeper domain\nknowledge of the product and are therefore better suited to some of the more\nnitty-gritty logic problems. I quite enjoy tinkering in image editors, but I\nknew I'd quickly get bored of this particular task regardless.\n\nThe boring task\nAs I settled in and started reading the requirements, I learned that the icons\nare mapped to a 4 character status code, and each of the digits (sometimes a\ncombination) dictate various features of the icon. For instance, a certain\ncharacter in the code being 'E' means a train is late, and a corresponding\nindicator is present in the icon.\n\nArmed with this knowledge, I realised I could turn this menial task into a fun\none by generating the icons on the fly based on a provided status code. At the\nsame time, this approach would likely be faster to implement than manually\ncreating the icons, and make icon changes much easier in the future.\n\nMaking the task fun\nIt proved to be quite simple to implement the icon generation. I couldn't avoid\nan image editor entirely; I had to create the unique components that can make up\nan icon (as transparent PNGs). Fortunately, these were mostly simple shapes.\n\nUltimately, the icon generation code looks something like this:\n\n/**\n * @param iconType the type of icon to generate, which includes width and height in px\n * @param trainCode a 4 character code representing a train's status\n * @return the generated icon\n */\npublic BufferedImage generateIcon(IconType iconType, String trainCode) {\n  List<BufferedImage> iconComponents = Arrays.asList(\n    getBodyBackgroundImage(iconType, trainCode),\n    getBodyImage(iconType, trainCode),\n    // more components...\n  );\n\n  BufferedImage result = new BufferedImage(iconType.getWidth(), iconType.getHeight(), \n      BufferedImage.TYPE_INT_ARGB);\n\n  // Stack the components together to create the final image\n  for (BufferedImage iconComponent : iconComponents) {\n    result.getGraphics().drawImage(image, 0, 0, null);\n  }\n\n  return result;\n}\n\n\nThe takeaway\nThere's caching and some application-specific warts to contend with, but this\nblog post isn't really about the implementation of this feature.\n\nAt its essence, the icon generation was quick to implement and resulted in an\nelegant, fun solution to a boring problem. I put this post together to remind\nmyself (and you, if you're reading!) that the \"fun-ness\" of a task can have very\nreal implications for the quality and functionality of the end result. I've\nfound that I'm vastly more productive when working on something I enjoy, and\nthis solution saved time and delivered a better result in the end.\n\nBy transforming a boring task into a fun one, you can improve your productivity\nand have a good time along the way!","html":"<p>As part of a recent contract job, I was tasked with creating around 150 distinct icons to represent trains in various statuses on an interactive map. This was a task that nobody was keen to pick up, as it involved long hours in an image editor.</p><p>I volunteered for the task to free up the full-time devs who have deeper domain knowledge of the product and are therefore better suited to some of the more nitty-gritty logic problems. I quite enjoy tinkering in image editors, but I knew I'd quickly get bored of this particular task regardless.</p><h3 id=\"the-boring-task\">The boring task</h3><p>As I settled in and started reading the requirements, I learned that the icons are mapped to a 4 character status code, and each of the digits (sometimes a combination) dictate various features of the icon. For instance, a certain character in the code being 'E' means a train is late, and a corresponding indicator is present in the icon.</p><p>Armed with this knowledge, I realised I could turn this menial task into a fun one by generating the icons on the fly based on a provided status code. At the same time, this approach would likely be faster to implement than manually creating the icons, and make icon changes much easier in the future.</p><h3 id=\"making-the-task-fun\">Making the task fun</h3><p>It proved to be quite simple to implement the icon generation. I couldn't avoid an image editor entirely; I had to create the unique components that can make up an icon (as transparent PNGs). Fortunately, these were mostly simple shapes.</p><p>Ultimately, the icon generation code looks something like this:</p><!--kg-card-begin: code--><pre><code class=\"language-lang=java\">/**\n * @param iconType the type of icon to generate, which includes width and height in px\n * @param trainCode a 4 character code representing a train's status\n * @return the generated icon\n */\npublic BufferedImage generateIcon(IconType iconType, String trainCode) {\n  List&lt;BufferedImage&gt; iconComponents = Arrays.asList(\n    getBodyBackgroundImage(iconType, trainCode),\n    getBodyImage(iconType, trainCode),\n    // more components...\n  );\n\n  BufferedImage result = new BufferedImage(iconType.getWidth(), iconType.getHeight(), \n      BufferedImage.TYPE_INT_ARGB);\n\n  // Stack the components together to create the final image\n  for (BufferedImage iconComponent : iconComponents) {\n    result.getGraphics().drawImage(image, 0, 0, null);\n  }\n\n  return result;\n}\n</code></pre><!--kg-card-end: code--><h3 id=\"the-takeaway\">The takeaway</h3><p>There's caching and some application-specific warts to contend with, but this blog post isn't really about the implementation of this feature.</p><p>At its essence, the icon generation was quick to implement and resulted in an elegant, fun solution to a boring problem. I put this post together to remind myself (and you, if you're reading!) that the \"fun-ness\" of a task can have very real implications for the quality and functionality of the end result. I've found that I'm vastly more productive when working on something I enjoy, and this solution saved time and delivered a better result in the end.</p><p>By transforming a boring task into a fun one, you can improve your productivity and have a good time along the way!</p>","url":"https://chrisparton.net/finding-the-fun-in-a-boring-task/","uuid":"3a0abdb5-f33f-4dfa-880a-b5a1f8a03876","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d60adf85655c53c345c80ad"}},{"node":{"id":"Ghost__Post__5d60a8f85655c53c345c800a","title":"Christmas Lights 2016","slug":"christmas-lights-2016","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/xmas2016.jpg","excerpt":"I was really proud of myself for getting a display working with LED strips. I failed plenty of times along the way, but I got there in the end. I'm utilising the FastLED library, which does a lot of the heavy lifting for me.","custom_excerpt":"I was really proud of myself for getting a display working with LED strips. I failed plenty of times along the way, but I got there in the end. I'm utilising the FastLED library, which does a lot of the heavy lifting for me.","created_at_pretty":"24 August, 2019","published_at_pretty":"21 December, 2016","updated_at_pretty":"24 August, 2019","created_at":"2019-08-24T13:03:20.000+10:00","published_at":"2016-12-22T03:09:00.000+11:00","updated_at":"2019-08-24T13:08:04.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"arduino","slug":"arduino","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"christmas lights","slug":"christmas-lights","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"electronics","slug":"electronics","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"software","slug":"software","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"My Christmas light display for 2016 is a definite improvement from what I had in\n2015. I didn't meet my goal of having lights synchronised to music (which I'll\nexplain below), but I succeeded in putting together a reliable animation\nsequence using LED strips powered by an Arduino.\n\nYou can see the video below:\n\nI was looking through an Arduino blog post\n[https://blog.arduino.cc/2016/12/19/12-dazzling-holiday-light-displays-with-arduino/] \ntitled \"12 Dazzling Holiday Light Displays With Arduino\" one morning, and I was\npleasantly surprised to find my lights included in the list!\n\nGoals Accomplished\nI was really proud of myself for getting a display working with LED strips. I\nfailed plenty of times along the way, but I got there in the end. I'm utilising\nthe FastLED [https://fastled.io] library, which does a lot of the heavy lifting\nfor me.\n\nMy wiring is far from perfect, but it's a whole lot more robust than last year's\nefforts. I've learned a lot from this experience, and I think next year's lights\nwill be even more reliable. I've had just one cable-related issue with this\nyear's lights.\n\nGoals Missed\nI really wanted to have full sequencing working for this year's lights. I\nactually made a fair amount of progress down this road. I had my LED sequencing\nsoftware essentially working, and I could drive LED strips just fine. The main\nthing I had to figure out was how to turn those bytes of data into a kickass\nshow.\n\nAfter some experimentation, I started down the path of using one Arduino Due to\ndrive all of my LED strips. The Arduino would read the animation data from an SD\ncard and spit it out as needed. There were some downfalls with this approach,\nbut I didn't even get far enough to consider solving those.\n\nA Problem Of Distance\nMy display is using cheap-and-nasty UCS1903 LED strips. They generally do the\njob fine, but the data signal does not handle long distances very well. Even\nwith optimal placement of my Arduino Due (which would expose it to the\nelements), the distance between the Due and the farthest LED strips was so great\nthat the signal degraded to the point that the LED strips didn't even recognise\nit.\n\nGiving Up\nThis issue stumped me, and extinguished the flame that was my enthusiasm for the\nproject. I didn't touch it for quite some time. Eventually, I decided I still\nwanted something for this Christmas, and that something is what you can see in\nthe video above.\n\nAn Epiphany\nWhilst I was building my compromise project, I came across the wonders of the \nESP8266 [https://www.sparkfun.com/products/13678]. The ESP8266 (more accurately,\nthe ESP8266-based boards such as the ESP-01) are a Wi-Fi enabled microcontroller\nthat pack quite a bit of processing power inside a tiny form factor for a very\nsmall price.\n\nI ordered a few of these from eBay and played around with them. I realised that\nthese chips could make my Christmas light dreams a reality. My sequencing\nsoftware would contain a UDP server that could be polled by 8266 boards to get\nanimation data and feed it to the LED strips. This approach works nicely for a\nfew reasons:\n\n * The 8266 controllers can be situated right next to the LED strips, so long as\n   they're within range of the Wi-Fi signal.\n * The server design means that the 8266 chips don't need to worry about\n   synchronising data, and can tolerate dropped packets and even a network\n   dropout.\n\nThis is what I'm working now, and will (hopefully) be the subject of various\nblog posts throughout the next year.\n\nUntil then, I'm happy with what I've been able to pull off for 2016.","html":"<p>My Christmas light display for 2016 is a definite improvement from what I had in 2015. I didn't meet my goal of having lights synchronised to music (which I'll explain below), but I succeeded in putting together a reliable animation sequence using LED strips powered by an Arduino.</p><p>You can see the video below:</p><!--kg-card-begin: html--><iframe src=\"https://www.youtube.com/embed/jXiJ57UzuP8\" frameborder=\"0\" allowfullscreen></iframe><!--kg-card-end: html--><p>I was looking through an <a href=\"https://blog.arduino.cc/2016/12/19/12-dazzling-holiday-light-displays-with-arduino/\">Arduino blog post</a> titled \"12 Dazzling Holiday Light Displays With Arduino\" one morning, and I was pleasantly surprised to find my lights included in the list!</p><h4 id=\"goals-accomplished\">Goals Accomplished</h4><p>I was really proud of myself for getting a display working with LED strips. I failed plenty of times along the way, but I got there in the end. I'm utilising the <a href=\"https://fastled.io\">FastLED</a> library, which does a lot of the heavy lifting for me.</p><p>My wiring is far from perfect, but it's a whole lot more robust than last year's efforts. I've learned a lot from this experience, and I think next year's lights will be even more reliable. I've had just one cable-related issue with this year's lights.</p><h4 id=\"goals-missed\">Goals Missed</h4><p>I really wanted to have full sequencing working for this year's lights. I actually made a fair amount of progress down this road. I had my LED sequencing software essentially working, and I could drive LED strips just fine. The main thing I had to figure out was how to turn those bytes of data into a kickass show.</p><p>After some experimentation, I started down the path of using one Arduino Due to drive all of my LED strips. The Arduino would read the animation data from an SD card and spit it out as needed. There were some downfalls with this approach, but I didn't even get far enough to consider solving those.</p><h5 id=\"a-problem-of-distance\">A Problem Of Distance</h5><p>My display is using cheap-and-nasty UCS1903 LED strips. They generally do the job fine, but the data signal does not handle long distances very well. Even with optimal placement of my Arduino Due (which would expose it to the elements), the distance between the Due and the farthest LED strips was so great that the signal degraded to the point that the LED strips didn't even recognise it.</p><h5 id=\"giving-up\">Giving Up</h5><p>This issue stumped me, and extinguished the flame that was my enthusiasm for the project. I didn't touch it for quite some time. Eventually, I decided I still wanted <em>something</em> for this Christmas, and that something is what you can see in the video above.</p><h5 id=\"an-epiphany\">An Epiphany</h5><p>Whilst I was building my compromise project, I came across the wonders of the <a href=\"https://www.sparkfun.com/products/13678\">ESP8266</a>. The ESP8266 (more accurately, the ESP8266-based boards such as the ESP-01) are a Wi-Fi enabled microcontroller that pack quite a bit of processing power inside a tiny form factor for a very small price.</p><p>I ordered a few of these from eBay and played around with them. I realised that these chips could make my Christmas light dreams a reality. My sequencing software would contain a UDP server that could be polled by 8266 boards to get animation data and feed it to the LED strips. This approach works nicely for a few reasons:</p><ul><li>The 8266 controllers can be situated right next to the LED strips, so long as they're within range of the Wi-Fi signal.</li><li>The server design means that the 8266 chips don't need to worry about synchronising data, and can tolerate dropped packets and even a network dropout.</li></ul><p>This is what I'm working now, and will (hopefully) be the subject of various blog posts throughout the next year.</p><p>Until then, I'm happy with what I've been able to pull off for 2016.</p>","url":"https://chrisparton.net/christmas-lights-2016/","uuid":"f1a9da9d-800e-4053-a907-7cf123969cff","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d60a8f85655c53c345c800a"}},{"node":{"id":"Ghost__Post__5d5ddfb95655c53c345c7fc7","title":"Wavesurfer.js: MultiCanvas Renderer","slug":"wavesurfer-js-multicanvas-renderer","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/timeline.png","excerpt":"I implemented a MultiCanvas renderer for wavesurfer, which has since been accepted into the repository and released under version 1.1.0.","custom_excerpt":"I implemented a MultiCanvas renderer for wavesurfer, which has since been accepted into the repository and released under version 1.1.0.","created_at_pretty":"22 August, 2019","published_at_pretty":"29 April, 2016","updated_at_pretty":"22 August, 2019","created_at":"2019-08-22T10:20:09.000+10:00","published_at":"2016-04-29T10:11:00.000+10:00","updated_at":"2019-08-22T11:22:17.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"software","slug":"software","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"software","slug":"software","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"This is my first blog post in quite a while. I've been busy working  away on my\nLED animation sequencing software and I'm really pleased with  the results so\nfar (a future blog post will cover the software in  detail).\n\nOne feature of the software is an audio waveform that serves the dual  purpose\nof assisting with animation timings and facilitating navigation  of the\nanimation timeline:\n\nThe Sparkled sequence timeline, including a waveform and synchronised effects\nWavesurfer.js\nTo implement the timeline, I used the excellent wavesurfer.js\n[https://web.archive.org/web/20160726051630/https://github.com/katspaugh/wavesurfer.js]\n.  Out of the box, wavesurfer comes with navigation, audio playback,  waveform\ngeneration, and a bunch of other configurations and events to  hook into.\n\nBrowser woes\nThe one issue I encountered was that large waveforms wouldn't render. After some\nresearch, I found that this was a browser limitation\n[https://web.archive.org/web/20160726051630/http://stackoverflow.com/questions/6081483/maximum-size-of-a-canvas-element]\n.\n\nThe solution\nTo work around this, I implemented\n[https://web.archive.org/web/20160726051630/https://github.com/katspaugh/wavesurfer.js/pull/679] \na MultiCanvas renderer for wavesurfer, which has since been accepted into the\nrepository and released under version 1.1.0.  This was my first ever\ncontribution to an open-source project, so I was  pretty stoked to have it\naccepted and receive feedback from others.\n\nThe MultiCanvas renderer works by stacking multiple adjacent canvases, the width\nof which can be controlled by the maxCanvasWidth wavesurfer property. The\nrenderer itself can by used by setting the renderer wavesurfer property to \n'MultiCanvas'.\n\nChallenges\nWavesurfer supports two modes of rendering: lines (a  traditional waveform) and\nbars (looks like a histogram, using average  frequency values for each bar).\n\nThe below image shows a wavesurfer timeline that uses bars. I've  added a red\nline to indicate a the end of one canvas and the beginning  of the next. Notice\nthat a bar sits right on this line.\n\nSometimes, a bar needs to be rendered across two canvasesThis complicates\nthings, as the two parts of the bar need to be rendered in different canvases.\n\nMy solution for this was to wrap the canvas fillRect calls, and pass them\nthrough the following algorithm:\n\nFor each canvas:\n  Calculate intersection between canvas bounds and waveform bar coordinates\n  If an intersection exists, render the intersection to the canvas\n\nThe implementation for the line waveform was similar. I simply  rendered the\namplitude data for each canvas until I reached the end of  that canvas, then\nfilled out the line and repeated with the next canvas.\n\nAfter my initial implementation, I noticed some thin gaps between the  canvases.\nI solved this by adding a small overlap (1px * device ratio).","html":"<p>This is my first blog post in quite a while. I've been busy working  away on my LED animation sequencing software and I'm really pleased with  the results so far (a future blog post will cover the software in  detail).</p><p>One feature of the software is an audio waveform that serves the dual  purpose of assisting with animation timings and facilitating navigation  of the animation timeline:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/image-32.png\" class=\"kg-image\"><figcaption>The Sparkled sequence timeline, including a waveform and synchronised effects</figcaption></figure><!--kg-card-end: image--><h2 id=\"wavesurfer-js\">Wavesurfer.js</h2><p>To implement the timeline, I used the excellent <a href=\"https://web.archive.org/web/20160726051630/https://github.com/katspaugh/wavesurfer.js\">wavesurfer.js</a>.  Out of the box, wavesurfer comes with navigation, audio playback,  waveform generation, and a bunch of other configurations and events to  hook into.</p><h2 id=\"browser-woes\">Browser woes</h2><p>The one issue I encountered was that large waveforms wouldn't render. After some research, I found that this was a <a href=\"https://web.archive.org/web/20160726051630/http://stackoverflow.com/questions/6081483/maximum-size-of-a-canvas-element\">browser limitation</a>.</p><h2 id=\"the-solution\">The solution</h2><p>To work around this, I <a href=\"https://web.archive.org/web/20160726051630/https://github.com/katspaugh/wavesurfer.js/pull/679\">implemented</a> a <code>MultiCanvas</code> renderer for wavesurfer, which has since been accepted into the repository and released under version <code>1.1.0</code>.  This was my first ever contribution to an open-source project, so I was  pretty stoked to have it accepted and receive feedback from others.</p><p>The MultiCanvas renderer works by stacking multiple adjacent canvases, the width of which can be controlled by the <code>maxCanvasWidth</code> wavesurfer property. The renderer itself can by used by setting the <code>renderer</code> wavesurfer property to <code>'MultiCanvas'</code>.</p><h2 id=\"challenges\">Challenges</h2><p>Wavesurfer supports two modes of rendering: lines (a  traditional waveform) and bars (looks like a histogram, using average  frequency values for each bar).</p><p>The below image shows a wavesurfer timeline that uses bars. I've  added a red line to indicate a the end of one canvas and the beginning  of the next. Notice that a bar sits right on this line.</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/timeline-split-1.png\" class=\"kg-image\"><figcaption>Sometimes, a bar needs to be rendered across two canvases</figcaption></figure><!--kg-card-end: image--><p>This complicates things, as the two parts of the bar need to be rendered in different canvases.</p><p>My solution for this was to wrap the canvas <code>fillRect</code> calls, and pass them through the following algorithm:</p><!--kg-card-begin: code--><pre><code>For each canvas:\n  Calculate intersection between canvas bounds and waveform bar coordinates\n  If an intersection exists, render the intersection to the canvas</code></pre><!--kg-card-end: code--><p>The implementation for the line waveform was similar. I simply  rendered the amplitude data for each canvas until I reached the end of  that canvas, then filled out the line and repeated with the next canvas.</p><p>After my initial implementation, I noticed some thin gaps between the  canvases. I solved this by adding a small overlap (<code>1px * device ratio</code>).</p>","url":"https://chrisparton.net/wavesurfer-js-multicanvas-renderer/","uuid":"0c3e9828-1e8c-4037-b56a-1762064c8d0f","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d5ddfb95655c53c345c7fc7"}},{"node":{"id":"Ghost__Post__5d5cf1135655c53c345c7f15","title":"Christmas Lights 2015: A First Attempt","slug":"christmas-lights-2015-a-first-attempt","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/xmas-lights-2015-cover.jpg","excerpt":"This is what made me want to create my own Christmas light display; I wanted to create something that would give people that same feeling.","custom_excerpt":"This is what made me want to create my own Christmas light display; I wanted to create something that would give people that same feeling.","created_at_pretty":"21 August, 2019","published_at_pretty":"16 January, 2016","updated_at_pretty":"21 August, 2019","created_at":"2019-08-21T17:21:55.000+10:00","published_at":"2016-01-17T09:28:00.000+11:00","updated_at":"2019-08-21T21:53:34.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"christmas lights","slug":"christmas-lights","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"christmas lights","slug":"christmas-lights","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"electronics","slug":"electronics","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"raspberry pi","slug":"raspberry-pi","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"software","slug":"software","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"I've always liked Christmas lights, but my house rarely saw itself decorated\nbeyond the bare minimum of the Christmas tree during the festive season. Maybe a\nfew silver baubles and a star on the tree, but never more than that.\n\nIn December 2014, my girlfriend and I went Christmas light hunting and wound up\nat Edgewood Estate [http://jamiespages.net/photo-galleries/715-2/], where\neverybody seems to get into the spirit of Christmas. At the top of the estate,\nalmost every single home was adorned with beautiful lights.\n\nWhat struck me about this place was the atmosphere. So many families were out\nenjoying the lights with their children, and everybody was some combination of\nhappy, excited and awestruck.\n\nThis is what made me want to create my own Christmas light display; I wanted to\ncreate something that would give people that same feeling. I also wanted to\ncreate something different, using my skills as a software engineer and, more\nrecently, as an electronics hobbyist.\n\nThe Lights\nHere is my first Christmas light attempt (Apologies for the poor audio... and\nvideo... and random talking towards the end):\n\nI was planning on blogging about the process I went through to build my lights,\nbut the reality is that I did it all in less than a month, learning as I went.\nThe result of such rushed work was a functional but hacky piece of work. As\nsuch, I'll stick to describing the project at a higher level.\n\nFeatures\nThe Raspberry Pi controls the lights wrapped around each pillar of the house.\nThe other lights are not interactive in any way and have nothing to do with the\nPi.\n\nThere are three main features to the pillars:\n\n 1. Instrument playing\n 2. Song playing\n 3. \"Screensaver\" effects\n\nThe first two features are interactive, which isn't something I've seen a lot\nof, even in online videos. There are plenty of insane Christmas light displays (\nExhibit A [https://www.youtube.com/watch?v=8zyoMQ4Khts], Exhibit B\n[https://www.youtube.com/watch?v=90oZ52M4IC0], Exhibit C\n[https://www.youtube.com/watch?v=mejJRgHpdyE]), but for the most part they lack\nthe ability to be influenced by spectators.\n\nInstrument and Song Playing\nThe interactive elements of my Christmas lights are controlled by a little\nbutton box I made by etching my own PCB and mounting it in a box:\n\nButton boxThe coloured buttons are used to control the four house pillars. When\na button is pressed, the corresponding pillar lights up and a musical sound is\nplayed. The pitch of the instrument increases from left to right. The white\nbutton changes the instrument between piano and violin.\n\nThe black button plays the chorus of one of four Christmas songs, and\nilluminates the pillars in sync with the music. This required using Audacity to\nfind the timings of the notes, and mapping the notes to sheet music found\nonline.\n\nThe screensaver effect is simply a series of alternating patters that are\nilluminated on the pillars when a button hasn't been pressed for a while.\n\nHow It Works\nThe Christmas lights on the four pillars are regular solar-powered LED strings.\nI cut the wires between the solar panel and the lights, and essentially ran each\nset of lights through a transistor. The transistors were then controlled using\nthe GPIO pins on a Raspberry Pi using Pi4J [http://pi4j.com/]:\n\nButtons and lights wired up to a Raspberry PiWhat's Next?\nI've already started working on my Christmas lights for 2016, and I plan to keep\nthe blog updated as I progress. So, stay tuned!","html":"<p>I've always liked Christmas lights, but my house rarely saw itself decorated beyond the bare minimum of the Christmas tree during the festive season. Maybe a few silver baubles and a star on the tree, but never more than that.</p><p>In December 2014, my girlfriend and I went Christmas light hunting and wound up at <a href=\"http://jamiespages.net/photo-galleries/715-2/\">Edgewood Estate</a>, where everybody seems to get into the spirit of Christmas. At the top of the estate, almost every single home was adorned with beautiful lights.</p><p>What struck me about this place was the atmosphere. So many families were out enjoying the lights with their children, and everybody was some combination of happy, excited and awestruck.</p><p>This is what made me want to create my own Christmas light display; I wanted to create something that would give people that same feeling. I also wanted to create something different, using my skills as a software engineer and, more recently, as an electronics hobbyist.</p><h2 id=\"the-lights\">The Lights</h2><p>Here is my first Christmas light attempt (Apologies for the poor audio... and video... and random talking towards the end):</p><!--kg-card-begin: html-->  <iframe src=\"https://www.youtube.com/embed/YddNPKLF7d0\" frameborder=\"0\" allowfullscreen></iframe><!--kg-card-end: html--><p>I was planning on blogging about the process I went through to build my lights, but the reality is that I did it all in less than a month, learning as I went. The result of such rushed work was a functional but hacky piece of work. As such, I'll stick to describing the project at a higher level.</p><h2 id=\"features\">Features</h2><p>The Raspberry Pi controls the lights wrapped around each pillar of the house. The other lights are not interactive in any way and have nothing to do with the Pi.</p><p>There are three main features to the pillars:</p><ol><li>Instrument playing</li><li>Song playing</li><li>\"Screensaver\" effects</li></ol><p>The first two features are interactive, which isn't something I've seen a lot of, even in online videos. There are plenty of insane Christmas light displays (<a href=\"https://www.youtube.com/watch?v=8zyoMQ4Khts\">Exhibit A</a>, <a href=\"https://www.youtube.com/watch?v=90oZ52M4IC0\">Exhibit B</a>, <a href=\"https://www.youtube.com/watch?v=mejJRgHpdyE\">Exhibit C</a>), but for the most part they lack the ability to be influenced by spectators.</p><h4 id=\"instrument-and-song-playing\">Instrument and Song Playing</h4><p>The interactive elements of my Christmas lights are controlled by a little button box I made by etching my own PCB and mounting it in a box:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/image-13.png\" class=\"kg-image\"><figcaption>Button box</figcaption></figure><!--kg-card-end: image--><p>The coloured buttons are used to control the four house pillars. When a button is pressed, the corresponding pillar lights up and a musical sound is played. The pitch of the instrument increases from left to right. The white button changes the instrument between piano and violin.</p><p>The black button plays the chorus of one of four Christmas songs, and illuminates the pillars in sync with the music. This required using Audacity to find the timings of the notes, and mapping the notes to sheet music found online.</p><p>The screensaver effect is simply a series of alternating patters that are illuminated on the pillars when a button hasn't been pressed for a while.</p><h2 id=\"how-it-works\">How It Works</h2><p>The Christmas lights on the four pillars are regular solar-powered LED strings. I cut the wires between the solar panel and the lights, and essentially ran each set of lights through a transistor. The transistors were then controlled using the GPIO pins on a Raspberry Pi using <a href=\"http://pi4j.com/\">Pi4J</a>:</p><!--kg-card-begin: image--><figure class=\"kg-card kg-image-card kg-card-hascaption\"><img src=\"https://chrisparton.net/content/images/2019/08/image-14.png\" class=\"kg-image\"><figcaption>Buttons and lights wired up to a Raspberry Pi</figcaption></figure><!--kg-card-end: image--><h2 id=\"what-s-next\">What's Next?</h2><p>I've already started working on my Christmas lights for 2016, and I plan to keep the blog updated as I progress. So, stay tuned!</p>","url":"https://chrisparton.net/christmas-lights-2015-a-first-attempt/","uuid":"2aac46b1-1fc1-4944-9443-d84306049c3c","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d5cf1135655c53c345c7f15"}},{"node":{"id":"Ghost__Post__5d5ce55d5655c53c345c7e83","title":"A Blog Is Born","slug":"a-blog-is-born","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/Profile-Photo-1.jpg","excerpt":"Hi there, nice to meet you. This is my first ever blog post.","custom_excerpt":"Hi there, nice to meet you. This is my first ever blog post.","created_at_pretty":"21 August, 2019","published_at_pretty":"29 September, 2015","updated_at_pretty":"21 August, 2019","created_at":"2019-08-21T16:31:57.000+10:00","published_at":"2015-09-29T12:29:00.000+10:00","updated_at":"2019-08-21T21:35:59.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"electronics","slug":"electronics","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"electronics","slug":"electronics","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"software","slug":"software","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"Hi there, nice to meet you.\n\nThis is my first ever blog post. I've been meaning to do this for quite some\ntime, but I've struggled with motivation and ideas for content.\n\nI'm a software engineer by trade, but recently I've been getting into\nelectronics. I picked up the Sparkfun Inventor's Kit\n[https://www.sparkfun.com/products/12060] and now I'm hooked. I'm kind of\nexploiting my newfound motivation for Making to kickstart my blog.\n\nMy plans for the blog aren't set in stone yet, but content will include:\n\n * Electronics projects, which will hopefully increase in complexity and\n   interestingness (that's a real word, I googled it) as I learn more.\n * Programming tidbits and grievances.\n * Reviews of software and tools that I use for the above.\n\nAnyway, this is it for now. I already have something to write about for my first\nelectronics blog post, so exciting times ahead!\n\nCheers,\nChris","html":"<p>Hi there, nice to meet you.</p><p>This is my first ever blog post. I've been meaning to do this for quite some time, but I've struggled with motivation and ideas for content.</p><p>I'm a software engineer by trade, but recently I've been getting into electronics. I picked up the <a href=\"https://www.sparkfun.com/products/12060\">Sparkfun Inventor's Kit</a> and now I'm hooked. I'm kind of exploiting my newfound motivation for Making to kickstart my blog.</p><p>My plans for the blog aren't set in stone yet, but content will include:</p><ul><li>Electronics projects, which will hopefully increase in complexity and interestingness (that's a real word, I googled it) as I learn more.</li><li>Programming tidbits and grievances.</li><li>Reviews of software and tools that I use for the above.</li></ul><p>Anyway, this is it for now. I already have something to write about for my first electronics blog post, so exciting times ahead!</p><p>Cheers,<br>Chris</p>","url":"https://chrisparton.net/a-blog-is-born/","uuid":"98ca1279-2447-43bb-ac0d-be07bef9bd9e","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d5ce55d5655c53c345c7e83"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"software","limit":12,"skip":0,"numberOfPages":1,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":null,"previousPagePath":null,"nextPagePath":null}}}