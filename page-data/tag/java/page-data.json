{"componentChunkName":"component---src-templates-tag-js","path":"/tag/java/","webpackCompilationHash":"8079d6c4c2e6a69d947d","result":{"data":{"ghostTag":{"slug":"java","name":"java","visibility":"public","feature_image":null,"description":null,"meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5d60adf85655c53c345c80ad","title":"Finding The Fun In A Boring Task","slug":"finding-the-fun-in-a-boring-task","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/Train-Icons.png","excerpt":"As part of a recent contract job, I was tasked with creating around 150 distinct icons to represent trains in various statuses on an interactive map. This was a task that nobody was keen to pick up, as it involved long hours in an image editor.","custom_excerpt":"As part of a recent contract job, I was tasked with creating around 150 distinct icons to represent trains in various statuses on an interactive map. This was a task that nobody was keen to pick up, as it involved long hours in an image editor.","created_at_pretty":"24 August, 2019","published_at_pretty":"24 September, 2018","updated_at_pretty":"24 August, 2019","created_at":"2019-08-24T13:24:40.000+10:00","published_at":"2018-09-24T12:27:00.000+10:00","updated_at":"2019-08-24T13:25:52.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"java","slug":"java","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"java","slug":"java","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"programming","slug":"programming","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"software","slug":"software","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"As part of a recent contract job, I was tasked with creating around 150 distinct\nicons to represent trains in various statuses on an interactive map. This was a\ntask that nobody was keen to pick up, as it involved long hours in an image\neditor.\n\nI volunteered for the task to free up the full-time devs who have deeper domain\nknowledge of the product and are therefore better suited to some of the more\nnitty-gritty logic problems. I quite enjoy tinkering in image editors, but I\nknew I'd quickly get bored of this particular task regardless.\n\nThe boring task\nAs I settled in and started reading the requirements, I learned that the icons\nare mapped to a 4 character status code, and each of the digits (sometimes a\ncombination) dictate various features of the icon. For instance, a certain\ncharacter in the code being 'E' means a train is late, and a corresponding\nindicator is present in the icon.\n\nArmed with this knowledge, I realised I could turn this menial task into a fun\none by generating the icons on the fly based on a provided status code. At the\nsame time, this approach would likely be faster to implement than manually\ncreating the icons, and make icon changes much easier in the future.\n\nMaking the task fun\nIt proved to be quite simple to implement the icon generation. I couldn't avoid\nan image editor entirely; I had to create the unique components that can make up\nan icon (as transparent PNGs). Fortunately, these were mostly simple shapes.\n\nUltimately, the icon generation code looks something like this:\n\n/**\n * @param iconType the type of icon to generate, which includes width and height in px\n * @param trainCode a 4 character code representing a train's status\n * @return the generated icon\n */\npublic BufferedImage generateIcon(IconType iconType, String trainCode) {\n  List<BufferedImage> iconComponents = Arrays.asList(\n    getBodyBackgroundImage(iconType, trainCode),\n    getBodyImage(iconType, trainCode),\n    // more components...\n  );\n\n  BufferedImage result = new BufferedImage(iconType.getWidth(), iconType.getHeight(), \n      BufferedImage.TYPE_INT_ARGB);\n\n  // Stack the components together to create the final image\n  for (BufferedImage iconComponent : iconComponents) {\n    result.getGraphics().drawImage(image, 0, 0, null);\n  }\n\n  return result;\n}\n\n\nThe takeaway\nThere's caching and some application-specific warts to contend with, but this\nblog post isn't really about the implementation of this feature.\n\nAt its essence, the icon generation was quick to implement and resulted in an\nelegant, fun solution to a boring problem. I put this post together to remind\nmyself (and you, if you're reading!) that the \"fun-ness\" of a task can have very\nreal implications for the quality and functionality of the end result. I've\nfound that I'm vastly more productive when working on something I enjoy, and\nthis solution saved time and delivered a better result in the end.\n\nBy transforming a boring task into a fun one, you can improve your productivity\nand have a good time along the way!","html":"<p>As part of a recent contract job, I was tasked with creating around 150 distinct icons to represent trains in various statuses on an interactive map. This was a task that nobody was keen to pick up, as it involved long hours in an image editor.</p><p>I volunteered for the task to free up the full-time devs who have deeper domain knowledge of the product and are therefore better suited to some of the more nitty-gritty logic problems. I quite enjoy tinkering in image editors, but I knew I'd quickly get bored of this particular task regardless.</p><h3 id=\"the-boring-task\">The boring task</h3><p>As I settled in and started reading the requirements, I learned that the icons are mapped to a 4 character status code, and each of the digits (sometimes a combination) dictate various features of the icon. For instance, a certain character in the code being 'E' means a train is late, and a corresponding indicator is present in the icon.</p><p>Armed with this knowledge, I realised I could turn this menial task into a fun one by generating the icons on the fly based on a provided status code. At the same time, this approach would likely be faster to implement than manually creating the icons, and make icon changes much easier in the future.</p><h3 id=\"making-the-task-fun\">Making the task fun</h3><p>It proved to be quite simple to implement the icon generation. I couldn't avoid an image editor entirely; I had to create the unique components that can make up an icon (as transparent PNGs). Fortunately, these were mostly simple shapes.</p><p>Ultimately, the icon generation code looks something like this:</p><!--kg-card-begin: code--><pre><code class=\"language-lang=java\">/**\n * @param iconType the type of icon to generate, which includes width and height in px\n * @param trainCode a 4 character code representing a train's status\n * @return the generated icon\n */\npublic BufferedImage generateIcon(IconType iconType, String trainCode) {\n  List&lt;BufferedImage&gt; iconComponents = Arrays.asList(\n    getBodyBackgroundImage(iconType, trainCode),\n    getBodyImage(iconType, trainCode),\n    // more components...\n  );\n\n  BufferedImage result = new BufferedImage(iconType.getWidth(), iconType.getHeight(), \n      BufferedImage.TYPE_INT_ARGB);\n\n  // Stack the components together to create the final image\n  for (BufferedImage iconComponent : iconComponents) {\n    result.getGraphics().drawImage(image, 0, 0, null);\n  }\n\n  return result;\n}\n</code></pre><!--kg-card-end: code--><h3 id=\"the-takeaway\">The takeaway</h3><p>There's caching and some application-specific warts to contend with, but this blog post isn't really about the implementation of this feature.</p><p>At its essence, the icon generation was quick to implement and resulted in an elegant, fun solution to a boring problem. I put this post together to remind myself (and you, if you're reading!) that the \"fun-ness\" of a task can have very real implications for the quality and functionality of the end result. I've found that I'm vastly more productive when working on something I enjoy, and this solution saved time and delivered a better result in the end.</p><p>By transforming a boring task into a fun one, you can improve your productivity and have a good time along the way!</p>","url":"https://chrisparton.net/finding-the-fun-in-a-boring-task/","uuid":"3a0abdb5-f33f-4dfa-880a-b5a1f8a03876","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d60adf85655c53c345c80ad"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"java","limit":12,"skip":0,"numberOfPages":1,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":null,"previousPagePath":null,"nextPagePath":null}}}