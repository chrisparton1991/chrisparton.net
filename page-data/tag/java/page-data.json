{"componentChunkName":"component---src-templates-tag-js","path":"/tag/java/","webpackCompilationHash":"8079d6c4c2e6a69d947d","result":{"data":{"ghostTag":{"slug":"java","name":"java","visibility":"public","feature_image":null,"description":null,"meta_title":null,"meta_description":null},"allGhostPost":{"edges":[{"node":{"id":"Ghost__Post__5dad7c030d051e04f8aebbee","title":"Rescuing empty JSON arrays in Micronaut","slug":"rescuing-empty-json-arrays-in-micronaut","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/10/No-empty-arrays.jpg","excerpt":"The Micronaut rewrite went great and everything's been running smoothly, but I came across a weird issue last night. When I hit an API endpoint that has an empty array, the array is omitted from the JSON response.","custom_excerpt":"The Micronaut rewrite went great and everything's been running smoothly, but I came across a weird issue last night. When I hit an API endpoint that has an empty array, the array is omitted from the JSON response.","created_at_pretty":"21 October, 2019","published_at_pretty":"21 October, 2019","updated_at_pretty":"21 October, 2019","created_at":"2019-10-21T20:36:03.000+11:00","published_at":"2019-10-21T21:05:00.000+11:00","updated_at":"2019-10-21T21:13:24.000+11:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"java","slug":"java","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"java","slug":"java","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"programming","slug":"programming","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"A while back I rewrote the Sparkled [https://sparkled.io] backend with\nMicronaut. The backend was a hodge-podge of libraries that worked well enough,\nbut had some nasty glue code that I wasn't too proud of.\n\nMicronaut [https://micronaut.io] is a Spring-like framework from the creators of\nGrails. Micronaut's raison d'être is to reduce the startup time and memory\nfootprints of microservices by doing some heavy lifting at compile time instead\nof reflecting at runtime.\n\nO [], []! Wherefore art thou []?\nThe Micronaut rewrite went great and everything's been running smoothly, but I\ncame across a weird issue last night. When I hit an API endpoint that has an\nempty array, the array is omitted from the JSON response.\n\nThis isn't ideal. My frontend code is built on the assumption that the array\nwill always be provided, which is reasonable since I have full control over the\nAPI.\n\nI tried breakpointing the endpoint and serialising the object out using a plain\nJackson mapper. Lo and behold, the empty array was there. Time to do some\nJackson API sleuthing...\n\nWhere are the docs at?\nJackson is a great library, but its documentation really isn't great. The \nGitHub\nreadme [https://github.com/FasterXML/jackson] has dozens and dozens of links,\nwith one documentation link tucked away towards the end. Hitting that link takes\nyou to another markdown file with some third-party tutorials and a link to the \njackson-docs [https://github.com/FasterXML/jackson-docs] repository.\n\nFinally I found the Finding Javadoc\n[https://github.com/FasterXML/jackson-docs/wiki/Finding-Javadoc] page, which\ntells me to construct my own URL to get access to the Javadoc for a given\nJackson version. That's fine, but it's quicker for me to just look at the source\nvia IntelliJ.\n\nThe solution\nAfter looking through the docs and going on a couple of wild goose chases, I\nended up setting a breakpoint on the ObjectMapperFactory Jackson class. I hit my\nendpoint and then stepped through the huge objectMapper method.\n\nI stepped through each line, and used the local mapper object to serialise an\nempty array at every step. This revealed the culprit pretty quickly:\n\nobjectMapper.setSerializationInclusion(include);\n\nBy default, Micronaut sets the serializationInclusion value to \nJsonInclude.NON_EMPTY\n[http://fasterxml.github.io/jackson-annotations/javadoc/2.9/com/fasterxml/jackson/annotation/JsonInclude.Include.html#NON_EMPTY]\n, which omits empty objects/arrays from JSON to save space.\n\nTo remedy this, I changed the value to JsonInclude.ALWAYS\n[http://fasterxml.github.io/jackson-annotations/javadoc/2.9/com/fasterxml/jackson/annotation/JsonInclude.Include.html#ALWAYS] \nin application.yml:\n\njackson:\n  serializationInclusion: ALWAYS # Include empty arrays in JSON output","html":"<p>A while back I rewrote the <strong><a href=\"https://sparkled.io\">Sparkled</a> </strong>backend with Micronaut. The backend was a hodge-podge of libraries that worked well enough, but had some nasty glue code that I wasn't too proud of.</p><p><a href=\"https://micronaut.io\">Micronaut</a> is a Spring-like framework from the creators of Grails. Micronaut's raison d'être is to reduce the startup time and memory footprints of microservices by doing some heavy lifting at compile time instead of reflecting at runtime.</p><h3 id=\"o-wherefore-art-thou-\">O <code>[]</code>, <code>[]</code>! Wherefore art thou <code>[]</code>?</h3><p>The Micronaut rewrite went great and everything's been running smoothly, but I came across a weird issue last night. When I hit an API endpoint that has an empty array, the array is omitted from the JSON response.</p><p>This isn't ideal. My frontend code is built on the assumption that the array will always be provided, which is reasonable since I have full control over the API.</p><p>I tried breakpointing the endpoint and serialising the object out using a plain Jackson mapper. Lo and behold, the empty array was there. Time to do some Jackson API sleuthing...</p><h3 id=\"where-are-the-docs-at\">Where are the docs at?</h3><p>Jackson is a great library, but its documentation really isn't great. The <a href=\"https://github.com/FasterXML/jackson\">GitHub readme</a> has dozens and dozens of links, with one documentation link tucked away towards the end. Hitting that link takes you to another markdown file with some third-party tutorials and a link to the <a href=\"https://github.com/FasterXML/jackson-docs\">jackson-docs</a> repository.</p><p>Finally I found the <a href=\"https://github.com/FasterXML/jackson-docs/wiki/Finding-Javadoc\">Finding Javadoc</a> page, which tells me to construct my own URL to get access to the Javadoc for a given Jackson version. That's fine, but it's quicker for me to just look at the source via IntelliJ.</p><h3 id=\"the-solution\">The solution</h3><p>After looking through the docs and going on a couple of wild goose chases, I ended up setting a breakpoint on the <code>ObjectMapperFactory</code> Jackson class. I hit my endpoint and then stepped through the huge <code>objectMapper</code> method.</p><p>I stepped through each line, and used the local mapper object to serialise an empty array at every step. This revealed the culprit pretty quickly:</p><!--kg-card-begin: code--><pre><code class=\"language-java\">objectMapper.setSerializationInclusion(include);</code></pre><!--kg-card-end: code--><p>By default, Micronaut sets the <code>serializationInclusion</code> value to <code><a href=\"http://fasterxml.github.io/jackson-annotations/javadoc/2.9/com/fasterxml/jackson/annotation/JsonInclude.Include.html#NON_EMPTY\">JsonInclude.NON_EMPTY</a></code>, which omits empty objects/arrays from JSON to save space.</p><p>To remedy this, I changed the value to <code><a href=\"http://fasterxml.github.io/jackson-annotations/javadoc/2.9/com/fasterxml/jackson/annotation/JsonInclude.Include.html#ALWAYS\">JsonInclude.ALWAYS</a></code> in <code>application.yml</code>:</p><!--kg-card-begin: code--><pre><code class=\"language-yml\">jackson:\n  serializationInclusion: ALWAYS # Include empty arrays in JSON output</code></pre><!--kg-card-end: code-->","url":"https://chrisparton.net/rescuing-empty-json-arrays-in-micronaut/","uuid":"d1e8d2b3-92e9-41ef-91b0-af0034cdc91c","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5dad7c030d051e04f8aebbee"}},{"node":{"id":"Ghost__Post__5d60adf85655c53c345c80ad","title":"Finding The Fun In A Boring Task","slug":"finding-the-fun-in-a-boring-task","featured":false,"feature_image":"https://chrisparton.net/content/images/2019/08/Train-Icons.png","excerpt":"As part of a recent contract job, I was tasked with creating around 150 distinct icons to represent trains in various statuses on an interactive map. This was a task that nobody was keen to pick up, as it involved long hours in an image editor.","custom_excerpt":"As part of a recent contract job, I was tasked with creating around 150 distinct icons to represent trains in various statuses on an interactive map. This was a task that nobody was keen to pick up, as it involved long hours in an image editor.","created_at_pretty":"24 August, 2019","published_at_pretty":"24 September, 2018","updated_at_pretty":"24 August, 2019","created_at":"2019-08-24T13:24:40.000+10:00","published_at":"2018-09-24T12:27:00.000+10:00","updated_at":"2019-08-24T13:25:52.000+10:00","meta_title":null,"meta_description":null,"og_description":null,"og_image":null,"og_title":null,"twitter_description":null,"twitter_image":null,"twitter_title":null,"authors":[{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null}],"primary_author":{"name":"Chris Parton","slug":"chris","bio":null,"profile_image":"//www.gravatar.com/avatar/6b7434bbe636033b9d4be00df745f7f1?s=250&d=mm&r=x","twitter":"@chrislights_","facebook":null,"website":null},"primary_tag":{"name":"java","slug":"java","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},"tags":[{"name":"java","slug":"java","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"programming","slug":"programming","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"},{"name":"software","slug":"software","description":null,"feature_image":null,"meta_description":null,"meta_title":null,"visibility":"public"}],"plaintext":"As part of a recent contract job, I was tasked with creating around 150 distinct\nicons to represent trains in various statuses on an interactive map. This was a\ntask that nobody was keen to pick up, as it involved long hours in an image\neditor.\n\nI volunteered for the task to free up the full-time devs who have deeper domain\nknowledge of the product and are therefore better suited to some of the more\nnitty-gritty logic problems. I quite enjoy tinkering in image editors, but I\nknew I'd quickly get bored of this particular task regardless.\n\nThe boring task\nAs I settled in and started reading the requirements, I learned that the icons\nare mapped to a 4 character status code, and each of the digits (sometimes a\ncombination) dictate various features of the icon. For instance, a certain\ncharacter in the code being 'E' means a train is late, and a corresponding\nindicator is present in the icon.\n\nArmed with this knowledge, I realised I could turn this menial task into a fun\none by generating the icons on the fly based on a provided status code. At the\nsame time, this approach would likely be faster to implement than manually\ncreating the icons, and make icon changes much easier in the future.\n\nMaking the task fun\nIt proved to be quite simple to implement the icon generation. I couldn't avoid\nan image editor entirely; I had to create the unique components that can make up\nan icon (as transparent PNGs). Fortunately, these were mostly simple shapes.\n\nUltimately, the icon generation code looks something like this:\n\n/**\n * @param iconType the type of icon to generate, which includes width and height in px\n * @param trainCode a 4 character code representing a train's status\n * @return the generated icon\n */\npublic BufferedImage generateIcon(IconType iconType, String trainCode) {\n  List<BufferedImage> iconComponents = Arrays.asList(\n    getBodyBackgroundImage(iconType, trainCode),\n    getBodyImage(iconType, trainCode),\n    // more components...\n  );\n\n  BufferedImage result = new BufferedImage(iconType.getWidth(), iconType.getHeight(), \n      BufferedImage.TYPE_INT_ARGB);\n\n  // Stack the components together to create the final image\n  for (BufferedImage iconComponent : iconComponents) {\n    result.getGraphics().drawImage(image, 0, 0, null);\n  }\n\n  return result;\n}\n\n\nThe takeaway\nThere's caching and some application-specific warts to contend with, but this\nblog post isn't really about the implementation of this feature.\n\nAt its essence, the icon generation was quick to implement and resulted in an\nelegant, fun solution to a boring problem. I put this post together to remind\nmyself (and you, if you're reading!) that the \"fun-ness\" of a task can have very\nreal implications for the quality and functionality of the end result. I've\nfound that I'm vastly more productive when working on something I enjoy, and\nthis solution saved time and delivered a better result in the end.\n\nBy transforming a boring task into a fun one, you can improve your productivity\nand have a good time along the way!","html":"<p>As part of a recent contract job, I was tasked with creating around 150 distinct icons to represent trains in various statuses on an interactive map. This was a task that nobody was keen to pick up, as it involved long hours in an image editor.</p><p>I volunteered for the task to free up the full-time devs who have deeper domain knowledge of the product and are therefore better suited to some of the more nitty-gritty logic problems. I quite enjoy tinkering in image editors, but I knew I'd quickly get bored of this particular task regardless.</p><h3 id=\"the-boring-task\">The boring task</h3><p>As I settled in and started reading the requirements, I learned that the icons are mapped to a 4 character status code, and each of the digits (sometimes a combination) dictate various features of the icon. For instance, a certain character in the code being 'E' means a train is late, and a corresponding indicator is present in the icon.</p><p>Armed with this knowledge, I realised I could turn this menial task into a fun one by generating the icons on the fly based on a provided status code. At the same time, this approach would likely be faster to implement than manually creating the icons, and make icon changes much easier in the future.</p><h3 id=\"making-the-task-fun\">Making the task fun</h3><p>It proved to be quite simple to implement the icon generation. I couldn't avoid an image editor entirely; I had to create the unique components that can make up an icon (as transparent PNGs). Fortunately, these were mostly simple shapes.</p><p>Ultimately, the icon generation code looks something like this:</p><!--kg-card-begin: code--><pre><code class=\"language-lang=java\">/**\n * @param iconType the type of icon to generate, which includes width and height in px\n * @param trainCode a 4 character code representing a train's status\n * @return the generated icon\n */\npublic BufferedImage generateIcon(IconType iconType, String trainCode) {\n  List&lt;BufferedImage&gt; iconComponents = Arrays.asList(\n    getBodyBackgroundImage(iconType, trainCode),\n    getBodyImage(iconType, trainCode),\n    // more components...\n  );\n\n  BufferedImage result = new BufferedImage(iconType.getWidth(), iconType.getHeight(), \n      BufferedImage.TYPE_INT_ARGB);\n\n  // Stack the components together to create the final image\n  for (BufferedImage iconComponent : iconComponents) {\n    result.getGraphics().drawImage(image, 0, 0, null);\n  }\n\n  return result;\n}\n</code></pre><!--kg-card-end: code--><h3 id=\"the-takeaway\">The takeaway</h3><p>There's caching and some application-specific warts to contend with, but this blog post isn't really about the implementation of this feature.</p><p>At its essence, the icon generation was quick to implement and resulted in an elegant, fun solution to a boring problem. I put this post together to remind myself (and you, if you're reading!) that the \"fun-ness\" of a task can have very real implications for the quality and functionality of the end result. I've found that I'm vastly more productive when working on something I enjoy, and this solution saved time and delivered a better result in the end.</p><p>By transforming a boring task into a fun one, you can improve your productivity and have a good time along the way!</p>","url":"https://chrisparton.net/finding-the-fun-in-a-boring-task/","uuid":"3a0abdb5-f33f-4dfa-880a-b5a1f8a03876","page":false,"codeinjection_foot":null,"codeinjection_head":null,"codeinjection_styles":null,"comment_id":"5d60adf85655c53c345c80ad"}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"java","limit":12,"skip":0,"numberOfPages":1,"humanPageNumber":1,"prevPageNumber":null,"nextPageNumber":null,"previousPagePath":null,"nextPagePath":null}}}