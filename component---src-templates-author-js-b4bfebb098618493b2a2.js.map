{"version":3,"sources":["webpack:///./src/templates/author.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/utils/siteConfig.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/common/Layout.js","webpack:///./src/components/common/PostCard.js","webpack:///./src/components/common/Pagination.js","webpack:///./src/components/common/Navigation.js","webpack:///./src/components/common/index.js","webpack:///./src/components/common/meta/getAuthorProperties.js","webpack:///./src/components/common/meta/ImageMeta.js","webpack:///./src/components/common/meta/ArticleMeta.js","webpack:///./src/components/common/meta/WebsiteMeta.js","webpack:///./src/components/common/meta/AuthorMeta.js","webpack:///./src/components/common/meta/MetaData.js","webpack:///./src/components/common/meta/index.js"],"names":["Author","_ref","data","location","pageContext","author","ghostAuthor","posts","allGhostPost","edges","twitterUrl","twitter","replace","facebookUrl","facebook","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","Fragment","_components_common_meta__WEBPACK_IMPORTED_MODULE_4__","type","_components_common__WEBPACK_IMPORTED_MODULE_3__","className","name","bio","website","href","target","rel","profile_image","src","alt","map","_ref2","node","key","id","post","pageQuery","__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","staticQueryData","query","render","finalData","props","children","Consumer","module","exports","siteUrl","postsPerPage","siteTitleMeta","siteDescriptionMeta","shareImageWidth","shareImageHeight","shortTitle","siteIcon","backgroundColor","themeColor","m","require","default","ProdPageRenderer","pageResources","InternalPageRenderer","Object","assign","json","DefaultLayout","bodyClass","isHome","site","allGhostSettings","profileImageUrl","primary_author","react_default","Helmet_default","lang","codeinjection_styles","style","cover_image","backgroundImage","title","description","common_Navigation","navigation","navClass","config","gatsby_browser_entry","to","DefaultLayoutSettingsQuery","Layout_DefaultLayout","_1281977687","PostCard","url","slug","readingTime","readingTimeHelper","feature_image","tags","lib","visibility","autolink","featured","excerpt","Pagination","previousPagePath","nextPagePath","humanPageNumber","numberOfPages","role","Navigation","navItem","i","match","label","defaultProps","Layout","common_PostCard","common_Pagination","getAuthorProperties","primaryAuthor","authorProfiles","push","_","compact","sameAsArray","length","join","image","fetchAuthorData","PropTypes","shape","string","isRequired","ImageMeta","content","property","ArticleMetaGhost","settings","canonical","ghostPost","publicTags","tagsHelper","fn","tag","primaryTag","shareImage","get","publisherLogo","logo","resolve","meta_title","meta_description","og_title","og_description","published_at","updated_at","keyword","twitter_title","twitter_description","meta_ImageMeta","ArticleMetaQuery","ArticleMeta_ArticleMetaGhost","_1004981455","WebsiteMeta","WebsiteMetaQuery","WebsiteMeta_WebsiteMeta","_3093436507","AuthorMeta","AuthorMetaQuery","AuthorMeta_AuthorMeta","_4112685740","MetaData","pathname","ghostTag","ghostPage","ArticleMeta","meta_WebsiteMeta","meta_AuthorMeta","MetaDataQuery","MetaData_MetaData","_2233248733","meta_MetaData"],"mappings":"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","file":"component---src-templates-author-js-b4bfebb098618493b2a2.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql } from 'gatsby'\r\n\r\nimport { Layout, PostCard, Pagination } from '../components/common'\r\nimport { MetaData } from '../components/common/meta'\r\n\r\n/**\r\n* Author page (/author/:slug)\r\n*\r\n* Loads all posts for the requested author incl. pagination.\r\n*\r\n*/\r\nconst Author = ({ data, location, pageContext }) => {\r\n    const author = data.ghostAuthor\r\n    const posts = data.allGhostPost.edges\r\n    const twitterUrl = author.twitter ? `https://twitter.com/${author.twitter.replace(/^@/, ``)}` : null\r\n    const facebookUrl = author.facebook ? `https://www.facebook.com/${author.facebook.replace(/^\\//, ``)}` : null\r\n\r\n    return (\r\n        <>\r\n            <MetaData\r\n                data={data}\r\n                location={location}\r\n                type=\"profile\"\r\n            />\r\n            <Layout>\r\n                <div className=\"container\">\r\n                    <header className=\"author-header\">\r\n                        <div className=\"author-header-content\">\r\n                            <h1>{author.name}</h1>\r\n                            {author.bio && <p>{author.bio}</p>}\r\n                            <div className=\"author-header-meta\">\r\n                                {author.website && <a className=\"author-header-item\" href={author.website} target=\"_blank\" rel=\"noopener noreferrer\">Website</a>}\r\n                                {twitterUrl && <a className=\"author-header-item\" href={twitterUrl} target=\"_blank\" rel=\"noopener noreferrer\">Twitter</a>}\r\n                                {facebookUrl && <a className=\"author-header-item\" href={facebookUrl} target=\"_blank\" rel=\"noopener noreferrer\">Facebook</a>}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"author-header-image\">\r\n                            {author.profile_image && <img src={author.profile_image} alt={author.name} />}\r\n                        </div>\r\n                    </header>\r\n                    <section className=\"post-feed\">\r\n                        {posts.map(({ node }) => (\r\n                            // The tag below includes the markup for each post - components/common/PostCard.js\r\n                            <PostCard key={node.id} post={node} />\r\n                        ))}\r\n                    </section>\r\n                    <Pagination pageContext={pageContext} />\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    )\r\n}\r\n\r\nAuthor.propTypes = {\r\n    data: PropTypes.shape({\r\n        ghostAuthor: PropTypes.shape({\r\n            name: PropTypes.string.isRequired,\r\n            cover_image: PropTypes.string,\r\n            profile_image: PropTypes.string,\r\n            website: PropTypes.string,\r\n            bio: PropTypes.string,\r\n            location: PropTypes.string,\r\n            facebook: PropTypes.string,\r\n            twitter: PropTypes.string,\r\n        }),\r\n        allGhostPost: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    location: PropTypes.shape({\r\n        pathname: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n    pageContext: PropTypes.object,\r\n}\r\n\r\nexport default Author\r\n\r\nexport const pageQuery = graphql`\r\n    query GhostAuthorQuery($slug: String!, $limit: Int!, $skip: Int!) {\r\n        ghostAuthor(slug: { eq: $slug }) {\r\n            ...GhostAuthorFields\r\n        }\r\n        allGhostPost(\r\n            sort: { order: DESC, fields: [published_at] },\r\n            filter: {authors: {elemMatch: {slug: {eq: $slug}}}},\r\n            limit: $limit,\r\n            skip: $skip\r\n        ) {\r\n            edges {\r\n                node {\r\n                ...GhostPostFields\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","module.exports = {\n    siteUrl: `https://chrisparton.net`, // Site domain. Do not include a trailing slash!\n\n    postsPerPage: 12, // Number of posts shown on paginated pages (changes this requires sometimes to delete the cache)\n\n    siteTitleMeta: `ChrisParton.net`, // This allows an alternative site title for meta data for pages.\n    siteDescriptionMeta: `The elation and frustration of building software and electronics`, // This allows an alternative site description for meta data for pages.\n\n    shareImageWidth: 1000, // Change to the width of your default share image\n    shareImageHeight: 523, // Change to the height of your default share image\n\n    shortTitle: `ChrisParton`, // Used for App manifest e.g. Mobile Home Screen\n    siteIcon: `favicon.png`, // Logo in /static dir used for SEO, RSS, and App manifest\n    backgroundColor: `#e9e9e9`, // Used for Offline Manifest\n    themeColor: `#15171a`, // Used for Offline Manifest\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { Link, StaticQuery, graphql } from 'gatsby'\nimport Img from 'gatsby-image'\n\nimport { Navigation } from '.'\nimport config from '../../utils/siteConfig'\n\n// Styles\nimport '../../styles/app.css'\nimport '../../styles/blog.css'\n\n/**\n* Main layout component\n*\n* The Layout component wraps around each page and template.\n* It also provides the header, footer as well as the main\n* styles, and meta data for each page.\n*\n*/\nconst DefaultLayout = ({ data, children, bodyClass, isHome }) => {\n    const site = data.allGhostSettings.edges[0].node\n    const profileImageUrl = data.allGhostPost.edges[0].node.primary_author.profile_image\n    const twitterUrl = site.twitter ? `https://twitter.com/${site.twitter.replace(/^@/, ``)}` : null\n    const facebookUrl = site.facebook ? `https://www.facebook.com/${site.facebook.replace(/^\\//, ``)}` : null\n\n    return (\n    <>\n        <Helmet>\n            <html lang={site.lang} />\n            <style type=\"text/css\">{`${site.codeinjection_styles}`}</style>\n            <body className={bodyClass} />\n        </Helmet>\n\n        <div className=\"viewport\">\n\n            <div className=\"viewport-top\">\n                {/* The main header section on top of the screen */}\n                <header className=\"site-head\" style={{ ...site.cover_image && { backgroundImage: `url(${site.cover_image})` } }}>\n                    <div className=\"container\">\n                        <div className=\"site-mast\">\n                        </div>\n                        { isHome ?\n                            <div className=\"site-banner\">\n                                <img className=\"banner-profile-image\" src={profileImageUrl}/>\n                                <h1 className=\"site-banner-title\">{site.title}</h1>\n                                <p className=\"site-banner-desc\">{site.description}</p>\n                            </div> :\n                            null}\n                        <nav className=\"site-nav\">\n                            <div className=\"site-nav-left\">\n                                {/* The navigation items as setup in Ghost */}\n                                <Navigation data={site.navigation} navClass=\"site-nav-item\" />\n                            </div>\n                            <div className=\"site-nav-right\">\n                                { site.twitter && <a href={ twitterUrl } className=\"site-nav-item\" target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"site-nav-icon\" src=\"/images/icons/twitter.svg\" alt=\"Twitter\" /></a>}\n                                { site.facebook && <a href={ facebookUrl } className=\"site-nav-item\" target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"site-nav-icon\" src=\"/images/icons/facebook.svg\" alt=\"Facebook\" /></a>}\n                                <a className=\"site-nav-item\" href={ `https://feedly.com/i/subscription/feed/${config.siteUrl}/rss/` } target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"site-nav-icon\" src=\"/images/icons/rss.svg\" alt=\"RSS Feed\" /></a>\n                            </div>\n                        </nav>\n                    </div>\n                </header>\n\n                <main className=\"site-main\">\n                    {/* All the main content gets inserted here, index.js, post.js */}\n                    {children}\n                </main>\n\n            </div>\n\n            <div className=\"viewport-bottom\">\n                {/* The footer at the very bottom of the screen */}\n                <footer className=\"site-foot\">\n                    <div className=\"site-foot-nav container\">\n                        <div className=\"site-foot-nav-left\">\n                            <Link to=\"/\">{site.title}</Link> © 2019\n                        </div>\n                        <div className=\"site-foot-nav-right\">\n                            <Navigation data={site.navigation} navClass=\"site-foot-nav-item\" />\n                        </div>\n                    </div>\n                </footer>\n\n            </div>\n        </div>\n\n    </>\n    )\n}\n\nDefaultLayout.propTypes = {\n    children: PropTypes.node.isRequired,\n    bodyClass: PropTypes.string,\n    isHome: PropTypes.bool,\n    data: PropTypes.shape({\n        allGhostSettings: PropTypes.object.isRequired,\n    }).isRequired,\n}\n\nconst DefaultLayoutSettingsQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostSettings {\n                allGhostSettings {\n                    edges {\n                        node {\n                            ...GhostSettingsFields\n                        }\n                    }\n                }\n                allGhostPost(limit: 1) {\n                    edges {\n                        node {\n                            primary_author {\n                                profile_image\n                            }\n                        }\n                    }\n                }\n            }\n        `}\n        render={data => <DefaultLayout data={data} {...props} />}\n    />\n)\n\nexport default DefaultLayoutSettingsQuery\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\nimport { Tags } from '@tryghost/helpers-gatsby'\r\nimport { readingTime as readingTimeHelper } from '@tryghost/helpers'\r\n\r\nconst PostCard = ({ post }) => {\r\n    const url = `/${post.slug}/`\r\n    const readingTime = readingTimeHelper(post)\r\n\r\n    return (\r\n        <Link to={url} className=\"post-card\">\r\n            <header className=\"post-card-header\">\r\n                {post.feature_image &&\r\n                    <div className=\"post-card-image\" style={{\r\n                        backgroundImage: `url(${post.feature_image})` ,\r\n                    }}></div>}\r\n                {post.tags && <div className=\"post-card-tags\"> <Tags post={post} visibility=\"public\" autolink={false} /></div>}\r\n                {post.featured && <span>Featured</span>}\r\n                <h2 className=\"post-card-title\">{post.title}</h2>\r\n            </header>\r\n            <section className=\"post-card-excerpt\">{post.excerpt}</section>\r\n            <footer className=\"post-card-footer\">\r\n                <div className=\"post-card-footer-left\">\r\n                    <div className=\"post-card-avatar\">\r\n                        {post.primary_author.profile_image ?\r\n                            <img className=\"author-profile-image\" src={post.primary_author.profile_image} alt={post.primary_author.name}/> :\r\n                            <img className=\"default-avatar\" src=\"/images/icons/avatar.svg\" alt={post.primary_author.name}/>\r\n                        }\r\n                    </div>\r\n                    <span>{ post.primary_author.name }</span>\r\n                </div>\r\n                <div className=\"post-card-footer-right\">\r\n                    <div>{readingTime}</div>\r\n                </div>\r\n            </footer>\r\n        </Link>\r\n    )\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        title: PropTypes.string.isRequired,\r\n        feature_image: PropTypes.string,\r\n        featured: PropTypes.bool,\r\n        tags: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                name: PropTypes.string,\r\n            })\r\n        ),\r\n        excerpt: PropTypes.string.isRequired,\r\n        primary_author: PropTypes.shape({\r\n            name: PropTypes.string.isRequired,\r\n            profile_image: PropTypes.string,\r\n        }).isRequired,\r\n    }).isRequired,\r\n}\r\n\r\nexport default PostCard\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\n\r\nconst Pagination = ({ pageContext }) => {\r\n    const { previousPagePath, nextPagePath, humanPageNumber, numberOfPages } = pageContext\r\n\r\n    return (\r\n        <nav className=\"pagination\" role=\"navigation\">\r\n            <div>\r\n                {previousPagePath && (\r\n\r\n                    <Link to={previousPagePath} rel=\"prev\">\r\n                            Previous\r\n                    </Link>\r\n\r\n                )}\r\n            </div>\r\n            {numberOfPages > 1 && <div className=\"pagination-location\">Page {humanPageNumber} of {numberOfPages}</div>}\r\n            <div>\r\n                {nextPagePath && (\r\n\r\n                    <Link to={nextPagePath} rel=\"next\">\r\n                            Next\r\n                    </Link>\r\n                )}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nPagination.propTypes = {\r\n    pageContext: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default Pagination\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\n\r\n/**\r\n* Navigation component\r\n*\r\n* The Navigation component takes an array of your Ghost\r\n* navigation property that is fetched from the settings.\r\n* It differentiates between absolute (external) and relative link (internal).\r\n* You can pass it a custom class for your own styles, but it will always fallback\r\n* to a `site-nav-item` class.\r\n*\r\n*/\r\nconst Navigation = ({ data, navClass }) => (\r\n    <>\r\n        {data.map((navItem, i) => {\r\n            if (navItem.url.match(/^\\s?http(s?)/gi)) {\r\n                return <a className={navClass} href={navItem.url} key={i} target=\"_blank\" rel=\"noopener noreferrer\">{navItem.label}</a>\r\n            } else {\r\n                return <Link className={navClass} to={navItem.url} key={i}>{navItem.label}</Link>\r\n            }\r\n        })}\r\n    </>\r\n)\r\n\r\nNavigation.defaultProps = {\r\n    navClass: `site-nav-item`,\r\n}\r\n\r\nNavigation.propTypes = {\r\n    data: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            label: PropTypes.string.isRequired,\r\n            url: PropTypes.string.isRequired,\r\n        }).isRequired,\r\n    ).isRequired,\r\n    navClass: PropTypes.string,\r\n}\r\n\r\nexport default Navigation\r\n","export { default as Layout } from './Layout'\r\nexport { default as PostCard } from './PostCard'\r\nexport { default as Pagination } from './Pagination'\r\nexport { default as Navigation } from './Navigation'\r\n","import _ from 'lodash'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const getAuthorProperties = (primaryAuthor) => {\r\n    let authorProfiles = []\r\n\r\n    authorProfiles.push(\r\n        primaryAuthor.website ? primaryAuthor.website : null,\r\n        primaryAuthor.twitter ? `https://twitter.com/${primaryAuthor.twitter.replace(/^@/, ``)}/` : null,\r\n        primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook.replace(/^\\//, ``)}/` : null\r\n    )\r\n\r\n    authorProfiles = _.compact(authorProfiles)\r\n\r\n    return {\r\n        name: primaryAuthor.name || null,\r\n        sameAsArray: authorProfiles.length ? `[\"${_.join(authorProfiles, `\", \"`)}\"]` : null,\r\n        image: primaryAuthor.profile_image || null,\r\n        facebookUrl: primaryAuthor.facebook ? `https://www.facebook.com/${primaryAuthor.facebook.replace(/^\\//, ``)}/` : null,\r\n    }\r\n}\r\n\r\ngetAuthorProperties.defaultProps = {\r\n    fetchAuthorData: false,\r\n}\r\n\r\ngetAuthorProperties.PropTypes = {\r\n    primaryAuthor: PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        profile_image: PropTypes.string,\r\n        website: PropTypes.string,\r\n        twitter: PropTypes.string,\r\n        facebook: PropTypes.string,\r\n    }).isRequired,\r\n}\r\n\r\nexport default getAuthorProperties\r\n","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport PropTypes from 'prop-types'\r\nimport config from '../../../utils/siteConfig'\r\n\r\nconst ImageMeta = ({ image }) => {\r\n    if (!image) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <Helmet>\r\n            <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n            <meta name=\"twitter:image\" content={image} />\r\n            <meta property=\"og:image\" content={image} />\r\n            <meta property=\"og:image:width\" content={config.shareImageWidth} />\r\n            <meta property=\"og:image:height\" content={config.shareImageHeight} />\r\n        </Helmet >\r\n    )\r\n}\r\n\r\nImageMeta.propTypes = {\r\n    image: PropTypes.string,\r\n}\r\n\r\nexport default ImageMeta\r\n","import React from 'react'\r\nimport Helmet from \"react-helmet\"\r\nimport { StaticQuery, graphql } from 'gatsby'\r\nimport PropTypes from 'prop-types'\r\nimport _ from 'lodash'\r\nimport url from 'url'\r\n\r\nimport getAuthorProperties from './getAuthorProperties'\r\nimport ImageMeta from './ImageMeta'\r\nimport config from '../../../utils/siteConfig'\r\n\r\nimport { tags as tagsHelper } from '@tryghost/helpers'\r\n\r\nconst ArticleMetaGhost = ({ data, settings, canonical }) => {\r\n    const ghostPost = data\r\n    settings = settings.allGhostSettings.edges[0].node\r\n\r\n    const author = getAuthorProperties(ghostPost.primary_author)\r\n    const publicTags = _.map(tagsHelper(ghostPost, { visibility: `public`, fn: tag => tag }), `name`)\r\n    const primaryTag = publicTags[0] || ``\r\n    const shareImage = ghostPost.feature_image ? ghostPost.feature_image : _.get(settings, `cover_image`, null)\r\n    const publisherLogo = (settings.logo || config.siteIcon) ? url.resolve(config.siteUrl, (settings.logo || config.siteIcon)) : null\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>{ghostPost.meta_title || ghostPost.title}</title>\r\n                <meta name=\"description\" content={ghostPost.meta_description || ghostPost.excerpt} />\r\n                <link rel=\"canonical\" href={canonical} />\r\n\r\n                <meta property=\"og:site_name\" content={settings.title} />\r\n                <meta property=\"og:type\" content=\"article\" />\r\n                <meta property=\"og:title\"\r\n                    content={\r\n                        ghostPost.og_title ||\r\n                        ghostPost.meta_title ||\r\n                        ghostPost.title\r\n                    }\r\n                />\r\n                <meta property=\"og:description\"\r\n                    content={\r\n                        ghostPost.og_description ||\r\n                        ghostPost.excerpt ||\r\n                        ghostPost.meta_description\r\n                    }\r\n                />\r\n                <meta property=\"og:url\" content={canonical} />\r\n                <meta property=\"article:published_time\" content={ghostPost.published_at} />\r\n                <meta property=\"article:modified_time\" content={ghostPost.updated_at} />\r\n                {publicTags.map((keyword, i) => (<meta property=\"article:tag\" content={keyword} key={i} />))}\r\n                {author.facebookUrl && <meta property=\"article:author\" content={author.facebookUrl} />}\r\n\r\n                <meta name=\"twitter:title\"\r\n                    content={\r\n                        ghostPost.twitter_title ||\r\n                        ghostPost.meta_title ||\r\n                        ghostPost.title\r\n                    }\r\n                />\r\n                <meta name=\"twitter:description\"\r\n                    content={\r\n                        ghostPost.twitter_description ||\r\n                        ghostPost.excerpt ||\r\n                        ghostPost.meta_description\r\n                    }\r\n                />\r\n                <meta name=\"twitter:url\" content={canonical} />\r\n                <meta name=\"twitter:label1\" content=\"Written by\" />\r\n                <meta name=\"twitter:data1\" content={author.name} />\r\n                {primaryTag && <meta name=\"twitter:label2\" content=\"Filed under\" />}\r\n                {primaryTag && <meta name=\"twitter:data2\" content={primaryTag} />}\r\n\r\n                {settings.twitter && <meta name=\"twitter:site\" content={`https://twitter.com/${settings.twitter.replace(/^@/, ``)}/`} />}\r\n                {settings.twitter && <meta name=\"twitter:creator\" content={settings.twitter} />}\r\n                <script type=\"application/ld+json\">{`\r\n                    {\r\n                        \"@context\": \"https://schema.org/\",\r\n                        \"@type\": \"Article\",\r\n                        \"author\": {\r\n                            \"@type\": \"Person\",\r\n                            \"name\": \"${author.name}\",\r\n                            ${author.image ? author.sameAsArray ? `\"image\": \"${author.image}\",` : `\"image\": \"${author.image}\"` : ``}\r\n                            ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray}` : ``}\r\n                        },\r\n                        ${publicTags.length ? `\"keywords\": \"${_.join(publicTags, `, `)}\",` : ``}\r\n                        \"headline\": \"${ghostPost.meta_title || ghostPost.title}\",\r\n                        \"url\": \"${canonical}\",\r\n                        \"datePublished\": \"${ghostPost.published_at}\",\r\n                        \"dateModified\": \"${ghostPost.updated_at}\",\r\n                        ${shareImage ? `\"image\": {\r\n                                \"@type\": \"ImageObject\",\r\n                                \"url\": \"${shareImage}\",\r\n                                \"width\": \"${config.shareImageWidth}\",\r\n                                \"height\": \"${config.shareImageHeight}\"\r\n                            },` : ``}\r\n                        \"publisher\": {\r\n                            \"@type\": \"Organization\",\r\n                            \"name\": \"${settings.title}\",\r\n                            \"logo\": {\r\n                                \"@type\": \"ImageObject\",\r\n                                \"url\": \"${publisherLogo}\",\r\n                                \"width\": 60,\r\n                                \"height\": 60\r\n                            }\r\n                        },\r\n                        \"description\": \"${ghostPost.meta_description || ghostPost.excerpt}\",\r\n                        \"mainEntityOfPage\": {\r\n                            \"@type\": \"WebPage\",\r\n                            \"@id\": \"${config.siteUrl}\"\r\n                        }\r\n                    }\r\n                `}</script>\r\n            </Helmet>\r\n            <ImageMeta image={shareImage} />\r\n        </>\r\n    )\r\n}\r\n\r\nArticleMetaGhost.propTypes = {\r\n    data: PropTypes.shape({\r\n        title: PropTypes.string.isRequired,\r\n        published_at: PropTypes.string.isRequired,\r\n        updated_at: PropTypes.string.isRequired,\r\n        meta_title: PropTypes.string,\r\n        meta_description: PropTypes.string,\r\n        primary_author: PropTypes.object.isRequired,\r\n        feature_image: PropTypes.string,\r\n        tags: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                name: PropTypes.string,\r\n                slug: PropTypes.string,\r\n                visibility: PropTypes.string,\r\n            })\r\n        ),\r\n        primaryTag: PropTypes.shape({\r\n            name: PropTypes.string,\r\n        }),\r\n        og_title: PropTypes.string,\r\n        og_description: PropTypes.string,\r\n        twitter_title: PropTypes.string,\r\n        twitter_description: PropTypes.string,\r\n        excerpt: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n    settings: PropTypes.shape({\r\n        allGhostSettings: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    canonical: PropTypes.string.isRequired,\r\n}\r\n\r\nconst ArticleMetaQuery = props => (\r\n    <StaticQuery\r\n        query={graphql`\r\n            query GhostSettingsArticleMeta {\r\n                allGhostSettings {\r\n                    edges {\r\n                        node {\r\n                            ...GhostSettingsFields\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `}\r\n        render={data => <ArticleMetaGhost settings={data} {...props} />}\r\n    />\r\n)\r\n\r\nexport default ArticleMetaQuery\r\n","import React from 'react'\nimport Helmet from \"react-helmet\"\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { StaticQuery, graphql } from 'gatsby'\nimport url from 'url'\n\nimport ImageMeta from './ImageMeta'\nimport config from '../../../utils/siteConfig'\n\nconst WebsiteMeta = ({ data, settings, canonical, title, description, image, type }) => {\n    settings = settings.allGhostSettings.edges[0].node\n\n    const publisherLogo = url.resolve(config.siteUrl, (settings.logo || config.siteIcon))\n    let shareImage = image || data.feature_image || _.get(settings, `cover_image`, null)\n\n    shareImage = shareImage ? url.resolve(config.siteUrl, shareImage) : null\n\n    description = description || data.meta_description || data.description || config.siteDescriptionMeta || settings.description\n    title = title || data.meta_title || data.name || data.title\n\n    return (\n        <>\n            <Helmet>\n                <title>{title}</title>\n                <meta name=\"description\" content={description} />\n                <link rel=\"canonical\" href={canonical} />\n                <meta property=\"og:site_name\" content={settings.title} />\n                <meta property=\"og:type\" content=\"website\" />\n                <meta property=\"og:title\" content={title} />\n                <meta property=\"og:description\" content={description} />\n                <meta property=\"og:url\" content={canonical} />\n                <meta name=\"twitter:title\" content={title} />\n                <meta name=\"twitter:description\" content={description} />\n                <meta name=\"twitter:url\" content={canonical} />\n                {settings.twitter && <meta name=\"twitter:site\" content={`https://twitter.com/${settings.twitter.replace(/^@/, ``)}/`} />}\n                {settings.twitter && <meta name=\"twitter:creator\" content={settings.twitter} />}\n                <script type=\"application/ld+json\">{`\n                    {\n                        \"@context\": \"https://schema.org/\",\n                        \"@type\": \"${type}\",\n                        \"url\": \"${canonical}\",\n                        ${shareImage ? `\"image\": {\n                                \"@type\": \"ImageObject\",\n                                \"url\": \"${shareImage}\",\n                                \"width\": \"${config.shareImageWidth}\",\n                                \"height\": \"${config.shareImageHeight}\"\n                            },` : ``}\n                        \"publisher\": {\n                            \"@type\": \"Organization\",\n                            \"name\": \"${settings.title}\",\n                            \"logo\": {\n                                \"@type\": \"ImageObject\",\n                                \"url\": \"${publisherLogo}\",\n                                \"width\": 60,\n                                \"height\": 60\n                            }\n                        },\n                        \"mainEntityOfPage\": {\n                            \"@type\": \"WebPage\",\n                            \"@id\": \"${config.siteUrl}\"\n                        },\n                        \"description\": \"${description}\"\n                    }\n                `}</script>\n            </Helmet>\n            <ImageMeta image={shareImage} />\n        </>\n    )\n}\n\nWebsiteMeta.propTypes = {\n    data: PropTypes.shape({\n        title: PropTypes.string,\n        feature_image: PropTypes.string,\n        description: PropTypes.string,\n        bio: PropTypes.string,\n        profile_image: PropTypes.string,\n    }).isRequired,\n    settings: PropTypes.shape({\n        allGhostSettings: PropTypes.object.isRequired,\n    }).isRequired,\n    canonical: PropTypes.string.isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n    type: PropTypes.oneOf([`WebSite`, `Series`]).isRequired,\n}\n\nconst WebsiteMetaQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostSettingsWebsiteMeta {\n                allGhostSettings {\n                    edges {\n                        node {\n                            ...GhostSettingsFields\n                        }\n                    }\n                }\n            }\n        `}\n        render={data => <WebsiteMeta settings={data} {...props} />}\n    />\n)\n\nexport default WebsiteMetaQuery\n","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport PropTypes from 'prop-types'\r\nimport _ from 'lodash'\r\nimport { StaticQuery, graphql } from 'gatsby'\r\n\r\nimport ImageMeta from './ImageMeta'\r\nimport getAuthorProperties from './getAuthorProperties'\r\nimport config from '../../../utils/siteConfig'\r\n\r\nconst AuthorMeta = ({ data, settings, canonical }) => {\r\n    settings = settings.allGhostSettings.edges[0].node\r\n\r\n    const author = getAuthorProperties(data)\r\n    const shareImage = author.image || _.get(settings, `cover_image`, null)\r\n    const title = `${data.name} - ${settings.title}`\r\n    const description = data.bio || config.siteDescriptionMeta || settings.description\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>{title}</title>\r\n                <meta name=\"description\" content={description} />\r\n                <link rel=\"canonical\" href={canonical} />\r\n                <meta property=\"og:site_name\" content={settings.title} />\r\n                <meta property=\"og:type\" content=\"profile\" />\r\n                <meta property=\"og:title\" content={title} />\r\n                <meta property=\"og:description\" content={description} />\r\n                <meta property=\"og:url\" content={canonical} />\r\n                <meta name=\"twitter:title\" content={title} />\r\n                <meta name=\"twitter:description\" content={description} />\r\n                <meta name=\"twitter:url\" content={canonical} />\r\n                {settings.twitter && <meta name=\"twitter:site\" content={`https://twitter.com/${settings.twitter.replace(/^@/, ``)}/`} />}\r\n                {settings.twitter && <meta name=\"twitter:creator\" content={settings.twitter} />}\r\n                <script type=\"application/ld+json\">{`\r\n                    {\r\n                        \"@context\": \"https://schema.org/\",\r\n                        \"@type\": \"Person\",\r\n                        \"name\": \"${data.name}\",\r\n                        ${author.sameAsArray ? `\"sameAs\": ${author.sameAsArray},` : ``}\r\n                        \"url\": \"${canonical}\",\r\n                        ${shareImage ? `\"image\": {\r\n                                \"@type\": \"ImageObject\",\r\n                                \"url\": \"${shareImage}\",\r\n                                \"width\": \"${config.shareImageWidth}\",\r\n                                \"height\": \"${config.shareImageHeight}\"\r\n                            },` : ``}\r\n                        \"mainEntityOfPage\": {\r\n                            \"@type\": \"WebPage\",\r\n                            \"@id\": \"${config.siteUrl}\"\r\n                        },\r\n                        \"description\": \"${description}\"\r\n                    }\r\n                `}</script>\r\n            </Helmet>\r\n            <ImageMeta image={shareImage} />\r\n        </>\r\n    )\r\n}\r\n\r\nAuthorMeta.propTypes = {\r\n    data: PropTypes.shape({\r\n        name: PropTypes.string,\r\n        bio: PropTypes.string,\r\n        profile_image: PropTypes.string,\r\n        website: PropTypes.string,\r\n        twitter: PropTypes.string,\r\n        facebook: PropTypes.string,\r\n    }).isRequired,\r\n    settings: PropTypes.shape({\r\n        allGhostSettings: PropTypes.object.isRequired,\r\n    }).isRequired,\r\n    canonical: PropTypes.string.isRequired,\r\n}\r\n\r\nconst AuthorMetaQuery = props => (\r\n    <StaticQuery\r\n        query={graphql`\r\n            query GhostSettingsAuthorMeta {\r\n                allGhostSettings {\r\n                    edges {\r\n                        node {\r\n                            ...GhostSettingsFields\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        `}\r\n        render={data => <AuthorMeta settings={data} {...props} />}\r\n    />\r\n)\r\n\r\nexport default AuthorMetaQuery\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport url from 'url'\n\nimport config from '../../../utils/siteConfig'\nimport ArticleMeta from './ArticleMeta'\nimport WebsiteMeta from './WebsiteMeta'\nimport AuthorMeta from './AuthorMeta'\n\n/**\n* MetaData will generate all relevant meta data information incl.\n* JSON-LD (schema.org), Open Graph (Facebook) and Twitter properties.\n*\n*/\nconst MetaData = ({\n    data,\n    settings,\n    title,\n    description,\n    image,\n    location,\n}) => {\n    const canonical = url.resolve(config.siteUrl, location.pathname)\n    const { ghostPost, ghostTag, ghostAuthor, ghostPage } = data\n    settings = settings.allGhostSettings.edges[0].node\n\n    if (ghostPost) {\n        return (\n            <ArticleMeta\n                data={ghostPost}\n                canonical={canonical}\n            />\n        )\n    } else if (ghostTag) {\n        return (\n            <WebsiteMeta\n                data={ghostTag}\n                canonical={canonical}\n                type=\"Series\"\n            />\n        )\n    } else if (ghostAuthor) {\n        return (\n            <AuthorMeta\n                data={ghostAuthor}\n                canonical={canonical}\n            />\n        )\n    } else if (ghostPage) {\n        return (\n            <WebsiteMeta\n                data={ghostPage}\n                canonical={canonical}\n                type=\"WebSite\"\n            />\n        )\n    } else {\n        title = title || config.siteTitleMeta || settings.title\n        description = description || config.siteDescriptionMeta || settings.description\n        image = image || settings.cover_image || null\n\n        image = image ? url.resolve(config.siteUrl, image) : null\n\n        return (\n            <WebsiteMeta\n                data={{}}\n                canonical={canonical}\n                title={title}\n                description={description}\n                image={image}\n                type=\"WebSite\"\n            />\n        )\n    }\n}\n\nMetaData.defaultProps = {\n    data: {},\n}\n\nMetaData.propTypes = {\n    data: PropTypes.shape({\n        ghostPost: PropTypes.object,\n        ghostTag: PropTypes.object,\n        ghostAuthor: PropTypes.object,\n        ghostPage: PropTypes.object,\n    }).isRequired,\n    settings: PropTypes.shape({\n        allGhostSettings: PropTypes.object.isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    title: PropTypes.string,\n    description: PropTypes.string,\n    image: PropTypes.string,\n}\n\nconst MetaDataQuery = props => (\n    <StaticQuery\n        query={graphql`\n            query GhostSettingsMetaData {\n                allGhostSettings {\n                    edges {\n                        node {\n                            title\n                            description\n                        }\n                    }\n                }\n            }\n        `}\n        render={data => <MetaData settings={data} {...props} />}\n    />\n)\n\nexport default MetaDataQuery\n","export { default as MetaData } from './MetaData'\r\n"],"sourceRoot":""}